From: <Saved by Microsoft Internet Explorer 5>
Subject: Research on Fault-Tolerant and Dependable CORBA
Date: Tue, 24 Oct 2006 17:33:39 +0800
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.cs.wustl.edu/~schmidt/corba-research-reliable.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2962

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Research on Fault-Tolerant and Dependable =
CORBA</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dutf-8"><LINK rev=3Dmake=20
href=3D'mailto:schmidt@cs.wustl.edu"'>
<META content=3D"MSHTML 6.00.2900.2963" name=3DGENERATOR></HEAD>
<BODY text=3D#000000 vLink=3D#ff0f0f link=3D#000fff bgColor=3D#ffffff>
<HR>

<H3><A name=3Dreal-time>Research on Fault-Tolerant and Dependable =
CORBA</H3>The=20
following papers describe our work on <A=20
href=3D"http://www.omg.org/cgi-bin/doc?ptc/2000-04-04">Fault-Tolerant</A>=
 and=20
dependable CORBA.
<P>
<OL>
  <LI>Aniruddha Gokhale, Balachandran Natarajan, Joseph Cross, and =
Douglas C.=20
  Schmidt, <A =
href=3D"http://www.cs.wustl.edu/~schmidt/PDF/CCJ-2002.pdf">Towards=20
  Dependable Real-time CORBA Middleware</A>, <A=20
  href=3D"http://www.kluweronline.com/issn/1386-7857">Cluster Computing: =
the=20
  Journal on Networks, Software, and Applications</A> Special Issue on=20
  Dependable Distributed Systems, edited by Alan George, to appear, =
2002.=20
  <P>An increasing number of applications are being developed using =
distributed=20
  object computing (DOC) middleware, such as CORBA. Many of these =
applications=20
  require the underlying middleware, operating systems, and networks to =
provide=20
  dependable end-to-end quality of service (QoS) support to enhance =
their=20
  efficiency, predictability, scalability, and reliability. The Object=20
  Management Group (OMG), which standardizes CORBA, has addressed many =
of these=20
  application requirements individually in the Real-time CORBA =
(RT-CORBA) and=20
  Fault-tolerant CORBA (FT-CORBA) specifications. Though the =
implementations of=20
  RT-CORBA are suitable for mission-critical commercial or military =
distributed=20
  real-time and embedded (DRE) systems, the usage of FT-CORBA with =
RT-CORBA=20
  implementations are not yet suitable for systems that have stringent=20
  simultaneous dependability and predictability requirements.=20
  <P>This paper provides three contributions to the study and evaluation =
of=20
  dependable CORBA middleware for performance-sensitive DRE systems. =
First, we=20
  provide an overview of FT-CORBA and illustrate the sources of =
unpredictability=20
  associated with conventional FT-CORBA implementations. Second, we =
discuss the=20
  QoS requirements of an important class of mission-critical DRE systems =
to show=20
  how these requirements are not well served by FT-CORBA today. Finally, =
we=20
  empirically evaluate new dependability strategies for FT-CORBA that =
can help=20
  make the use of DOC middleware for mission-critical DRE systems a =
reality.=20
  <P></P>
  <LI>Chris Gill, Joe Loyall, Rick Schantz, Douglas C. Schmidt, <A=20
  href=3D"http://www.cs.wustl.edu/~schmidt/PDF/WDMS.pdf">Experiences =
Using=20
  Adaptive Middleware in Distributed Real-time Embedded Application =
Contexts: a=20
  Dependability Perspective</A>, Proceedings of the IEEE Workshop on =
Dependable=20
  Middleware-Based Systems, Washington, D.C., June 23-26, 2002.
  <P>Over the past few years we have developed a number of real world=20
  applications that have both motivated and used middleware technologies =
for=20
  COTS-based distributed object computing in general, and runtime =
adaptive=20
  behavior in particular. In this context, a new twist on the theme of=20
  dependability involves adaptation as an effective means for dealing =
with the=20
  less-than-optimum situations that often arise due to failures and =
other forms=20
  of sudden, unexpected behavior. This paper briefly describes two of =
these=20
  applications, Weapons Systems Open Architecture (WSOA) and Unmanned =
Aerial=20
  Vehicles (UAV), which have already undergone a series of evaluation =
steps to=20
  determine the suitability of their concepts and implementations under=20
  realistic usage scenarios.=20
  <P>Our focus in this paper is on the adaptivity exhibited by WSOA and =
UAV=20
  applications under changing operating conditions, and on the technical =
basis=20
  for the effective marshaling of modified workplans to keep application =
mission=20
  objectives focused using available resources. We summarize some of the =
lessons=20
  learned thus far in developing these applications and the underlying=20
  middleware technologies, and show how they influence each other. We =
also=20
  assess the suitability of the solutions offered, discuss some of the=20
  difficulties encountered along the way, and outline the means we are =
applying=20
  to overcome them. We conclude with some of the key research challenges =
that=20
  must be resolved to field distributed real-time and embedded systems =
that can=20
  be depended upon to perform adequately, even under extreme and unusual =

  operating circumstances.
  <P></P>
  <LI>Balachandran Natarajan, Joseph Cross, Aniruddha Gokhale, Douglas =
C.=20
  Schmidt, Christoper Andrews, and Sylvester Fernandez, and Chris Gill, =
<A=20
  href=3D"http://www.cs.wustl.edu/~schmidt/PDF/WDMS02.pdf">Towards =
Dependable=20
  Real-time and Embedded CORBA Systems</A>, Proceedings of the IEEE =
Workshop on=20
  Dependable Middleware-Based Systems, Washington, D.C., June 23-26, =
2002.=20
  <P>Commercial off-the-shelf components (COTS) based on distributed =
object=20
  computing (DOC) middleware, such as CORBA, are increasingly being used =
to=20
  develop and deploy distributed applications rapidly and cost =
effectively.=20
  Conventional COTS middleware has been considered less suitable for=20
  mission-critical distributed real-time and embedded (DRE) applications =
that=20
  require support for multiple quality of service (QoS) properties, such =
as=20
  dependability, efficiency, and predictability. The CORBA Real-time and =

  Fault-tolerance specifications individually address the issues of=20
  predictability and dependability, respectively. However, =
implementations of=20
  these specifications do not yet support DRE applications with =
stringent=20
  simultaneous dependability and predictability requirements. This paper =

  provides three contributions to the development of middleware services =
that=20
  simultaneously address dependability and predictability requirements =
of key=20
  classes of DRE applications, such as commercial or military avionics =
systems,=20
  that require a high degree of reliability and bounded latency even in =
the case=20
  of faults. First, we outline the QoS requirements of an important =
class of DRE=20
  applications that possess both stringent time/space constraints and =
high=20
  dependability needs. Second, we show that meeting DRE application=20
  dependability and timing requirements by naively applying the =
strategies in=20
  the existing CORBA specification is replete with contradictions and =
pitfalls.=20
  Finally, we propose and empirically evaluate a new strategy that =
enables the=20
  composition of semantically compatible strategies from the Real-time =
and=20
  Fault-tolerant CORBA specifications to support DRE applications more=20
  effectively.=20
  <P></P>
  <LI>Andy Gokhale, Bala Natarajan, Douglas C. Schmidt and Shalini =
Yajnik, <A=20
  href=3D"http://www.cs.wustl.edu/~schmidt/PDF/HIPC-2000.pdf">Applying =
Patterns to=20
  Improve the Performance of Fault-Tolerant CORBA</A>, Proceedings of =
the 7th <A=20
  href=3D"http://www.hipc.org/hipc2000/hipc2000.html">International =
Conference on=20
  High Performance Computing</A> (HiPC 2000), ACM/IEEE, Bangalore, =
India,=20
  December 2000.=20
  <P>There is a significant trend to develop mission-critical, embedded, =

  telecommunications, and financial distributed systems based on =
distributed=20
  object computing middleware, such as CORBA. Applications for these =
systems=20
  often require the underlying middleware, operating systems, and =
networks to=20
  provide end-to-end quality of service (QoS) support to enhance their=20
  efficiency, predictability, scalability, and fault tolerance. The =
Object=20
  Management Group (OMG), which standardizes CORBA, has addressed many =
of these=20
  application requirements recently in the Real-time CORBA and =
Fault-tolerant=20
  CORBA specifications.=20
  <P>This paper provides two contributions to the study and design of =
CORBA=20
  middleware that provides multiple QoS properties. First, we describe =
results=20
  of experiments conducted to measure the performance of a =
fault-tolerant CORBA=20
  services framework called DOORS and illustrate how common =
implementation=20
  pitfalls can adversely affect performance. Second, we describe the =
patterns we=20
  are incorporating into the DOORS fault-tolerant CORBA service to=20
  simultaneously improve its performance and fault-tolerance.=20
  <P></P>
  <LI>Andy Gokhale, Bala Natarajan, Douglas C. Schmidt and Shalini =
Yajnik, <A=20
  href=3D"http://www.cs.wustl.edu/~schmidt/PDF/DOA-2000.pdf">DOORS: =
Towards=20
  High-performance Fault-Tolerant CORBA</A>, Proceedings of the 2nd <A=20
  =
href=3D"http://www.cs.rmit.edu.au/conf/doa/2000/cfp.html">International=20
  Symposium on Distributed Objects and Applications</A> (DOA '00), OMG, =
Antwerp,=20
  Belgium, September 2000.=20
  <P>An increasing number of applications are being developed using =
distributed=20
  object computing middleware, such as CORBA. Many of these applications =
require=20
  the underlying middleware, operating systems, and networks to provide=20
  end-to-end quality of service (QoS) support to enhance their =
efficiency,=20
  predictability, scalability, and fault tolerance. The Object =
Management Group=20
  (OMG), which standardizes CORBA, has addressed many of these =
application=20
  requirements recently in the Real-time CORBA and Fault-tolerant CORBA=20
  specifications.=20
  <P>This paper provides four contributions to the study of =
fault-tolerant CORBA=20
  middleware for performance-sensitive applications. First, we provide =
an=20
  overview of the Fault Tolerant CORBA specification. Second, we =
describe a=20
  framework called DOORS, which is implemented as a CORBA service to =
provide=20
  end-to-end application-level fault tolerance. Third, we outline how =
the DOORS'=20
  reliability and fault-tolerance model has been incorporated into the =
standard=20
  OMG Fault-tolerant CORBA specification. Finally, we outline the =
requirements=20
  for CORBA ORB core and higher-level services to support the Fault =
Tolerant=20
  CORBA specification efficiently.=20
  <P></P>
  <LI><A =
href=3D"http://www.cs.wustl.edu/~schmidt/PDF/ieeecomm.pdf">Constructing=20
  Reliable Distributed Communication Systems with CORBA.</A> =
(<EM>updated August=20
  11th, 1996</EM>). Appeared in the <A=20
  href=3D"http://www.ieee.org/comsoc/commag.html">IEEE Communications =
Magazine</A>=20
  feature topic issue on <A=20
  href=3D"http://www.cs.wustl.edu/~schmidt/corba.html">Distributed =
Object=20
  Computing</A>. (with <A =
href=3D"http://www.softwired.ch/people/maffeis">Silvano=20
  Maffeis</A>)
  <P>Communication software and distributed services for next-generation =

  applications must be reliable, efficient, flexible, and reusable. =
These=20
  requirements motivate the use of the Common Object Request Broker =
Architecture=20
  (CORBA). However, building highly available applications with CORBA is =
very=20
  hard. Neither the CORBA standard nor conventional implementations of =
CORBA=20
  directly address complex problems related to distributed computing, =
such as=20
  real-time or high-speed quality of service, partial failures, group=20
  communication, and causal ordering of events.
  <P>This paper makes three contributions to the study of reliable =
distributed=20
  object computing systems with CORBA. First, we examine the question of =
whether=20
  reliable applications can (or should) be implemented with CORBA today. =
Next,=20
  we present an extension to the Object Management Architecture that =
improves=20
  support for reliability and fault-tolerance. Finally, we propose a =
CORBA-based=20
  framework based on the Virtual Synchrony model that supports reliable =
data-=20
  and process-oriented distributed systems. In addition, our proposed =
framework=20
  supports applications requiring loosely coupled processes that =
communicate=20
  through asynchronous messaging.
  <P></P></LI></OL>
<P>
<HR>

<P>Back to my <A=20
href=3D"http://www.cs.wustl.edu/~schmidt/corba-research.html">CORBA =
Research</A>=20
page.=20
<P><!--<EM>=0A=
Visitor #[an error occurred while processing this directive]=0A=
from [an error occurred while processing this directive]=0A=
<EM><br> --><I>Last=20
modified 11:34:34 CDT 28 September 2006 </I></P></BODY></HTML>
