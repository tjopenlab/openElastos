<HTML>
<HEAD>
<TITLE>
AuraSharedMemory_Attach
</TITLE>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312" />
<SCRIPT SRC="/xsl/runningbar.js"></SCRIPT>
<SCRIPT LANGUAGE="VBSCRIPT" src="/xsl/samplemenu.vbs"></SCRIPT>
</HEAD>
<BODY>
<DIV id="nstext" valign="bottom">
<div>
<h3>
AuraSharedMemory_Attach
</h3>
<p></p>
</div>
<p>
        	Map the shared memory to process space.
        </p>
<div class="proto">
<TABLE cellspacing="3" cellpadding="2" style="font-size:90%">
<TR valign="top">
<TD colspan="5" class="datatype">
AURA_API AuraSharedMemory_Attach

            (</TD>
</TR>
<TR valign="top">
<TD width="8%"></TD>
<TD>/*[in]*/<font class="datatype">MemoryProtection</font></TD>
<TD class="param">protect</TD>
</TR>
<TR valign="top">
<TD width="8%"></TD>
<TD>/*[out]*/<font class="datatype">Address *</font></TD>
<TD class="param">pAddress</TD>
</TR>
<TR>
<TD colspan="5" class="datatype">)
                    
                ;</TD>
</TR>
</TABLE>
</div>
<br />
<h4>Parameters</h4>
<DL><DT class="param" style="color:#222222;margin-left:42">protect</DT>
<DD style="margin-left:80"><font style="font-weight:normal;font-style:normal;color:black">
						Specify the protection range of mapping to the process space.It contains the protection range as follows
                    <BR /><BR />
</font></DD>
</DL>
<DL><DT class="param" style="color:#222222;margin-left:42">pAddress</DT>
<DD style="margin-left:80"><font style="font-weight:normal;font-style:normal;color:black">
						The starting and ending address in process space to which it will return after succeeding,which can not be null
                    <BR /><BR />
</font></DD>
</DL>
<h4>Return Value</h4>
<p><table class="agility_table" cellspacing="0" cellpadding="0">
<THEAD class="head"><TD class="cell">Return Value</TD>
<TD class="cell">Hex Value</TD>
<TD class="cell">Description</TD>
</THEAD>
<TR><TD class="cell">NOERROR</TD>
<TD class="cell">0x00000000</TD>
<TD class="cell">Function succeeds in mapping the shared memory to process space.</TD>
</TR>
<TR><TD class="cell">E_INVALID_ARGUMENT</TD>
<TD class="cell">0x80070057</TD>
<TD class="cell">Invalid argument(s)</TD>
</TR>
<TR><TD class="cell">E_OUT_OF_MEMORY</TD>
<TD class="cell">0x8007000E</TD>
<TD class="cell">Insufficient memory</TD>
</TR>
</table></p>
<p>¡¡</p>
<h4>Remarks</h4>
<p>
		 	 Usually we can create a kernel shared memory object by EzCreateSharedMemory</a>, tie the shared memory and virtual address with the method Attach by return 
		 	 interface pointer, and then do read-write operation to the space of this virtual address. Shared memory of 
		 	 other processes can be found by EzFindService</a> and 
		 	 corresponding operations can be done.
		</p>
<p>
		 	One ISharedMemory interface can be attached many times in a process with Attach function, but only the first 
		 	one will succeed. This mapping can be detached from process address space with the method 
		 	Detach</a>.
		</p>
<p>
			One IShareMemory interface can be attached in many processes. The virtual addresses, which it will return 
			in every process are the same.
		</p>
<p>
		 	pAddress must be a valid address pointer, can not be NULL.
		</p>
<p>
		 	Release must be called to release this pointer after using shared memory interface pointer.
		</p>
<h4>Requirements</h4>
<p>
<table style="font-size:95%;vertical-align:top" cellpadding="5">
<tr>
<td>Operating System: </td>
<td>
Windows 2000 or later; Elastos2.0 or later
</td>
<td></td>
</tr>
</table></p>
<script>footer("e_KoreTide")</script>
</DIV>
</BODY>
</HTML>
