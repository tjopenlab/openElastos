
<p class="MsoNormal" style="line-height: 200%; text-autospace: none">
<span style="font-family: 黑体"><font size="5">ElAura</font><font size="5">构件运行平台介绍</font></span></p>
<ul>
	<li>
	<p class="MsoNormal" style="line-height: 200%; text-autospace: none" align="left">
	<span lang="EN-US" style="line-height: 150%; color: black">“</span><span style="line-height: 150%; font-family: 黑体; color: black">Elastos</span><span lang="EN-US" style="line-height: 150%; color: black">”</span><span style="line-height: 150%; font-family: 黑体; color: black">构件运行平台简介<span lang="EN-US">
	</span></span></li>
</ul>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 200%; text-autospace: none">
<span lang="EN-US" style="line-height: 150%">“</span><span style="line-height: 150%; font-family: 宋体">Elastos</span><span lang="EN-US" style="line-height: 150%">”</span><span style="line-height: 150%; font-family: 宋体">构件运行平台提供了一套符合<span lang="EN-US">CAR</span>规范的系统服务构件及支持构件相关编程的<span lang="EN-US">API</span>函数，实现并支持系统构件及用户构件相互调用的机制，为<span lang="EN-US">CAR</span>构件提供了编程运行环境。</span><span lang="EN-US" style="line-height: 150%; color: black">“</span><span style="line-height: 150%; font-family: 宋体; color: black">Elastos</span><span lang="EN-US" style="line-height: 150%; color: black">”</span><span style="line-height: 150%; font-family: 宋体; color: black">运行平台在不同操作系统上有不同的实现，符合<span lang="EN-US">CAR</span>编程规范的应用程序通过该平台实现二进制一级跨操作系统平台的兼容。<span lang="EN-US">
</span></span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 200%; text-autospace: none">
<span style="line-height: 150%; font-family: 宋体; color: black">在<span lang="EN-US">Windows 
2000</span>、<span lang="EN-US">WinCE</span>、<span lang="EN-US">Linux</span>等其他操作系统上，</span><span lang="EN-US" style="line-height: 150%; color: black">“</span><span style="line-height: 150%; font-family: 宋体; color: black">Elastos</span><span lang="EN-US" style="line-height: 150%; color: black">”</span><span style="line-height: 150%; font-family: 宋体; color: black">构件运行平台屏蔽了底层传统操作系统的具体特征，实现了一个构件化的虚拟操作系统。</span><span style="line-height: 150%; font-family: 宋体">在</span><span lang="EN-US" style="line-height: 150%">“</span><span style="line-height: 150%; font-family: 宋体">Elastos</span><span lang="EN-US" style="line-height: 150%">”</span><span style="line-height: 150%; font-family: 宋体">构件运行平台上开发的应用程序，可以不经修改、不损失太多效率、以相同的二进制代码形式，运行于传统操作系统之上。<span lang="EN-US">
</span></span></p>
<ul type="square">
	<li>
	<p class="MsoNormal" style="line-height: 200%; text-autospace: none">
	<span lang="EN-US" style="line-height: 150%; color: black">“</span><span style="line-height: 150%; font-family: 黑体; color: black">Elastos</span><span lang="EN-US" style="line-height: 150%; color: black">”</span><span style="line-height: 150%; font-family: 黑体; color: black">构件运行平台的功能<span lang="EN-US">
	</span></span></li>
</ul>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 200%; text-autospace: none">
<span lang="EN-US" style="line-height: 150%; color: black">“</span><span style="line-height: 150%; font-family: 宋体; color: black">Elastos</span><span lang="EN-US" style="line-height: 150%; color: black">”</span><span style="line-height: 150%; font-family: 宋体; color: black">操作系统提供的其它构件库也是通过这些系统服务构件及系统<span lang="EN-US">API</span>实现的。系统提供的这些构件库为应用编程开发提供了方便：图形系统构件库、设备驱动构件库、文件系统构件库、网络系统构件库等。</span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 200%; text-autospace: none">
<span style="line-height: 150%; font-family: 宋体">从</span><span lang="EN-US" style="line-height: 150%">“</span><span style="line-height: 150%; font-family: 宋体">Elastos</span><span lang="EN-US" style="line-height: 150%">”</span><span style="line-height: 150%; font-family: 宋体">构件运行平台来看，这些构件和应用程序的构件是处于同样的地位。用户可以开发性能更好或者更符合需求的文件系统、网络系统等构件库，替换这些构件库，也可以开发并建立自己的应用程序构件库。<span lang="EN-US">
</span></span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 200%; text-autospace: none">
<span style="line-height: 150%; font-family: 宋体; color: black">从支持<span lang="EN-US">CAR</span>构件的运行环境的角度看，</span><span lang="EN-US" style="line-height: 150%">“</span><span style="line-height: 150%; font-family: 宋体">Elastos</span><span lang="EN-US" style="line-height: 150%">”</span><span style="line-height: 150%; font-family: 宋体">构件运行平台提供了以下功能：根据二进制构件的自描述信息自动生成构件的运行环境，动态加载构件；提供构件之间的自动通信机制，构件间通信可以跨进程甚至跨网络；构件的运行状态监控，错误报告等；提供可干预构件运行状态的机制，如负载均衡、线程同步、访问顺序控制、安全（容错）性控制、软件使用权的控制；构件的生命周期管理，比如进程延续控制、事务控制等。</span><span lang="EN-US" style="line-height: 150%; font-family: 宋体; color: black">
</span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 200%; text-autospace: none">
<span style="line-height: 150%; font-family: 宋体">总之，构件运行平台为<span lang="EN-US">CAR</span>构件提供了对程序员完全透明的运行环境，构件可以运行在不同地址空间，不同环境，甚至跨网络。构件运行平台自动为构件运行提供支持，配置必要的网络协议、针对不同的输入输出设备的协议。程序员不必过多地去关心诸如网络协议转换及构件运行控制等与其它构件互操作时的协调问题，只需专注于自己需要解决的程序算法的实现。从而可以从繁杂庞大的应用环境体系中解放出来，大大提高编程的效率。<span lang="EN-US">
</span></span></p>
<ul type="square">
	<li>
	<p class="MsoBodyText" style="text-indent: 18.0pt; line-height: 200%">
	<span lang="en-us"><font size="4">
	<span style="font-family: 宋体; font-weight: 700">ElAura构件运行平台</span></font></span></p>
	</li>
</ul>
<p class="MsoBodyText" style="text-indent: 18.0pt; line-height: 200%">
<span style="font-family:宋体"><font size="4">在Elastos操作系统中，<span lang="EN-US">ElAura</span>构件运行平台与<span lang="EN-US">“</span>Elastos<span lang="EN-US">”</span>灵活内核共同构成了完整的操作系统。<span lang="EN-US">ElAura</span>构件运行平台提供了一套符合<span lang="EN-US">CAR</span>规范的系统服务构件及支持构件相关编程的<span lang="EN-US">API</span>函数，实现并支持系统构件及用户构件相互调用的机制，为<span lang="EN-US">CAR</span>构件提供了编程运行环境。<span lang="EN-US">ElAura</span>构件运行平台在不同操作系统上有不同的实现，符合<span lang="EN-US">CAR</span>编程规范的应用程序通过该平台实现二进制级跨操作系统平台兼容。<span lang="EN-US">ElAura</span>构件运行平台直接运行二进制构件，而不是像<span lang="EN-US">JAVA</span>和<span lang="EN-US">.NET</span>那样通过虚拟机在运行程序时解释执行中间代码</font></span><span style="font-family:宋体"><font size="4">。因此，与其他面向构件编程的系统相比，具有资源消耗小，运行效率高的优点。
</font></span></p>
<ul type="square">
	<li>
	<p class="MsoBodyText" style="text-indent:18.0pt"><font size="4">
	<span style="font-family: 宋体; font-weight: 700">ElAura开发目的及意义</span></font></p>
	</li>
</ul>
<p class="MsoBodyText" style="text-indent:18.0pt; line-height:200%">
<span style="font-family: 宋体">
<font size="4">开发<span lang="EN-US">ElAura</span>的主要目的是使网络环境下的</font></span><font size="4"><span lang="EN-US">CAR</span><span style="font-family: 宋体">构件能够跨操作系统运行</span></font><span style="font-family:宋体"><font size="4">。<span lang="EN-US">ElAura</span>构件运行平台的实现将促进<span lang="EN-US">CAR
</span>构件标准的推广，同时原本只能在和欣系统上运行的应用程序和网络<span lang="EN-US">CAR</span>构件可以直接在其他宿主操作系统上运行，不仅扩展了宿主系统的功能，也促进了宿主系统和和欣双方的应用与发展。</font></span></p>
<p class="MsoBodyText" style="text-indent:18.0pt; line-height:200%"><span style="font-family:宋体">
<font size="4">在<span lang="EN-US">Windows</span>、<span lang="EN-US">Linux</span>、<span lang="EN-US">WinCE</span>等其他操作系统上，<span lang="EN-US">ElAura</span>构件运行平台屏蔽了底层传统操作系统的具体特征，实现了一个统一的运行环境。在和欣上开发的应用程序，可以不经修改、不损失太多效率、以相同的二进制代码形式，运行于传统操作系统之上。缩小了应用软件平台间移植的周期，提高了软件复用性。</font></span></p>
<p class="MsoBodyText" style="text-indent: 18.0pt; line-height: 200%">
　</p>

<p style="line-height: 200%">

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

<a href="index.htm">返回首页</a></li>
</p>
