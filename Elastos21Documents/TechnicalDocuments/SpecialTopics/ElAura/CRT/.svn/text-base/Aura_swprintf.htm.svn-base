<HTML>
<HEAD>
<title>
Aura_swprintf
</title>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312" />
<SCRIPT SRC="/xsl/runningbar.js"></SCRIPT>
<SCRIPT LANGUAGE="VBSCRIPT" src="/xsl/samplemenu.vbs"></SCRIPT>
</HEAD>
<BODY>
<DIV id="nstext" valign="bottom">
<div>
<H3>Aura_swprintf </H3>
</div>
<p>Writes formatted data to a string.</p>
<div class="proto">
<TABLE cellspacing="3" cellpadding="2" style="font-size:90%">
<TR valign="top">
<TD colspan="5" class="datatype">EXTERN_C int CDECL Aura_swprintf
                    (
                 </TD>
</TR>
<TR valign="top">
<TD width="8%"></TD>
<TD class="datatype">char*</TD>
<TD class="param">buffer<span style="color:black; font-size:110%">,</span></TD>
</TR>
<TR valign="top">
<TD width="8%"></TD>
<TD class="datatype">const char*</TD>
<TD class="param">format[, argument]...</TD>
</TR>
<TR>
<TD colspan="5" class="datatype">);</TD>
</TR>
</TABLE>
</div>
<br />
<H4>Parameters</H4>
<DL><DT class="param" style="color:#222222;margin-left:42">buffer</DT>
<DD style="margin-left:80"><font style="font-weight:normal;font-style:normal;color:black">Storage location for output.<BR /><BR />
</font></DD>
<DT class="param" style="color:#222222;margin-left:42">format[, argument]...</DT>
<DD style="margin-left:80"><font style="font-weight:normal;font-style:normal;color:black">Format-control string(argument is Optional arguments).<BR /><BR />
</font></DD>
</DL>
<DL></DL>
<h4>Return Value</h4>
<p>sprintf returns the number of bytes stored in buffer, not counting the terminating null character. 
swprintf returns the number of wide characters stored in buffer, not counting the terminating null wide character.</p>
<h4>Remarks</h4>
<p>The sprintf function formats and stores a series of characters and values in buffer. Each argument (if any) is converted and output according to the corresponding format specification in format. The format consists of ordinary characters and has the same form and function as the format argument for printf. A null character is appended after the last character written. If copying occurs between strings that overlap, the behavior is undefined.
swprintf is a wide-character version of sprintf; the pointer arguments to swprintf are wide-character strings. Detection of encoding errors in swprintf may differ from that in sprintf. swprintf and fwprintf behave identically except that swprintf writes output to a string rather than to a destination of type FILE.</p>
<h4>Requirements</h4>
<table class="methodtbl" cellspacing="0" cellpadding="0">
<THEAD class="head">
<TD width="20%" class="cell">
Routine</TD>
<TD width="20%" class="cell">
Required header</TD>
<TD class="cell">
Compatibility</TD>
</THEAD>
<TR>
<TD class="cell"><B>sprintf</B></TD>
<TD class="cell">stdio.h</TD>
<TD class="cell">ANSI, Windows 2000, Elastos 2.0</TD>
</TR>
<TR>
<TD class="cell"><B>swprintf</B></TD>
<TD class="cell">stdio.h</TD>
<TD class="cell">ANSI, Windows 2000, Elastos 2.0</TD>
</TR>
</table>
<p></p>
<table class="methodtbl" cellspacing="0" cellpadding="0">
<THEAD class="head">
<TD width="30%" class="cell">
                Library
            </TD>
<TD class="cell">
                Description
            </TD>
</THEAD>
<TR>
<TD class="cell">
                libc.lib
            </TD>
<TD class="cell">
                Single thread static library
            </TD>
</TR>
<TR>
<TD class="cell">
                elacrt.lib
            </TD>
<TD class="cell">
                Import library for elacrt.dll
            </TD>
</TR>
</table>
<h4>Example</h4>
<p><script>showButton_e()</script></p>
<pre class="codeview">
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* sprintf.cpp: This program uses sprintf to format various
 * data and place them in the string named buffer.
 */

#include &lt;stdio.h&gt;

int main()
{
    char  buffer[200], s[] = "computer", c = 'l';
    int    i = 35, j;
    float fp = 1.7320534f;

    /* Format and print various data: */
    j  = sprintf(buffer,      "\tString:     %s\n", s);
    j += sprintf(buffer + j, "\tCharacter: %c\n", c);
    j += sprintf(buffer + j, "\tInteger:    %d\n", i);
    j += sprintf(buffer + j, "\tReal:        %f\n", fp);

    printf("Output:\n%s\ncharacter count = %d\n", buffer, j);

    return 0;
}
</pre>
<h4>Output</h4>
<pre class="codeview">Output:
String:     computer
Character: l
Integer:    35
Real:        1.732053

character count = 75</pre>
</DIV>
</BODY>
</HTML>

