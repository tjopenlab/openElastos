<HTML>
<HEAD>
<title>
Aura_realloc
</title>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=gb2312" />
<SCRIPT SRC="/xsl/runningbar.js"></SCRIPT>
<SCRIPT LANGUAGE="VBSCRIPT" src="/xsl/samplemenu.vbs"></SCRIPT>
</HEAD>
<BODY>
<DIV id="nstext" valign="bottom">
<div>
<H3>Aura_realloc</H3>
</div>
<p>Reallocates memory blocks.</p>
<div class="proto">
<TABLE cellspacing="3" cellpadding="2" style="font-size:90%">
<TR valign="top">
<TD colspan="5" class="datatype">EXTERN_C void * CDECL Aura_realloc
                    (
                 </TD>
</TR>
<TR valign="top">
<TD width="8%"></TD>
<TD class="datatype">void*</TD>
<TD class="param">memblock<span style="color:black; font-size:110%">,</span></TD>
</TR>
<TR valign="top">
<TD width="8%"></TD>
<TD class="datatype">size_t</TD>
<TD class="param">size</TD>
</TR>
<TR>
<TD colspan="5" class="datatype">);</TD>
</TR>
</TABLE>
</div>
<br />
<H4>Parameters</H4>
<DL><DT class="param" style="color:#222222;margin-left:42">memblock</DT>
<DD style="margin-left:80"><font style="font-weight:normal;font-style:normal;color:black">Pointer to previously allocated memory block.<BR /><BR />
</font></DD>
<DT class="param" style="color:#222222;margin-left:42">size</DT>
<DD style="margin-left:80"><font style="font-weight:normal;font-style:normal;color:black">New size in bytes.<BR /><BR />
</font></DD>
</DL>
<h4>Return Value</h4>
<p>realloc returns a void pointer to the reallocated (and possibly moved) memory block. The return value is NULL if the size is zero and the buffer argument is not NULL or if there is not enough available memory to expand the block to the given size. In the first case, the original block is freed. In the second, the original block is unchanged. The return value points to a storage space that is guaranteed to be suitably aligned for storage of any type of object. To get a pointer to a type other than void, use a type cast on the return value.</p>
<h4>Remarks</h4>
<p>The realloc function changes the size of an allocated memory block. The memblock argument points to the beginning of the memory block. If memblock is NULL, realloc behaves the same way as malloc and allocates a new block of size bytes. If memblock is not NULL, it should be a pointer returned by a previous call to calloc, malloc or realloc.The size argument gives the new size of the block, in bytes. The contents of the block are unchanged up to the shorter of the new and old sizes, although the new block can be in a different location. Because the new block can be in a new memory location, the pointer returned by realloc is not guaranteed to be the pointer passed through the memblock argument.</p>
<h4>Requirements</h4>
<table class="methodtbl" cellspacing="0" cellpadding="0">
<THEAD class="head">
<TD width="20%" class="cell">
Routine</TD>
<TD width="20%" class="cell">
Required header</TD>
<TD class="cell">
Compatibility</TD>
</THEAD>
<TR>
<TD class="cell"><B>realloc</B></TD>
<TD class="cell">stdlib.h</TD>
<TD class="cell">ANSI, Windows 2000, Elastos 2.0</TD>
</TR>
</table>
<p></p>
<table class="methodtbl" cellspacing="0" cellpadding="0">
<THEAD class="head">
<TD width="30%" class="cell">
                Library
            </TD>
<TD class="cell">
                Description
            </TD>
</THEAD>
<TR>
<TD class="cell">
                libc.lib
            </TD>
<TD class="cell">
                Single thread static library
            </TD>
</TR>
<TR>
<TD class="cell">
                elacrt.lib
            </TD>
<TD class="cell">
                Import library for elacrt.dll
            </TD>
</TR>
</table>
<h4>Example</h4>
<p><script>showButton_e()</script></p>
<pre class="codeview">
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* realloc.cpp: This program allocates a block of memory for
 * buffer and then uses _msize to display the size of that
 * block. Next, it uses realloc to expand the amount of
 * memory used by buffer and then calls _msize again to
 * display the new amount of memory allocated to buffer.
 */

#include &lt;stdio.h&gt;
#include &lt;malloc.h&gt;
#include &lt;stdlib.h&gt;

int main()
{
    long *buffer;
    size_t size = 1000;

    if ((buffer = (long *)malloc(1000 * sizeof(long))) == NULL)
        exit(1);


    printf("The malloc is success.\n");

    /* Reallocate and show new size: */
    if ((buffer = (long *) realloc(buffer, size + (1000 * sizeof(long))))
        ==  NULL)
        exit(1);

    printf("The realloc is succcess.\n");

    free(buffer);

    return 0;
}
</pre>
<h4>Output</h4>
<pre class="codeview">The malloc is success.
The realloc is succcess.</pre>
</DIV>
</BODY>
</HTML>

