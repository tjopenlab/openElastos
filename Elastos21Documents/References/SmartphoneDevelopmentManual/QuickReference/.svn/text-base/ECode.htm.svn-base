<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->
<html>
<head>
<title>ECode返回值</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>
<body>
<h3>ECode返回值 </h3>
    <p>在CAR文件中定义的接口方法，返回值类型全部都是ECode。</p>
    <p>ECode是一个32位二进制整数。ECode高16位中，最高位表示方法调用错误(1)或成功(0)；其余15位表示具体的错误信息，例如：接口错误、驱动错误、CRT错误、文件系统错误、图形系统错误等。对于许多CAR兼容的实现语言（例如：Visual Basic、Java）而言，这些ECode被运行时库或者虚拟机截取，然后被映射为语言中特定的异常（exception）。ECode低16位用作调试和测试用。</p>
    <p>常见的ECode返回值及其解释，列表如下：</p>

    <table>
        <thead>
            <td width="25%">返回值</td>
            <td width="17%">十六进制值</td>
            <td width="58%">描述</td>
        </thead>
        <tr>
            <td>NOERROR</td>
            <td>0x00000000</td>
            <td>方法调用成功</td>
        </tr>
        <tr>
            <td>E_PROCESS_NOT_ACTIVE</td>
            <td>0x81010000</td>
            <td>进程不是活动状态</td>
        </tr>
        <tr>
            <td>E_PROCESS_STILL_ACTIVE</td>
            <td>0x81020000</td>
            <td>进程仍是活动状态</td>
        </tr>
        <tr>
            <td>E_PROCESS_NOT_STARTED</td>
            <td>0x81030000</td>
            <td>进程未开始执行</td>
        </tr>
        <tr>
            <td>E_PROCESS_ALREADY_STARTED</td>
            <td>0x81040000</td>
            <td>进程已经开始执行</td>
        </tr>
        <tr>
            <td>E_PROCESS_ALREADY_EXITED</td>
            <td>0x81050000</td>
            <td>进程已经结束</td>
        </tr>
        <tr>
            <td>E_PROCESS_NOT_EXITED</td>
            <td>0x81060000</td>
            <td>进程未结束</td>
        </tr>
        <tr>
            <td>E_THREAD_NOT_ACTIVE</td>
            <td>0x81070000</td>
            <td>线程未处于活动状态</td>
        </tr>
        <tr>
            <td>E_THREAD_STILL_ACTIVE</td>
            <td>0x81080000</td>
            <td>线程仍处于活动状态</td>
        </tr>
        <tr>
            <td>E_THREAD_UNSTARTED</td>
            <td>0x81090000</td>
            <td>线程未开始执行</td>
        </tr>
        <tr>
            <td>E_THREAD_ALREADY_FINISHED</td>
            <td>0x810A0000</td>
            <td>线程已经完成</td>
        </tr>
        <tr>
            <td>E_THREAD_NOT_STOPPED</td>
            <td>0x810B0000</td>
            <td>线程未停止</td>
        </tr>
        <tr>
            <td>E_DOES_NOT_EXIST</td>
            <td>0x810C0000</td>
            <td>某资源不存在</td>
        </tr>
        <tr>
            <td>E_ALREADY_EXIST</td>
            <td>0x810D0000</td>
            <td>某资源已经存在</td>
        </tr>
        <tr>
            <td>E_INVALID_OPTIONS</td>
            <td>0x810E0000</td>
            <td>选项无效</td>
        </tr>
        <tr>
            <td>E_INVALID_OPERATION</td>
            <td>0x810F0000</td>
            <td>进行无效操作</td>
        </tr>
        <tr>
            <td>E_TIMED_OUT</td>
            <td>0x81100000</td>
            <td>方法超时</td>
        </tr>
        <tr>
            <td>E_INTERRUPTED</td>
            <td>0x81110000</td>
            <td>方法被中断</td>
        </tr>
        <tr>
            <td>E_NOT_OWNER</td>
            <td>0x81120000</td>
            <td>线程并未占有互斥体对象</td>
        </tr>
        <tr>
            <td>E_ALREADY_LOCKED</td>
            <td>0x81130000</td>
            <td>调用线程已经以读者身份占有了读写锁对象</td>
        </tr>
        <tr>
            <td>E_INVALID_LOCK</td>
            <td>0x81140000</td>
            <td>调用线程已经以写者身份占有了读写锁对象</td>
        </tr>
        <tr>
            <td>E_NOT_READER</td>
            <td>0x81150000</td>
            <td>调用线程并未以读者身份占有读写锁对象</td>
        </tr>
        <tr>
            <td>E_NOT_WRITER</td>
            <td>0x81160000</td>
            <td>调用线程并未以写者身份占有读写锁对象</td>
        </tr>
        <tr>
            <td>E_NOT_ENOUGH_ADDRESS_SPACE</td>
            <td>0x81170000</td>
            <td>没有足够的地址空间</td>
        </tr>
        <tr>
            <td>E_BAD_FILE_FORMAT</td>
            <td>0x81180000</td>
            <td>错误的文件格式</td>
        </tr>
        <tr>
            <td>E_BAD_EXE_FORMAT</td>
            <td>0x81190000</td>
            <td>错误的exe格式</td>
        </tr>
        <tr>
            <td>E_BAD_DLL_FORMAT</td>
            <td>0x811A0000</td>
            <td>错误的dll格式</td>
        </tr>
        <tr>
            <td>E_PATH_TOO_LONG</td>
            <td>0x811B0000</td>
            <td>路径名太长</td>
        </tr>
        <tr>
            <td>E_PATH_NOT_FOUND</td>
            <td>0x811C0000</td>
            <td>路径未找到</td>
        </tr>
        <tr>
            <td>E_FILE_NOT_FOUND</td>
            <td>0x811D0000</td>
            <td>文件未找到</td>
        </tr>
        <tr>
            <td>E_NOT_SUPPORTED</td>
            <td>0x811E0000</td>
            <td>方法不支持该操作</td>
        </tr>
        <tr>
            <td>E_IO</td>
            <td>0x811F0000</td>
            <td>I/O错误</td>
        </tr>
        <tr>
            <td>E_BUFFER_TOO_SMALL</td>
            <td>0x81200000</td>
            <td>缓存太小</td>
        </tr>
        <tr>
            <td>E_THREAD_ABORTED</td>
            <td>0x81210000</td>
            <td>线程中止</td>
        </tr>
        <tr>
            <td>E_SERVICE_NAME_TOO_LONG</td>
            <td>0x81220000</td>
            <td>服务名太长</td>
        </tr>
        <tr>
            <td>E_READER_LOCKS_TOO_MANY</td>
            <td>0x81230000</td>
            <td>调用线程所获取的读锁个数已达到了MAXIMUM_OWNED_READER_LOCKS个</td>
        </tr>
        <tr>
            <td>E_ACCESS_DENIED</td>
            <td>0x81240000</td>
            <td>拒绝访问</td>
        </tr>
        <tr>
            <td>E_OUT_OF_MEMORY</td>
            <td>0x81250000</td>
            <td>内存分配不成功</td>
        </tr>
        <tr>
            <td>E_INVALID_ARGUMENT</td>
            <td>0x81260000</td>
            <td>一个或多个无效参数</td>
        </tr>
    </table>
    <ul><font color="red"><b>注意：</b>NOERROR的值的定义与C/C++中TRUE的定义相反。</font></ul>

    <p>CAR中提供以下两个宏，使用这两个宏可以通过判断ECode返回值得知方法调用是否成功：</p>
    <table>
        <thead>
            <td>宏定义</td><td>含义</td>
        </thead>
        <tr>
            <td>SUCCEEDED(ec)</td>
            <td>判断方法调用是否成功</td>
        </tr>
        <tr>
            <td>FAILED(ec)</td>
            <td>判断方法调用是否失败</td>
        </tr>
    </table>

<script>footer("chinese")</script>
</body>
</html>