<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>How Does Elastos Organize Metadata?</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>
<h2>Clsinfo&nbsp;metadata</h2>
    <p>Similarily, take the hello component as an example.After compilation by the car compiler the hello.car file generates HelloClsInfo.cpp as the following: </p>
    <pre class="code">
unsigned char g_Hello_classInfo[76] = {
    0x4c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x2a, 0x00, 0x00, 0x00, 0x4c, 0xbc, 0x19, 0x3d,
    0xc7, 0xb2, 0xa5, 0x4e, 0x84, 0x09, 0x63, 0xdb,
    0x93, 0x0a, 0xd1, 0xb7, 0x01, 0x00, 0x48, 0x00,
    0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00,
    0xe4, 0xf7, 0xf1, 0x70, 0x9b, 0x1b, 0x74, 0x4e,
    0x8c, 0x1b, 0xfd, 0xc2, 0xfe, 0xfb, 0x1c, 0xe1,
    0x46, 0x00, 0x00, 0x00, 0x02, 0x02, 0x46, 0x27,
    0x2a, 0x00, 0x00, 0x00,
};
CIClassInfo *g_pCIClassInfo_ = (CIClassInfo *)g_Hello_classInfo;
</pre>
    <p>The file structure description is in the clsinfo.h file (only excerpts the major part here): </p>
    <pre class="code">
typedef UINT8                   CIBaseType;
// +-----------------------------------------------+
// |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
// +-----------------------------------------------+
// |     ATTRIB      | PTR |         TYPE          |
// +-----------------+-----+-----------------------+
// | RET | IN  | OUT |
// +-----------------+

typedef struct __PACKED__ _CIMethodEntry {
    CIBaseType              *params;    //number of elements of the array (paramNum)
    UINT8                   paramNum;
    UINT8                   reserved1;
}   CIMethodEntry;

typedef struct __PACKED__ _CIInterfaceEntry {
    UINT16            methodNumMinus3; //does not include three standard interface method
    CIMethodEntry     *methods;
    IID               iid;
}   CIInterfaceEntry;

typedef struct __PACKED__ _CIClassEntry {
    CLSID                   clsid;//16 bytes
    UINT16                  interfaceNum;
    CIInterfaceEntry        **interfaces;
}   CIClassEntry;

typedef struct __PACKED__ _CIClassInfo {
    int                     totalSize;
    int                     classNum;
    int                     interfaceNum;
    CIClassEntry            *classDir;
    CIInterfaceEntry        *interfaceDir;
}   CIClassInfo;
</pre>
    <p>Format of the above array is strictly defined in clsinfo.h.The above array becomes readable with this description part.</p>
    <p>Related interface information can be obtained by invoking EzComDllGetClassObject in the generated _hellopub.cpp file. The definition of function EzComDllGetClassObject is as the following: </p>
    <pre class="code">
EZAPI _EzComDllGetClassObject(REFCLSID clsid, REFIID riid, void** ppv)
{
    if (clsid == CLSID_ClassInfo) {
        *ppv = (void *)g_pCIClassInfo_;//returns here
        return S_OK;
    }
    if (clsid == (REFCLSID)CLSID_CHello) {
        return _g_CHelloCF.QueryInterface(riid, ppv);
    }
    return CLASS_E_CLASSNOTAVAILABLE;
}
</pre>
    <p>This function adds the CLSID_ClassInfo selection.Client can obtain interface metadata included by this dll by invoking _EzComDllGetClassObject.</p>

<script>footer("english")</script>
</body>
</html>