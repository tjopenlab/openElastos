<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>CAR Attribute--in</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>

<h2>in</h2>
    <p>The in attribute can only be used to modify interface method parameter i.e. this parameter is an input parameter. This parameter is allocated and released using the client program (Client). The syntax is: [in]Parameter type and parameter name. For example: </p>
    <pre class="code">
[
    uuid(e51306f8-643f-43ff-a94f-f8ff8d45c100),
    uunm(http://www.koretide.com/car/InDemo.dll)
]
component InDemo
{
    [uuid(2ec74892-d81a-4913-a177-87e5c362006a)]
    interface IInterface {
        ECODE Func([<b>in</b>] int i);
    }
    [uuid(e9801300-9727-4dc5-bcdf-509e2dd84110)]
    class CClass {
        interface IInterface;
    }
}
</pre>
    <p>In sample component InDemo, a Func method was defined in interface IInterface; the parameter i of this method is an input parameter.</p>
    <p><font color="red"><b>Note: </b>When using <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzArray.htm">EzArray</a>, <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzByteBuf.htm">EzByteBuf</a>, <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzStr.htm">EzStr</a>, <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzStrBuf.htm">EzStrBuf</a>, <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzVar.htm">EzVar</a>, <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzWCharBuf.htm">EzWCharBuf</a> these types of data types as [in] parameters, what actually passed in is the parameter address,and not the parameter value.Hence in service program, you must not change the content of the parameter.</font></p>
    <h4>Special Case Of in Parameter</h4>
        <p>When certain interface method parameter attribute is [in] and the parameter type is interface pointer.In the generated source program framework of compiled CAR file the user can found that this parameter is in the form of IXXXRefArg, of which IXXX is the interface name. The following example shows how to use this kind of parameter. </p>
    <p>CAR File: </p>
    <pre class="code">
бнбн
interface IHello
{
    бнбн
}
interface IWorld
{
    ECODE <b>Func ([in] IHello *pIHello);</b>
}
class ClassName{
    interface IWorld;
}
бнбн
</pre>
    <p>Method Func was defined in interface IWorld, the attribute of parameter pIHello of this method is in, its data type is pointer to interface IHello.</p>
    <p>In the header files that generated by compiling this CAR file, the source code framework is: </p>
    <pre class="code">
бнбн
STDMTHODIMP Func(/* in */ <b>IHelloRefArg</b> pIHello);
бнбн
</pre>
    <p>In cpp file, the source code framework is: </p>
    <pre class="code">
бнбн
ECODE ClassName::Func(/* in */ <b>IHelloRefArg</b> pIHello)
{
    return E_NOTIMPL;
}
бнбн
</pre>
    <p>In the generated source file framework, the type of parameter pIHello is marked IHelloRefArg, instead of the actual data type of pIHello (<a class="style1" href="../../../../speciality/smart_pointer/interface_smartpointer.htm">Interface Smart Pointer</a> type IHelloRef).This is to ensure the correctness of smart pointer reference count. In client program, when calling the IWorld::Func method, parameter type must be IHelloRef. For example: </p>
    <pre class="code">
main()
{
    бнбн
    IHelloRef iHelloRef;
    бнбн

    ClassNameRef cclassname;
    cclassname.Instantiate();
    cclassname.Func(<b>iHelloRef</b>);
    бнбн
}
</pre>
    <ul><font color="red"><b>Note: </b>Do not use IXXXRefArg type to define variables in client programs.Otherwise we cannot guarantee the correctness of reference count.</font></ul>
    <ol><b>Remarks: </b>
        <li>Since <a class="style1" href="../../../../../sdk/reference/custom_data_type/EzVar.htm">EzVar</a> is a general data type, it can store data of any type, including interface smart pointer. So when defining CAR, if the [in] parameter is EzVar type, it is used similarily to that of interface smart pointer.Thus in generated cpp framework, parameter type displays EzVarArg. But when defining variable in the program, you must use EzVar type.
        <li>Since InterfaceRef data type can represent and interface smart pointer, when the [in] parameter is InterfaceRef type, it is used as interface smart pointer.Thus in generated cpp frameworks parameter type displays InterfaceRefArg. However, when defining variables in program, you must use InterfaceRef type.
    </p>
    <b><a class="style1" href="../attribute.htm">CAR Attribute Table</a></b>
<script>footer("english")</script>
</body>
</html>
