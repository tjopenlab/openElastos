<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/apimanual.xsl"?>

<manpage>
    <sample url="system_lib\EzCreateMutex">EzCreateMutex</sample>
    <volume>System API</volume>
    <title>CMutex::New</title>
    <routine_idx> ..\system_api_idx.htm </routine_idx>

    <description>
        <para>
        	Creates readerwriter lock object.
        </para>
    </description>

    <syntax>
        <return_val>ECODE</return_val>
        <parameters>
            <api_param>
                <param_type> IMutex ** </param_type>
                <param_name> ppMutex </param_name>
                <param_note>
                    <para>
                    	[out]Pointer to  interface pointer to the mutex lock object,it will acquire the  interface pointer to  the created mutex lock object if the function succeeds.
					</para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

    <return>    	
    	<table>
            <th>
                <td>Return Value</td><td>Description</td>
            </th>
			<tr>
                <td>NOERROR</td>
                <td>Function succeeds in creating mutex lock object.</td>
            </tr>
            <tr>
                <td>E_INVALID_ARGUMENT</td>
                <td>Invalid argument(s)</td>
            </tr>
            <tr>
                <td>E_OUT_OF_MEMORY</td>
                <td>Insufficient memory</td>
            </tr>
        </table>
        <para>References <link url="/sdk/hresult.htm"> ECODE </link> Correlative help.</para>
    </return>

    <remarks>
        <para>
        	Mutex objects can be reused.
        </para>
        <para>
        	<b>Lock</b> and <b>Unlock</b> of <b>Mutex</b> must be used in pair. That means, if there are two 
        	consecutive calls to <b>Lock</b>, <b>Unlock</b> should also be called twice to release the <b>Lock</b>.
        </para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Windows 2000 or later; Elastos 2.0 or later
            </system_name>
        </system>
        <headerfile>
            <file_name> elastos.h </file_name>
        </headerfile>
        <library>
            <lib_name> elastos.lib </lib_name>
        </library>
    </requirements>

</manpage>
