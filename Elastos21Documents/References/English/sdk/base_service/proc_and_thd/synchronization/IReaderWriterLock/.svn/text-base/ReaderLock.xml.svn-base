<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

    <?xml version = "1.0" encoding="GB2312" ?>
    <?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/methodmanual.xsl"?><manpage>
<volume>System COM Interface </volume>
<interface>IReaderWriterLock</interface><method> ReaderLock </method>
    <description>
        <para>
         	Acquires the reader lock.
        </para>
    </description>
    <syntax>
        <return_val> ECODE </return_val>
    <parameters>
            <api_param>
                <param_inout>[out]</param_inout>
                <param_type> WaitResult *</param_type>
                <param_name> pResult </param_name>
                <param_note>
                    <para>
					          </para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

	<return>
	
	<table>
	    <th>
		<td>Return Value </td>
		<td>Hex Value</td>
		<td>Description</td>
	    </th>
	    <tr>
		<td>NOERROR </td>
		<td>Function Succeeds in acquiring the reader lock.</td>
	    </tr>
	    <tr>
		<td>E_INVALID_ARGUMENT</td>
		<td>Invalid argument(s)</td>
	    </tr>
	    <tr>
		<td>E_READER_LOCKS_TOO_MANY </td>
    <td>The number of the reader locks is up to MAXIMUM_OWNED_READER_LOCKS</td>
	    </tr>
	 <tr>
		<td>E_ALREADY_LOCKED </td>
    <td> Fail to call the function.The calling thread  already  acquired the ReaderWriterLock object 
		as a reader.</td>
	    </tr>
	     <tr>
		<td>E_INVALID_LOCK </td>
    <td>Fail to call the function.The calling thread  already  acquired tthe ReaderWriterLock object  as a writer</td>
	    </tr>
	</table>
     <para>See <link url="..\..\..\..\reference\basic_data_type\hresult.htm">ECODE</link> for related help.</para>  
    </return>

	<remarks>
		<para>
			This function is used to acquire the ReaderWriterLock object as a reader. If the calling thread cannot 
			acquire a reader lock (for example: The ReaderWriterLock object is locked by a writer), it will enter 
			the waiting status, until the reader lock of the ReaderWriterLock object is acquired, and the function 
			returns successfully. If any other threads do not acquire the ReaderWriterLock object, the calling 
			thread will acquire it as a reader successfully, and the function returns immediately. If the calling 
			thread has already acquired the ReaderWriterLock object as a reader or writer, the function will fail. 
			The waiting of the calling thread can be interrupted.
		</para>
	</remarks>

    <requirements>
        <system>
            <system_name>
				Windows 2000 or later; Elastos 2.0 or later.
	    </system_name>
        </system>
    </requirements>
</manpage>