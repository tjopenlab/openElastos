<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/apimanual.xsl"?>

<manpage>
    <sample url="system_lib\EzExitProcess"> EzExitProcess </sample>
    <volume>System API</volume>
    <title>CProcess::Exit</title>
    <routine_idx> ..\process_idx.htm </routine_idx>

    <description>
        <para>
        	Exits current process.
        </para>
    </description>

    <syntax>
        <return_val>void</return_val>
        <parameters>
            <api_param>
                <param_type>ExitCode</param_type>
                <param_name>exitCode </param_name>
                <param_note>
                    <para>
                    	[in] Specifies the exit code for the process as well as threads, that are terminated as a 
                    	result of this call by using<link url="sdk\base_service\proc_and_thd\proc_thd\IProcess\GetExitCode.htm">IProcess::GetExitCode</link>
                    </para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

    <return>
    	<para>None</para>
    </return>

    <remarks>
        <para>
        	This function causes all the threads of the current process to exit.
        </para>        
        <para>
        	When this process exits, it will invoke entry point method of DLL module, and release memory resources 
        	occupied by this process. File handle(s) opened by process and interface reference will be closed 
        	automatically. The process state becomes terminated, all threads in the system waiting for the termination 
        	of this process will return.
        </para>
        <para>
        	All component services owned by the process will also be stopped.
        </para>
        <para>
        	Termination of a process will not cause the termination of corresponding child process.
        </para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Windows 2000 or later; Elastos 2.0 or later
            </system_name>
        </system>
        <headerfile>
            <file_name> elastos.h </file_name>
        </headerfile>
        <library>
            <lib_name> elastos.lib </lib_name>
        </library>
    </requirements>
    <references>
    <reference>
        <ref_name> CThread::Quit</ref_name>
        <ref_url>EzExitThread</ref_url>
    </reference>
    </references>
</manpage>
