<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/structuremanual.xsl"?>

<manpage>
    <sample url="sdk\eztypes\EzVar\EzVar">EzVar</sample>
    <volume> Common Data Structure </volume>
    <class> EzVar </class>
    <function> EzVar </function>

    <description>
        <para> Constructor of EzVar, which is used to construct an EzVar object.</para>
    </description>

    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type> INT (or INT *) </param_type>
            <param_name> value1 </param_name>
            <param_note>
                <para> Integer data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type> UINT (or UINT *) </param_type>
            <param_name> value2 </param_name>
            <param_note>
                <para> Unsigned integer data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type> SHORT (or SHORT *) </param_type>
            <param_name> value3 </param_name>
            <param_note>
                <para> Short integer data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type> USHORT (or USHORT *) </param_type>
            <param_name> value4 </param_name>
            <param_note>
                <para> Unsigned short integer data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>LONG (or LONG *) </param_type>
            <param_name> value5 </param_name>
            <param_note>
                <para> Long data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type> ULONG (or ULONG *) </param_type>
            <param_name> value6 </param_name>
            <param_note>
                <para> Unsigned long data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>FLOAT (or FLOAT *) </param_type>
            <param_name> value7 </param_name>
            <param_note>
                <para> Float data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>DOUBLE (or DOUBLE *) </param_type>
            <param_name> value8 </param_name>
            <param_note>
                <para> Double data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>BYTE (or BYTE *) </param_type>
            <param_name> value9 </param_name>
            <param_note>
                <para> Byte data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>CHAR (or CHAR *) </param_type>
            <param_name> value10 </param_name>
            <param_note>
                <para> Char data or pointer that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>EzStr&amp;</param_type>
            <param_name> value11 </param_name>
            <param_note>
                <para> The pointer <link url="../../Ezstr.htm">EzStr</link> that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <syntax>
        <apiname>EzVar</apiname>
        <parameters>
        <api_param>
            <param_type>InterfaceRef&amp;</param_type>
            <param_name> value12 </param_name>
            <param_note>
                <para> The InterfaceRef data that should be stored </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>
    <remarks>
        <para>1. You can declare an EzVar variable directly: </para>
        <para><![CDATA[EzVar myEzVar£»]]></para>
        <para>This kind of declaration method constructs an unicode pointer inside the EzVar type.</para>
        <para>2. And you can construct another EzVar variable using an existing EzVar variable: </para>
        <para><![CDATA[EzVar ezVar1,ezVar2£»]]></para>
        <para><![CDATA[ezVar1 = ...]]></para>
        <para><![CDATA[ezVar2 = ezVar1£»]]></para>
    </remarks>

    <example>
    </example>

</manpage>