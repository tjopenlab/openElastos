<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/methodmanual.xsl"?>

<manpage>
    <sample url="datatypes\EzByteBuf\FreeBuf">freebuf</sample>
    <volume> COMMON DATA STRUCTURE </volume>
    <interface> EzByteBuf </interface>
    <method> FreeByteBuf </method>

    <description>
        <para> Releases the memory occupied by a byte buffer. </para>
    </description>

    <syntax>
        <return_val> static void </return_val>
        <parameters>
        <api_param>
            <param_type> EzByteBuf&amp; </param_type>
            <param_name> buf </param_name>
            <param_note>
                <para> An existing EzByteBuf object.  </para>
            </param_note>
        </api_param>
        </parameters>
    </syntax>

    <return>
        <NoReturnValue/>
    </return>

<example><pre><![CDATA[
#include <stdio.h>
#include <ezbuf.h>

int __cdecl main()
{
    EzByteBuf mybuf = EzByteBuf::AllocByteBuf(20);

    mybuf.Copy("hello!", 7);
    printf("%s\n", (char*)mybuf);
    EzByteBuf::FreeByteBuf(mybuf);

    return 0;
}
]]></pre></example>

<result><![CDATA[
hello!
]]></result>

    <references>
    <reference>
        <ref_name> AllocByteBuf </ref_name>
        <ref_url> AllocByteBuf </ref_url>
    </reference>
    <reference>
        <ref_name> AllocByteBufLen </ref_name>
        <ref_url> AllocByteBufLen </ref_url>
    </reference>
    </references>

</manpage>