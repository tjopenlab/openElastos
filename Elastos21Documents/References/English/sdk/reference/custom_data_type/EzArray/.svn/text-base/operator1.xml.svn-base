<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/methodmanual.xsl"?>

<manpage>
    <sample url="datatypes\EzArray\operator1">operator1</sample>
    <volume> Common data structure </volume>
    <interface> EzArray </interface>
    <method>operator=(EzArray&lt;T&gt;&amp;)</method>

    <description>
        <para>Assignment operator of EzArray object gets a fleet copy of EzArray object£¬namely only copying pointers to this array.</para>
    </description>
    <syntax>
        <return_val> EzArray&lt;T&gt;&amp;</return_val>
        <parameters>
        <api_param>

            <param_type>EzArray&lt;T&gt;&amp;</param_type>
            <param_name> src </param_name>
            <param_note>
                <para> Reference of EzArray objects. </para>
            </param_note>

        </api_param>

        </parameters>
    </syntax>

    <return>
        <para>    Returns the reference of EzArray objects.</para>
    </return>

    <remarks>
        <para>EzArray is a template class; template parameter T determines the type of array element. </para>
        <para>The former EzArray and the EzArray copied, point to the same memory block.Hence if <b><link url="Dispose.htm">Dispose</link></b> function is called to release memory of some one, then the other cannot call <b>Dispose</b> to release. </para>
    </remarks>

    <example><pre><![CDATA[
#include <EzArray.h>
#include <stdio.h>

int __cdecl main()
{
    EzArray<int> a = EzArray<int>::CreateObject(50);
    EzArray<int> b;
    a[12] = 321;
    b = a;
    printf("b[12] = %d\n", b[12]);
    a.Dispose();

    return 0;
}
]]></pre></example>

    <result>
    <![CDATA[
b[12] = 321
]]>
    </result>

    <references>
        <reference>
            <ref_name> Assignment operator(deep copy) </ref_name>
            <ref_url> operator2 </ref_url>
        </reference>
    </references>

</manpage>