<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdlib\_ecvt">_ecvt</sample>
    <title> _ecvt</title>
    <volume>C Run-time Library</volume>
    <routine_idx> stdlib_idx.htm </routine_idx>

    <description>
        <para>Converts a double number to a string.</para>
    </description>

    <syntax>
        <return_val>char *</return_val>
        <func_name>_ecvt</func_name>
        <parameters>
            <func_param>
                <param_type>double</param_type>
                <param_name>value</param_name>
                <param_note>
                    <para>Number to be converted.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>Number of digits stored.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int*</param_type>
                <param_name>dec</param_name>
                <param_note>
                    <para>Stored decimal-point position.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int*</param_type>
                <param_name>sign</param_name>
                <param_note>
                    <para>Sign of converted number.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>_ecvt returns a pointer to the string of digits. There is no error return.</para>
    </return>

    <remarks>
	    <para>The _ecvt function converts a floating-point number to a character string. The value parameter is the floating-point number to be converted. This function stores up to count digits of value as a string and appends a null character ('\0'). If the number of digits in value exceeds count, the low-order digit is rounded. If there are fewer than count digits, the string is padded with zeros.</para>
	    <para>Only digits are stored in the string. The position of the decimal point and the sign of value can be obtained from dec and sign after the call. The dec parameter points to an integer value giving the position of the decimal point with respect to the beginning of the string. A 0 or negative integer value indicates that the decimal point lies to the left of the first digit. The sign parameter points to an integer that indicates the sign of the converted number. If the integer value is 0, the number is positive. Otherwise, the number is negative.</para>
	    <para>_ecvt and _fcvt use a single statically allocated buffer for the conversion. Each call to one of these routines destroys the result of the previous call.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_ecvt</routine_name>
            <headerfile>stdlib.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0.</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* _ecvt.cpp: This program uses _ecvt to convert a
 * floating-point number to a character string.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    int      decimal,    sign;
    char     *buffer;
    int      precision = 10;
    double  source = 3.1415926535;

    buffer = _ecvt(source, precision, &amp;decimal, &amp;sign);
    printf(&quot;source: %2.10f    buffer: &apos;%s&apos;  decimal: %d  sign: %d\n&quot;,
              source, buffer, decimal, sign);

    return 0;
}
</pre>
    </example>
<result>
source: 3.1415926535    buffer: &apos;3141592654&apos;  decimal: 1    sign: 0
</result>



    <references>
        <reference>
            <ref_name>_fcvt</ref_name>
            <ref_url>_fcvt</ref_url>
        </reference>
    </references>

</manpage>