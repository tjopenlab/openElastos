<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdlib\_fcvt">_fcvt</sample>
    <title> _fcvt</title>
    <volume>C Runtime Library Function</volume>
    <routine_idx> slib_idx.htm </routine_idx>

    <description>
        <para>Converts a floating-point number to a string.</para>
    </description>

    <syntax>
        <return_val>char *</return_val>
        <func_name>_fcvt</func_name>
        <parameters>
            <func_param>
                <param_type>double</param_type>
                <param_name>value</param_name>
                <param_note>
                    <para>Floating-point number to be converted.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>Number of digits after decimal point.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int*</param_type>
                <param_name>dec</param_name>
                <param_note>
                    <para>Pointer to stored decimal-point position.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int*</param_type>
                <param_name>sign</param_name>
                <param_note>
                    <para>Pointer to stored sign indicator.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>_fcvt returns a pointer to the string of digits. There is no error return.</para>
    </return>

    <remarks>
	    <para>The _fcvt function converts a floating-point number to a null-terminated character string. The value parameter is the floating-point number to be converted. _fcvt stores the digits of value as a string and appends a null character ('\0'). The count parameter specifies the number of digits to be stored after the decimal point. Excess digits are rounded off to count places. If there are fewer than count digits of precision, then the string is padded with zeros.</para>
	    <para>After function call, only digits are stored in the string. The position of the decimal point and the sign of value can be obtained from dec and sign after the call. The dec parameter points to an integer value; this integer value gives the position of the decimal point with respect to the beginning of the string. A zero or negative integer value indicates that the decimal point lies to the left of the first digit. The parameter sign points to an integer indicating the sign of value. The integer is set to 0 if value is positive and is set to a nonzero number if value is negative.</para>
	    <para>_ecvt and _fcvt use a single statically allocated buffer for the conversion. Each call to one of these routines destroys the results of the previous call.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_fcvt</routine_name>
            <headerfile>stdlib.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* _fcvt.cpp: This program converts the constant
 * 3.1415926535 whose type is double to a string .
*/

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    int  decimal, sign;
    char *buffer;
    double source = 3.1415926535;

    buffer = _fcvt(source, 7, &amp;decimal, &amp;sign);
    printf(&quot;source: %2.10f    buffer: &apos;%s&apos;    decimal: %d    sign: %d\n&quot;,
                source, buffer, decimal, sign);

    return 0;
}
</pre>
    </example>
<result>
source: 3.1415926535    buffer: &apos;31415927&apos;    decimal: 1    sign: 0
</result>



    <references>
        <reference>
            <ref_name>_ecvt</ref_name>
            <ref_url>_ecvt</ref_url>
        </reference>
    </references>

</manpage>