<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdlib\strtod">strtod</sample>
    <title>strtod, wcstod</title>
    <volume>C Run-Time Library</volume>
    <routine_idx> slib_idx.htm </routine_idx>

    <description>
        <para>Converts strings to a double-precision value.</para>
    </description>

    <syntax>
        <return_val>double</return_val>
        <func_name>strtod</func_name>
        <parameters>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>nptr</param_name>
                <param_note>
                    <para>Null-terminated string to convert.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>char**</param_type>
                <param_name>endptr</param_name>
                <param_note>
                    <para>Pointer to character that stops scan.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>double</return_val>
        <func_name>wcstod</func_name>
        <parameters>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>nptr</param_name>
            </func_param>
            <func_param>
                <param_type>wchar_t**</param_type>
                <param_name>endptr</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>strtod returns the value of the floating-point number, except when the representation would cause an overflow, in which case the function returns +/¨CHUGE_VAL. The sign of HUGE_VAL matches the sign of the value that cannot be represented. strtod returns 0 if no conversion can be performed or an underflow occurs.</para>
        <para>wcstod returns values analogously to strtod.</para>
    </return>

    <remarks>
        <para>The strtod function converts nptr to a double-precision value. strtod stops reading the string nptr at the first character it cannot recognize as part of a number. This may be the terminating null character. wcstod is a wide-character version of strtod; its nptr argument is a wide-character string. Otherwise these functions behave identically.</para>
        <para>strtod expects nptr to point to a string of the following form:</para>
        <para>[whitespace][sign][digits][.digits][{d|D|e|E}[sign]digits]</para>
        <para>A whitespace may consist of space and tab characters, which are ignored; sign is either plus (+) or minus (¨C); and digits are one or more decimal digits. If no digits appear before the radix character, at least one must appear after the radix character. The decimal digits can be followed by an exponent, which consists of an introductory letter (d, D, e, or E) and an optionally signed integer. If neither an exponent part nor a radix character appears, a radix character is assumed to follow the last digit in the string. The first character that does not fit this form stops the scan.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>strtod</routine_name>
            <headerfile>stdlib.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>wcstod</routine_name>
            <headerfile>stdlib.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* strtod.cpp: This program uses strtod to convert a
 * string to a double-precision value.
 */

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    char    *string, *stopstring;
    double x;

    string = &quot;3.1415926This stopped it&quot;;
    x = strtod(string, &amp;stopstring);
    printf(&quot;string = %s\n&quot;, string);
    printf(&quot;    strtod = %f\n&quot;, x);
    printf(&quot;    Stopped scan at: %s\n\n&quot;, stopstring);

    return 0;
}
</pre>
    </example>
<result>
string = 3.1415926This stopped it
strtod = 3.141593
Stopped scan at: This stopped it
</result>



    <references>
        <reference>
            <ref_name>wcstol</ref_name>
            <ref_url>wcstol</ref_url>
        </reference>
        <reference>
            <ref_name>atof</ref_name>
            <ref_url>atof</ref_url>
        </reference>
    </references>

</manpage>