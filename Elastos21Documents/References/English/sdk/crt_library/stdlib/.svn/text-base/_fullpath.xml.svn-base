<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdlib\_fullpath">_fullpath</sample>
    <title> _fullpath, _wfullpath</title>
    <volume>C Run-Time Library</volume>
    <routine_idx>slib_idx.htm</routine_idx>

    <description>
        <para>Creates the absolute path name for the specified relative path name.</para>
    </description>

    <syntax>
        <return_val>char *</return_val>
        <func_name>_fullpath</func_name>
        <parameters>
            <func_param>
                <param_type>char*</param_type>
                <param_name>absPath</param_name>
                <param_note>
                    <para>Pointer to a buffer containing the absolute path.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>relPath</param_name>
                <param_note>
                    <para>Pointer to a character string storing the relative path.</para> 
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>maxLength.</param_name>
                <param_note>
                    <para>Size of the buffer.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>wchar_t *</return_val>
        <func_name>_wfullpath</func_name>
        <parameters>
            <func_param>
                <param_type>wchar_t*</param_type>
                <param_name>absPath</param_name>
            </func_param>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>relPath</param_name>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>maxLength</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>If there is no error, each of these functions returns a pointer to a buffer containing the absolute path name, otherwise(for example, if the value passed in relPath 
              includes a drive letter that is not valid or can not be found; or if the length of the absolute path name is greater than maxLength)the function returns NULL.</para>    
    </return>

    <remarks>
        <para>The _fullpath function expands the relative path in 'relPath' to the absolute path and stores this name in 'absPath'. Relative path name describes another path name corresponding to the current location(such as the current working directory: "."). An absolute path name is the expansion of relative path name and its beginning is the root of the file system.
              _fullpath can be used to obtain the absolute path name for relative paths that include "./" or "../" in their names.</para>
        <para>_wfullpath is a wide-character version of _fullpath. The character strings declared in _wfullpath are wide-character strings.</para>
        <para>If the absPath buffer is NULL, _fullpath calls <link url=".\malloc.htm">malloc</link> function to allocate a buffer of size _MAX_PATH and ignores the maxLength argument, then returns the pointer to the buffer. It's the caller's responsibility to free the memory of the buffer as appropriate(call <link url=".\free.htm">free</link> function). if the relative 
              path specifies a disk drive, then the current directory of this drive is combined with the path.</para>   
    </remarks>

    <requirements>
        <routine>
            <routine_name>_fullpath</routine_name>
            <headerfile>stdlib.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0 </compatibility>
        </routine>
        <routine>
            <routine_name>_wfullpath</routine_name>
            <headerfile>stdlib.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0 </compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* fullpath.cpp: This program demonstrates how _fullpath
 * creates a full path from a partial path.
 */

#include &lt;stdio.h&gt;
#include &lt;conio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;direct.h&gt;

char full[_MAX_PATH], part[_MAX_PATH];

int main()
{
    while (1) {
        printf(&quot;Enter partial path or ENTER to quit: &quot;);
        gets(part);
        if (part[0] == 0)
            break;

        if (_fullpath(full, part, _MAX_PATH) != NULL)
            printf(&quot;Full path is: %s\n&quot;, full);
        else
            printf(&quot;Invalid path\n&quot;);
    }

    return 0;
}
</pre>
    </example>
<result>
Enter partial path or ENTER to quit: Elastos
Full path is:D:\Elastos21\XDK\Targets\pdk\win32\x86.msvc.pc.dbg\Elastos
</result>



    <references>
        <reference>
            <ref_name>_getcwd</ref_name>
            <ref_url>../direct/_getcwd</ref_url>
        </reference>
    </references>

</manpage>