<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stat\_stat">_wstat</sample>
    <title>_stat, _wstat </title>
    <volume>C Run-Time Library</volume>
    <routine_idx> stat_idx.htm </routine_idx>

    <description>
        <para>Gets status information on a file.</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>_stat</func_name>
        <parameters>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>path</param_name>
                <param_note>
                    <para>Pointer to path of existing file.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>struct stat*</param_type>
                <param_name>buffer</param_name>
                <param_note>
                    <para>Pointer to structure that stores results.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>int</return_val>
        <func_name>_wstat</func_name>
        <parameters>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>path</param_name>
            </func_param>
            <func_param>
                <param_type>struct stat*</param_type>
                <param_name>buffer</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>Each of these functions returns 0 if the file-status information is obtained. A return value of -1 indicates an error, in which case error is set to ENOENT, indicating that the filename or path could not be found.</para>
    </return>

    <remarks>
        <para>The _stat function obtains information about the file or directory specified by path and stores it in the structure pointed to by buffer. _stat automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multi-byte code page currently in use. </para>
        <para>_wstat is a wide-character version of _stat; the path argument to _wstat is a wide-chacter string. _wstat and _stat behave identically except that _wstat does not handle multibyte-character strings.</para>
        <para>The _stat structure, defined in stat.h, includes the following fields:</para>
        <table>
            <th>
                <td>Fileds of stat</td>
                <td>Description </td>
            </th>
            <tr>
                <td> st_gid </td>
                <td>Numeric identifier of group that owns file (UNIX-specific).This field is always zero on NT systems. A redirected file is classified as an NT file. It is invalid currently.</td>
            </tr>
            <tr>
                <td> st_atime</td>
                <td>Time of last access of file.</td>
            </tr>
            <tr>
                <td> st_ctime </td>
                <td>Time of creation of file.</td>
            </tr>
            <tr>
                <td> st_mtime</td>
                <td>Time of last modification of file.</td>
            </tr>
            <tr>
                <td> st_dev </td>
                <td>Drive number of the disk containing the file (same as st_rdev). It is invalid currently.</td>
            </tr>
            <tr>
                <td> st_ino </td>
                <td>Number of the information node (the inode) for the file (UNIX - specific). The inode describes the file date and time stamps, permission, and content. When files are hard-linked to one another, they share the same inode. The inode and st_ino has no meaning in the FAT, HPFS, or NTFS file systems. It is invalid currently.</td>
            </tr>
            <tr>
                <td> st_mode </td>
                <td>Bit mask for file-mode information. The _S_IFDIR bit is set if path specifies a directory; the _S_IFREG bit is set if path specifies an ordinary file or a device. User read/write bits are set according to the file's permission mode; user execute bits are set according to the filename extension.</td>
            </tr>
            <tr>
                <td> st_nlink</td>
                <td>Always 1 on non-NTFS file systems. It is invalid currently.</td>
            </tr>
            <tr>
                <td> st_size </td>
                <td>Size of the file in bytes.</td>
            </tr>
            <tr>
                <td> st_rdev </td>
                <td>Drive number of the disk containing the file (same as st_rdev). It is invalid currently.</td>
            </tr>
            <tr>
                <td> st_uid </td>
                <td>Numeric identifier of user who owns file (UNIX - specific). This field will always be zero on NT systems. A redirected file is classified as an NT file. It is invalid currently.</td>
            </tr>
        </table>

        <para>If path refers to a device, the size, time, _dev, and _rdev fields in the _stat structure are meaningless. </para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_stat</routine_name>
            <headerfile>stat.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elatos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>_wstat</routine_name>
            <headerfile>stat.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elatos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* _stat.cpp: This program uses the _stat function to
 * report information about the file named _stat.cpp.
 */

#include &lt;time.h&gt;
#include &lt;stat.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    struct stat buf;
    int result;

    /* Get data associated with &quot;stat.c&quot;: */
    result = _stat(&quot;_stat.exe&quot;, &amp;buf);

    /* Check if statistics are valid: */
    if (result != 0)
        perror(&quot;Problem getting information&quot;);
    else {
        
        printf(&quot;File size      : %ld\n&quot;, buf.st_size);
        printf(&quot;Drive            : %c:\n&quot;, buf.st_dev + &apos;A&apos;);
        printf(&quot;Time modified : %s\n&quot;, ctime(&amp;buf.st_atime));
    }

    return 0;
}
</pre>
    </example>
<result>
some of the statistics:
File size      : 41088
Drive            :  :
Time modified : Tue Nov 06 00:00:00 2007
</result>



    <references>
        <reference>
            <ref_name>_access</ref_name>
            <ref_url>../io/_waccess</ref_url>
        </reference>
        <reference>
            <ref_name>_fstat</ref_name>
            <ref_url>_fstat</ref_url>
        </reference>
    </references>

</manpage>