<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdio\fgets">fgets</sample>
    <title>fgets, fgetws</title>
    <volume>C Run-Time Library Functions</volume>
    <routine_idx> stio_idx.htm </routine_idx>

    <description>
        <para>Get a line of characters from a stream.</para>
	<para>The fgets() function reads at most one less than the number of characters specified by n from the given stream and stores them in the string string. Reading stops when a newline character is found, at end-of-file or error. The newline, if any, is retained. If any characters are read and there is no error, a '\0' character is appended to end the string.</para>
	<para>The fgetws() function reads at most one less than the number of characters specified by n from the given stream and stores them in the wide character string string. Reading stops when a newline character is found, at end-of-file or error. The newline, if any, is retained. If any characters are read and there is no error, a '\0' character is appended to end the string.</para>
    </description>

    <syntax>
        <return_val>char *</return_val>
        <func_name>fgets</func_name>
        <parameters>
            <func_param>
                <param_type>char*</param_type>
                <param_name>string</param_name>
                <param_note>
                    <para>Storage location for data</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>n</param_name>
                <param_note>
                    <para>Maximum number of characters to read</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
                <param_note>
                    <para>Pointer to FILE structure</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>wchar_t *</return_val>
        <func_name>fgetws</func_name>
        <parameters>
            <func_param>
                <param_type>wchar_t*</param_type>
                <param_name>string</param_name>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>n</param_name>
            </func_param>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>Each of these functions returns string. NULL is returned to indicate an error or an end-of-file condition. Use feof or ferror to determine whether an error occurred.</para>
    </return>

    <remarks>
        <para>The fgets function reads a string from the input stream argument and stores it in string. fgets reads characters from the current stream position to and including the first newline character, to the end of the stream, or until the number of characters read is equal to n - 1, whichever comes first. The result stored in string is appended with a null character. The newline character, if read, is included in the string.</para>
        <para>fgets is similar to the gets function; however, gets replaces the newline character with NULL. fgetws is a wide-character version of fgets.</para>
	<para>fgetws reads the wide-character argument string as a multibyte-character string or a wide-character string according to whether stream is opened in text mode or binary mode, respectively.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>fgets</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>fgetws</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* fgets.cpp: This program uses fgets to display
 * a line from a file on the screen.
 */

#include &lt;stdio.h&gt;

int main()
{
    FILE *stream;
    char line[100];

    if ((stream = fopen(&quot;fgets.exe&quot;, &quot;r&quot;)) != NULL) {
        if (fgets(line, 100, stream) == NULL)
            printf(&quot;fgets error\n&quot;);
        else
            printf(&quot;%s\n&quot;, line);
        fclose(stream);
    }
    else
        printf(&quot;problem open the file!\n&quot;);

    return 0;
}
</pre>
    </example>
<result>
MZ?
</result>



    <references>
        <reference>
            <ref_name>fputws</ref_name>
            <ref_url>fputws</ref_url>
        </reference>
        <reference>
            <ref_name>_getws</ref_name>
            <ref_url>_getws</ref_url>
        </reference>
        <reference>
            <ref_name>_putws</ref_name>
            <ref_url>_putws</ref_url>
        </reference>
    </references>

</manpage>