<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdio\ungetc">ungetc</sample>
    <title>ungetc, ungetwc</title>
    <volume>C Run-Time Library Functions</volume>
    <routine_idx>stio_idx.htm </routine_idx>

    <description>
        <para>Pushes a character back onto the input stream.</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>ungetc</func_name>
        <parameters>
            <func_param>
                <param_type>int</param_type>
                <param_name>c</param_name>
                <param_note>
                    <para>Character to be pushed.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
                <param_note>
                    <para>Pointer to FILE structure.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>wint_t</return_val>
        <func_name>ungetwc</func_name>
        <parameters>
            <func_param>
                <param_type>wint_t</param_type>
                <param_name>c</param_name>
            </func_param>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>If successful, each of these functions returns the character argument c. If c cannot be pushed back or if no character has been read, the input stream is unchanged and ungetc returns EOF; ungetwc returns WEOF.</para>
    </return>

    <remarks>
        <para>The ungetc function pushes the character c back onto stream and clears the end-of-file indicator. The stream must be open for reading. A subsequent read operation on stream starts with c. An attempt to push EOF onto the stream using ungetc is ignored.</para>
        <para>Characters placed on the stream by ungetc may be erased if fflush, fseek, or rewind is called before the character is read from the stream. The file-position indicator will have the value it had before the characters were pushed back. The external storage corresponding to the stream is unchanged. On a successful ungetc call against a text stream, the file-position indicator is unspecified until all the pushed-back characters are read or discarded. On each successful ungetc call against a binary stream, the file-position indicator is decremented; if its value was 0 before a call, the value is undefined after the call. After a call to fscanf, a call to ungetc may fail unless another read operation (such as getc) has been performed. This is because fscanf itself calls ungetc.</para>
        <para>ungetwc is a wide-character version of ungetc. However, on each successful ungetwc call against a text or binary stream, the value of the file-position indicator is unspecified until all pushed-back characters are read or discarded.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>ungetc</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>ungetwc</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* ungetc.cpp: This program first converts a character
 * representation of an unsigned integer to an integer. If
 * the program encounters a character that is not a digit,
 * the program uses ungetc to replace it in the  stream.
 */

#include &lt;stdio.h&gt;
#include &lt;ctype.h&gt;

int main()
{
    int ch;
    int result = 0;

    printf(&quot;Enter an integer: &quot;);

    /* Read in and convert number: */
    while (((ch = getchar()) != EOF) &amp;&amp; isdigit(ch))
        result = result * 10 + ch - &apos;0&apos;;     /* Use digit. */
    if (ch != EOF)
        ungetc(ch, stdin);                     /* Put nondigit back. */
    printf(&quot;Number = %d\nNextcharacter in stream = &apos;%c&apos;&quot;,
            result, getchar());
    return 0;
}
</pre>
    </example>
<result>
Enter an integer: 521a
Number = 521
Nextcharacter in stream = &apos;a&apos;
</result>



    <references>
        <reference>
            <ref_name>getwchar</ref_name>
            <ref_url>getwchar</ref_url>
        </reference>
    </references>

</manpage>