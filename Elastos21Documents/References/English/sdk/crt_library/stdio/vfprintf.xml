<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdio\vfprintf">vfprintf</sample>
    <title> vfprintf, vfwprintf</title>
    <volume>C Run-Time Library Functions </volume>
    <routine_idx> stio_idx.htm </routine_idx>

    <description>
        <para>Writes formatted output to the given output stream using a pointer to a list of arguments.</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>vfprintf</func_name>
        <parameters>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
                <param_note>
                    <para>Pointer to FILE structure.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>format</param_name>
                <param_note>
                    <para>Format specification.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>va_list</param_type>
                <param_name>argptr</param_name>
                <param_note>
                    <para>Pointer to list of arguments.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>int</return_val>
        <func_name>vfwprintf</func_name>
        <parameters>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
            </func_param>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>format</param_name>
            </func_param>
            <func_param>
                <param_type>va_list</param_type>
                <param_name>argptr</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>vfprintf and vfwprintf return the number of characters written, not including the terminating null character or a negative value if an output error occurs.</para>
    </return>

    <remarks>
        <para>Each of these functions takes a pointer to an argument list, then formats and writes the given data to stream.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>vfprintf</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>vfwprintf</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* vfprintf.cpp:this program uses vfprintf to write lines and then read it to
                display to the screen*/

#include &lt;stdio.h&gt;

int __cdecl test(FILE *out, ...);

int main()
{
    FILE *out = NULL;
    char buffer[100];
    int retCun = 0;

    out = fopen(&quot;vfprintf.out&quot;, &quot;w&quot;);
    if (out == NULL) {
        printf(&quot;cannot open:vfprintf.out\n&quot;);
        return 1;
    }
    retCun = test(out, &quot;This is Elastos!&quot;);
    fclose(out);
    out = fopen(&quot;vfprintf.out&quot;, &quot;r&quot;);
    if (out == NULL) {
        printf(&quot;cannot open:vfprintf.out\n&quot;);
        return 1;
    }
    fread(buffer, retCun, sizeof(char), out);
    buffer[retCun] = &apos;\0&apos;;
    printf(&quot;%s&quot;, buffer);
    fclose(out);
    return 0;
}

int __cdecl test(FILE *out, ...)
{
    int result = 0;
    va_list parglist;
    va_start(parglist, out);
    result = vfprintf(out, &quot;Hello,world! %s\n&quot;, parglist);
    va_end(parglist);
    printf(&quot;The return value is %d\n&quot;, result);
    return result;
}
</pre>
    </example>
<result>
The return value is 30
Hello, world! This is Elastos!
</result>



</manpage>