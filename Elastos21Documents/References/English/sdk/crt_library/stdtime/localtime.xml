<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdtime\localtime">localtime</sample>
    <title> localtime </title>
    <volume>C Run-Time Library Functions</volume>
    <routine_idx> time_idx.htm </routine_idx>

    <description>
        <para>Converts a UTC value and corrects for the local time zone.</para>
    </description>

    <syntax>
        <return_val>struct tm*</return_val>
        <func_name>localtime</func_name>
        <parameters>
            <func_param>
                <param_type>const time_t*</param_type>
                <param_name>timer</param_name>
                <param_note>
                    <para>Pointer to stored time.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>localtime returns a pointer to the structure result. If the value in timer represents a date before midnight, January 1, 1970, localtime returns NULL. </para>
        <para>localtime converts a UTC value and stores the result in a structure of type tm which represents local time. The UTC value is usually get by function time. The structure tm is defined in time.h.</para>
        <para>The fields of the structure type tm store the following values, each of which is an int:</para>
        <table>
            <th>
               <td>Pointer Field</td>
               <td>Description</td>
            </th>
            <tr>
               <td>tm_sec</td>
               <td>Seconds after minute (0 每 59).</td>
            </tr>
            <tr>
               <td>tm_min</td>
               <td>Minutes after hour (0 每 59).</td>
            </tr>
            <tr>
               <td>tm_hour</td>
               <td>Hours after midnight (0 每 23).</td>
            </tr>
            <tr>
               <td>tm_mday</td>
               <td>Day of month (1 每 31).</td>
            </tr>
            <tr>
               <td>tm_mon</td>
               <td>Month (0 每 11; January = 0).</td>
            </tr>
            <tr>
               <td>tm_year</td>
               <td>Year (current year minus 1900).</td>
            </tr>
            <tr>
               <td>tm_wday</td>
               <td>Day of week (0 每 6; Sunday = 0).</td>
            </tr>
            <tr>
               <td>tm_yday</td>
               <td>Day of year (0 每 365; January 1 = 0).</td>
            </tr>
            <tr>
               <td>tm_isdst</td>
               <td>Positive value if daylight saving time is in effect; 0 if daylight saving time is not in effect; negative value if status of daylight saving time is unknown. It doesn't support daylight saving time now.
               </td>
            </tr>
        </table>
    </return>

    <remarks>
        <para>The localtime function converts a time stored as a time_t value and stores the result in a structure of type tm. The long value timer represents the seconds elapsed since midnight (00:00:00), January 1, 1970, coordinated universal time (UTC). This value is usually obtained from the time function.</para>
        <para>localtime uses a single statically allocated tm structure for the conversion. Each call to this routine destroys the result of the previous call.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>localtime</routine_name>
            <headerfile>time.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* localtm.cpp: This program uses time to get the current time
 * and then uses localtime to convert this time to a structure
 * representing the local time. The program converts the result
 * from a 24-hour clock to a 12-hour clock and determines the
 * proper extension (AM or PM).
 */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;time.h&gt;

int main()
{
    struct tm *ptime;
    time_t long_time;

    time(&amp;long_time);                /* Get time as long integer. */
    ptime = localtime(&amp;long_time); /* Convert to local time. */

    printf(&quot;The long_time:       %d\n&quot;, long_time);
    printf(&quot;Current Date :       %d-%d-%d\n&quot;,
        ptime-&gt;tm_year + 1900, ptime-&gt;tm_mon + 1, ptime-&gt;tm_mday);
    printf(&quot;Current time :       %d-%d-%d\n&quot;,
        ptime-&gt;tm_hour, ptime-&gt;tm_min, ptime-&gt;tm_sec);
    printf(&quot;Current weekday :    %d\n&quot;, ptime-&gt;tm_wday);
    printf(&quot;Current year_day :   %d\n&quot;, ptime-&gt;tm_yday);

    return 0;
}
</pre>
    </example>
<result>
The long_time:    1179307373
Current Date :    2007-5-16
Current time :    17-22-53
Current weekday : 3
Current year_day :135
</result>



    <references>
        <reference>
            <ref_name>ctime</ref_name>
            <ref_url>ctime</ref_url>
        </reference>
        <reference>
            <ref_name>_ftime</ref_name>
            <ref_url>_ftime</ref_url>
        </reference>
        <reference>
            <ref_name>time</ref_name>
            <ref_url>time</ref_url>
        </reference>
        <reference>
            <ref_name>_wasctime</ref_name>
            <ref_url>_wasctime</ref_url>
        </reference>
    </references>

</manpage>