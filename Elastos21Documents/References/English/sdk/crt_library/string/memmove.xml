<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\string\memmove">memmove</sample>
    <title> memmove </title>
    <volume>C Run-Time Library Functions</volume>
    <routine_idx> str_idx.htm </routine_idx>

    <description>
        <para>Moves one buffer to another.</para>
    </description>

    <syntax>
        <return_val>void*</return_val>
        <func_name>memmove</func_name>
        <parameters>
            <func_param>
                <param_type>void*</param_type>
                <param_name>dest</param_name>
                <param_note>
                    <para>Destination buffer.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>const void*</param_type>
                <param_name>src</param_name>
                <param_note>
                    <para>Source buffer.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>Number of bytes of characters to copy.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>Returns the value of dest.</para>
    </return>

    <remarks>
        <para>The memmove function copies count bytes of characters from src to dest. If some regions of the source area and the destination overlap, memmove ensures that the original source bytes in the overlapping region are copied before being overwritten.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>memmove</routine_name>
            <headerfile>string.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================



#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char string1[60] = &quot;The quick brown dog jumps over the lazy fox&quot;;
/*                           1         2         3         4         5
 *                  12345678901234567890123456789012345678901234567890
 */

int main()
{
    printf(&quot;Function : memmove with overlap\n&quot;);
    printf(&quot;Source : %s\n&quot;, string1 + 4);
    printf(&quot;Destination : %s\n&quot;, string1 + 10);
    memmove(string1 + 10, string1 + 4, 40);
    printf(&quot;Result : %s\n&quot;, string1);
    printf(&quot;Length : %d characters\n&quot;, strlen(string1));

    return 0;
}
</pre>
    </example>
<result>
Function : memmove with overlap
Source : quick brown dog jumps over the lazy fox
Destination : brown dog jumps over the lazy fox
Result : The quick quick brown dog jumps over the lazy fox
Length : 49 characters
</result>



    <references>
        <reference>
            <ref_name>_memccpy</ref_name>
            <ref_url>_memccpy</ref_url>
        </reference>
        <reference>
            <ref_name>memcpy</ref_name>
            <ref_url>memcpy</ref_url>
        </reference>
    </references>

</manpage>