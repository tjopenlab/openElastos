<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\string\_memccpy">_memccpy</sample>
    <title>_memccpy</title>
    <volume>C Run-Time Library</volume>
    <routine_idx> str_idx.htm </routine_idx>

    <description>
        <para>Copies characters from a buffer..</para>
    </description>

    <syntax>
        <return_val>char*</return_val>
        <func_name>_memccpy</func_name>
        <parameters>
             <func_param>
                <param_type>void *</param_type>
                <param_name>dest</param_name>
                <param_note>
                    <para>Pointer to the destination.</para>
                </param_note>
            </func_param>
             <func_param>
                <param_type>const void *</param_type>
                <param_name>src</param_name>
                <param_note>
                    <para>Pointer to the source.</para>
                </param_note>
            </func_param>
             <func_param>
                <param_type>int</param_type>
                <param_name>c</param_name>
                <param_note>
                    <para>Last character to copy.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>Number of characters</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>If the character c is copied, _memccpy returns a pointer to the char in dest that immediately follows the character. If c is not copied, it returns NULL.</para>
    </return>

    <remarks>
        <para>The _memccpy function copies 0 or more characters of src to dest, halting when the character c has been copied or when count characters have been copied, whichever comes first.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_memccpy </routine_name>
            <headerfile>string.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.
//==========================================================================



#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char string1[60] = &quot;The quick brown dog jumps over the lazy fox&quot;;

int main()
{
    char buffer[61];

    printf(&quot;Function:\t_memccpy 60 characters or to character &apos;s&apos;\n&quot;);
    printf(&quot;Source:\t\t%s\n&quot;, string1);
   
    _memccpy(buffer, string1, &apos;s&apos;, 60);
   
    printf(&quot;Result:\t\t%s\n&quot;, buffer);
    printf(&quot;Length:\t\t%d characters\n\n&quot;, strlen(buffer));

    return 0;
}
</pre>
    </example>
<result>
Function:       _memccpy 60 characters or to character &apos;s&apos;
Source:         The quick brown dog jumps over the lazy fox
Result:         The quick brown dog jumps
Length:         25 characters
</result>
   <references>
        <reference>
            <ref_name>memchr</ref_name>
            <ref_url>memchr </ref_url>
        </reference>
        <reference>
            <ref_name>memcmp </ref_name>
            <ref_url>memcmp </ref_url>
        </reference>
        <reference>
            <ref_name>memcpy </ref_name>
            <ref_url>memcpy </ref_url>
        </reference>
        <reference>
            <ref_name>memset </ref_name>
            <ref_url>memset </ref_url>
        </reference>
        <reference>
            <ref_name>memmove </ref_name>
            <ref_url>memmove </ref_url>
        </reference>
    </references>

</manpage>