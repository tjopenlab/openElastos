<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\string\strncpy">strncpy</sample>
    <title>strncpy, wcsncpy</title>
    <volume>C Run-Time Library</volume>
    <routine_idx> str_idx.htm </routine_idx>

    <description>
        <para>Copy characters of one string to another.</para>
    </description>

    <syntax>
        <return_val>char*</return_val>
        <func_name>strncpy</func_name>
        <parameters>
            <func_param>
                <param_type>char*</param_type>
                <param_name>strDest</param_name>
                <param_note>
                    <para>Destination string.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>strSource</param_name>
                <param_note>
                    <para>Source string.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>Number of characters to be copied.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>wchar_t*</return_val>
        <func_name>wcsncpy</func_name>
        <parameters>
            <func_param>
                <param_type>wchar_t*</param_type>
                <param_name>strDest</param_name>
            </func_param>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>strSource</param_name>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>Both functions returns pointer to target string strDest. No return value is reserved to indicate an error.</para>
    </return>

    <remarks>
        <para>The strncpy function copies the initial count characters of strSource to strDest and returns strDest.If count is less than or equal to the length of strSource, a null character is not appended automatically to the copied string.If count is greater than the length of strSource, the destination string is padded with NULL characters up to length count. The behavior of strncpy is undefined if the source and destination strings overlap.</para>
        <para>wcsncpy is a wide-character version of strncpy. The arguments and return value of wcsncpy are all wide-character strings. These two functions behave identically otherwise.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>strncpy</routine_name>
            <headerfile>string.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>wcsncpy</routine_name>
            <headerfile>string.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* strncpy.cpp:this program copies the initial count characters of strSource to strDest and returns strDest
 */

#include &lt;string.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    char string[100] = &quot;Cats are nice usually&quot;;
    printf (&quot;Before: %s\n&quot;, string);
    strncpy(string, &quot;Dogs&quot;, 4);
    strncpy(string + 9, &quot;mean&quot;, 4);
    printf (&quot;After:  %s\n&quot;, string);

    return 0;
}
</pre>
    </example>
<result>

Before: Cats are nice usually
After:  Dogs are mean usually
</result>



    <references>
        <reference>
            <ref_name> wcscat</ref_name>
            <ref_url>wcscat  </ref_url>
        </reference>
        <reference>
            <ref_name>wcscmp </ref_name>
            <ref_url>wcscmp </ref_url>
        </reference>
        <reference>
            <ref_name> wcscpy </ref_name>
            <ref_url>wcscpy </ref_url>
        </reference>
        <reference>
            <ref_name> wcsncat </ref_name>
            <ref_url>wcsncat </ref_url>
        </reference>
        <reference>
            <ref_name> wcsncmp </ref_name>
            <ref_url>wcsncmp </ref_url>
        </reference>
        <reference>
            <ref_name> strrchr </ref_name>
            <ref_url>strrchr </ref_url>
        </reference>
        <reference>
            <ref_name> _strset </ref_name>
            <ref_url>_strset </ref_url>
        </reference>
        <reference>
            <ref_name> strspn </ref_name>
            <ref_url> strspn  </ref_url>
        </reference>
        <reference>
            <ref_name> strcspn </ref_name>
            <ref_url> strcspn  </ref_url>
        </reference>
    </references>

</manpage>