<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\io\_write">_write</sample>
    <title> _write</title>
    <volume>C Run-Time Library</volume>
    <routine_idx> io_idx.htm </routine_idx>

    <description>
        <para>Writes data to a file.</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>_write</func_name>
        <parameters>
            <func_param>
                <param_type>int</param_type>
                <param_name>handle</param_name>
                <param_note>
                    <para>File descriptor.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>const void*</param_type>
                <param_name>buffer</param_name>
                <param_note>
                    <para>Data to be written.</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>unsigned int</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>Number of bytes to be written.</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>If successful, _write returns the number of bytes actually written. If the actual space remaining on the disk is less than the size of the buffer the function is trying to write to the disk, _write fails and does not flush any of the buffer's contents to the disk. A return of -1 indicates an error. In this case, errno is set to one of two values: EBADF, which means the file descriptor is invalid or the file is not opened for writing or ENOSPC, which means there is not enough space left on the device for the operation.</para>
	<para>If the file is opened in text mode, each linefeed character is replaced with a carriage return - linefeed pair in the output. The replacement does not affect the return value.</para>
    </return>

    <remarks>
        <para>The _write function writes count bytes from buffer into the file associated with handle. The write operation begins at the current position of the file pointer (if any) associated with the given file. If the file is open for appending, the operation begins at the current end of the file. After the write operation, the file pointer is increased by the number of bytes actually written.</para>
        <para>When writing to files opened in text mode, _write treats a CTRL+Z character as the logical end-of-file. When writing to a device, _write treats a CTRL+Z character in the buffer as an output terminator.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_write</routine_name>
            <headerfile>io.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* _write.cpp: This program opens a file for output
 * and uses _write to write some bytes to the file.
 */

#include &lt;io.h&gt;
#include &lt;stat.h&gt;
#include &lt;stdio.h&gt;
#include &lt;fcntl.h&gt;

char buffer[] = &quot;This is a test of &apos;_write&apos; function&quot;;

int main()
{
    int fh;
    int byteswritten;

    if ((fh = _open(&quot;write.o&quot;, _O_RDWR | _O_CREAT,
                                         _S_IREAD | _S_IWRITE)) != -1) {
        if ((byteswritten = _write(fh, buffer, sizeof(buffer))) == -1)
            perror(&quot;Write failed&quot;);
        else
            printf(&quot;Wrote %d bytes to file\n&quot;, byteswritten);

        _close(fh);
    }

    return 0;
}
</pre>
    </example>
<result>
Wrote 36 bytes to file
</result>



    <references>
        <reference>
            <ref_name>_wopen</ref_name>
            <ref_url>_wopen</ref_url>
        </reference>
        <reference>
            <ref_name>_read</ref_name>
            <ref_url>_read</ref_url>
        </reference>
    </references>

</manpage>