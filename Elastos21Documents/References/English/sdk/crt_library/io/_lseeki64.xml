<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\io\_lseek">_lseek</sample>
    <title> _lseek£¬_lseeki64 </title>
    <volume>C Run-Time Library</volume>
    <routine_idx> io_idx.htm </routine_idx>

    <description>
        <para>The _lseek system call repositions the offset of the file descriptor fields to the argument offset according to the directive whence. The argument fildes must be an open file descriptor. The lseek() system call repositions the file position pointer associated with the file descriptor fildes as follows: </para>
	<para>  SEEK_SET, the offset is set to offset bytes.</para>
	<para>  SEEK_CUR, the offset is set to its current location plus offset bytes.</para>
	<para>  SEEK_END, the offset is set to the size of the file plus offset bytes.</para>
	<para>The _lseek system call allows the file offset to be set beyond the end of the existing end-of-file. If data is later written at this point, subsequent reads of the data in the gap return bytes of zeros (until data is actually written into the gap).</para>
	<para>Some devices are incapable of seeking. The value of the pointer associated with such a device is undefined.</para>
    </description>

    <syntax>
        <return_val>long</return_val>
        <func_name>_lseek</func_name>
        <parameters>
            <func_param>
                <param_type>int</param_type>
                <param_name>handle</param_name>
                <param_note>
                    <para>File handle</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>long</param_type>
                <param_name>offset</param_name>
                <param_note>
                    <para>Offset in number of bytes with respect to origin</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>origin</param_name>
                <param_note>
                    <para>Initial position</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>
    <syntax>
        <return_val>__int64</return_val>
        <func_name>_lseeki64</func_name>
        <parameters>
            <func_param>
                <param_type>int</param_type>
                <param_name>handle</param_name>
            </func_param>
            <func_param>
                <param_type>__int64</param_type>
                <param_name>offset</param_name>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>origin</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
            <para>_lseek returns the offset, in bytes, of the new position from the beginning of the file.</para>
            <para>_lseekI64 returns the offset in a 64-bit integer. The function returns - 1L to indicate an error and sets errno either to EBADF, meaning the file handle is invalid, or to EINVAL, meaning the value for origin is invalid or the position specified by offset is before the beginning of the file. On devices incapable of seeking (such as terminals and printers), the return value is undefined.</para>
    </return>

    <remarks>
        <para>The _lseek function moves the file pointer associated with handle to a new location that is offset bytes from origin. The next operation on the file occurs at the new location. The origin argument must be one of the following constants, which are defined in io.h: </para>
    	<table>
    	    <th>
    	        <td>Parameter Constant</td>
    	        <td>Description</td>
    	    </th>
    	    <tr>
    		    <td>SEEK_SET</td>
            	<td>Beginning of file</td>
    	    </tr>
    	    <tr>
    		    <td>SEEK_CUR</td>
            	<td>Current position of file pointer</td>
    	    </tr>
    	    <tr>
    		    <td>SEEK_END</td>
            	<td>End of file</td>
    	    </tr>
    	</table>
    	<para>User can reset file pointer at any place in the file using _lseek, including after EOF.</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_lseek</routine_name>
            <headerfile>io.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0</compatibility>
        </routine>
        <routine>
            <routine_name>_lseeki64</routine_name>
            <headerfile>io.h</headerfile>
            <compatibility>Windows 2000, Elastos 2.0</compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* _lseek.cpp: This program first opens a file named _lseek.cpp.
 * It then uses _lseek to find the beginning of the file,
 * to find the current position in the file, and to find
 * the end of the file.
 */

#include &lt;io.h&gt;
#include &lt;fcntl.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

int main()
{
    int fh;
    long pos;               /* Position of file pointer */
    char buffer[10];

    fh = _open(&quot;_lseek.exe&quot;, _O_RDONLY);

    /* Seek the beginning of the file: */
   pos = _lseek(fh, 0L, SEEK_SET);
    if (pos == -1L)
        perror(&quot;_lseek to beginning failed&quot;);
    else
        printf(&quot;Position for beginning of file seek = %ld\n&quot;, pos);

    /* Move file pointer a little */
    _read(fh, buffer, 10);

    /* Find current position: */
    pos = _lseek(fh, 0L, SEEK_CUR);
    if (pos == -1L)
        perror(&quot;_lseek to current position failed&quot;);
    else
        printf(&quot;Position for current position seek = %ld\n&quot;, pos);

    /* Set the end of the file: */
    pos = _lseek(fh, 0L, SEEK_END);
    if (pos == -1L)
        perror(&quot;_lseek to end failed&quot;);
    else
        printf(&quot;Position for end of file seek = %ld\n&quot;, pos);

    _close(fh);

    return 0;
}
</pre>
    </example>
<result>
Position for beginning of file seek = 0
Position for current position seek = 10
Position for end of file seek = 250284
</result>



    <references>
        <reference>
            <ref_name>fseek</ref_name>
            <ref_url>..\stdio\fseek</ref_url>
        </reference>
    </references>

</manpage>