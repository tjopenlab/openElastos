<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/apimanual.xsl"?>

<manpage>
    <sample url="elasock\UDP"></sample>
    <volume>elasock API </volume>
    <title>closesocket</title>
    <routine_idx> elasock_idx.htm </routine_idx>

    <description>
        <para>关闭套接口。</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <parameters>
            <api_param>
                <param_type>SOCKET</param_type>
                <param_name>s</param_name>
                <param_note>
                    <para>被关闭的套接口。</para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

    <return>
        <para>程序执行成功时返回0；否则返回SOCKET_ERROR，应用程序调用WSAGetLastError()可获取相应的错误代码。</para>
    </return>

    <remarks>
        <para>本函数关闭一个套接口。更确切地说，它释放套接口s，以后对s的访问将返回WSAENOTSOCK错误。同时线程发出的等待阻塞和异步调用都将被取消。</para>
        <para>应用程序应当对每个socket()都匹配一个closesocket()，以使套接口占用的系统资源得到释放。</para>
        <para>closesocket()的语义受SO_LINGER与SO_DONTLINGER选项影响，SO_DONTLINGER缺省为打开，而SO_LINGER为关闭：</para>
        <table>
            <th>
                <td>选项</td><td>时间间隔</td><td>关闭方式</td><td>等待关闭与否</td>
            </th>
            <tr>
                <td>SO_DONTLINGER</td><td>不关心</td><td>优雅</td><td>否</td>
            </tr>
            <tr>
                <td>SO_LINGER</td><td>0</td><td>强制</td><td>否</td>
            </tr>
            <tr>
                <td>SO_LINGER</td><td>非0</td><td>优雅</td><td>是</td>
            </tr>
        </table>
        <para>如果设置了SO_LINGER（即linger结构中的l_onoff成员设为非零），且超时间隔设为0（l_linger为0），则不管有没有未被发送或确认的数据，closesocket()都将立即执行。这种关闭方式称为“强制”或“取消”关闭，此时套接口的虚拟电路被立即复位，未发送数据将被遗弃。在网络另一端的recv()调用将返回WSAECONNRESET错误。</para>
        <para>若对阻塞套接口设置了SO_LINGER，并把超时间隔设置为非0，closesocket()调用将阻塞进程，直到所剩数据发送完毕或超时。这种关闭称为“优雅的”关闭。如果在所有数据发出之前操作超时，连接将在closesocket()返回之前中止。</para>
        <para>不推荐把非阻塞套接口设置为SO_LINGER，且把超时间隔设置为非0，如果关闭操作不能立即完成，closesocket()调用将产生WSAEWOULDBLOCK错误。此时套接口描述字仍然有效，且并未中止连接。应用程序必须再次调用closesocket()才能关闭套接口。</para>
        <para>若在一个字节流套接口上设置了SO_DONTLINGER（也就是说将linger结构的l_onoff域设为零），则不管套接口为阻塞还是非阻塞，closesocket()调用立即返回。但是，如果可能，排队的数据将在套接口关闭前发送。函数缺省情况以这种方式执行。请注意，在这种情况下系统将在一段不确定的时间内保留套接口及其占用的资源，这将影响某些希望使用该套接口的应用程序。</para>
        <para>注意：为了确保一次连接所有数据都收发成功，应用程序应当在调用closesocket之前调用shutdown()；应用程序不应当在本地套接口关闭后再使用该套接口。</para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Windows 2000或更高版本；《和欣 2.0》或更高版本
            </system_name>
        </system>
        <headerfile>
            <file_name> winsock.h</file_name>
        </headerfile>
        <library>
            <lib_name> elasock.lib  </lib_name>
        </library>
    </requirements>

    <references>
        <reference>
            <ref_name>accept</ref_name>
            <ref_url>accept</ref_url>
        </reference>
        <reference>
            <ref_name>socket</ref_name>
            <ref_url>socket</ref_url>
        </reference>
        <reference>
            <ref_name>ioctlsocket</ref_name>
            <ref_url>ioctlsocket</ref_url>
        </reference>
        <reference>
            <ref_name>setsockopt</ref_name>
            <ref_url>setsockopt</ref_url>
        </reference>
    </references>
    <example>
    </example>
</manpage>
