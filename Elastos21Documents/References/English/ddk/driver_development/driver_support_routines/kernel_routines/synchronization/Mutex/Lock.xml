<!--==========================================================================-->
<!-- Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

    <?xml version = "1.0" encoding="GB2312" ?>
    <?xml:stylesheet type="text/xsl" href="/xsl/xsl_e/methodmanual.xsl"?><manpage>
<volume>Synchronization</volume>
<interface>Mutex</interface><method> Lock </method>
    <description>
        <para>
            Gets a Mutex Lock object.
        </para>
    </description>
    <syntax>
        <return_val>ECODE </return_val>
        <NoArguments/>
    </syntax>

	<return>	    
	    	<table>
	            <th>
	                <td>Return Value</td>
	                <td>Hex Value</td>
	                <td>Description</td>
	            </th>
	            <tr>
	                <td>S_OK</td>
	                <td>0x00000000</td>
	                <td>Function succeeds in getting a Mutex Lock object.</td>
	            </tr>
	            <tr>
	                <td>S_INTERRUPTED</td>
	                <td>0x00060014</td>
	                <td>Waiting interrupted</td>
	            </tr>
	
	        </table>
        	<para>References <link url="/sdk/hresult.htm">ECODE</link> Related help for details.</para>
	</return>

	<remarks>
		<para>
        		This function is used to get Mutex Lock object. The calling thread will get into waiting 
        		state if Mutex object is occupied by another thread. It will return only after Mutex Lock object 
        		succeeds in being called by the thread. If Mutex object does not have any ownership, this 
        		Mutex object will be occupied by transfering this thread, and this function will return at 
        		once. If the calling thread has occupied this Mutex object, the function will return at once too.
        		And the calling thread should call <link url="Unlock.htm">Mutex::Unlock</link> function 
        		accordingly to release this Mutex object. When the thread is in the waiting pool it can be 
        		interrupted.
		</para>
	</remarks>

    <requirements>
        <system>
            <system_name>
				Elastos 2.0 or later.
	    	</system_name>
        </system>
    </requirements>
</manpage>