<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=GB2312">
<title>XmlGlue: XmlGlue</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script src="../../xsl/docstyles_for_doxgen.js"></script>
</head><body>
<!-- 制作者 Doxygen 1.5.4 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>XmlGlue模型简介</span></a></li>
    <li><a href="XmlGlue_Background.html"><span>XmlGlue编程模型的产生</span></a></li>
    <li class="current"><a href="XmlGlue_Model.html"><span>XmlGlue编程模型的组成与特点</span></a></li>
  </ul>
</div>
<h1>XmlGlue编程模型的组成与特点</h1>
<html>
<head>
<title>XmlGlue编程模型的组成与特点</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>
<body>
<h2>XmlGlue编程模型的组成</h2>
   <p>XmlGlue技术是一种MVC架构支持技术。它利用Elastos &reg;操作系统所提供的各种系统服务，以及CAR编程技术，最终提供一个功能强大的模型支持。

<h3>MVC架构</h3>
   <p>MVC（Model-View-Control）是Xerox PARC在八十年代为编程语言Smalltalk－80发明的一种软件设计模式，是许多交互界面系统的构成基础，最近几年被推荐为Sun公司J2EE平台的设计模式，受到越来越多的使用 ColdFusion 和 PHP 的开发者的欢迎。</p>
   <p>MVC强制性的使应用程序的输入、处理和输出分开，使MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。</p>
   <p>模型（Model）是数据与业务逻辑元件，封装的是数据源和所有基于这些数据的操作，在模型中拥有最多的处理任务。被模型返回的数据是中立的，就是说模型与数据格式无关，使得一个模型能为多个视图提供数据。</p>
   <p>视图（View）是用户看到并与之交互的界面。视图中没有真正的处理发生，它只是以界面形式输出数据并允许用户交互操纵。</p>
   <p>控制器（Controller）是整个软件中的控制单元，本身不输出任何东西和做任何处理，只是接收请求并决定调用哪个模型构件去处理请求，然后确定用哪个视图来显示模型处理返回的数据。通常一个视图具有一个控制器。</p>
   <p>MVC的整个处理过程就是，首先控制器接收用户在视图界面上的请求，决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回结果数据，最后控制器用相应的视图格式化模型返回的数据，并通过视图界面呈现给用户。</p>
   <p>MVC架构通过各个模块的设计，在很大程度上减少了软件的计算模型与视图间的耦合，使得在不改变软件模型的情况下，支持对视图构成的调整。</p>
   <p>另外，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性，而且，当一个模型被多个视图使用时，如果用户通过某个视图的控制器改变了模型的数据，所有其它依赖于这些数据的视图都应反映到这些变化，实现了模型的变化-传播机制。</p>
   <p>标准MVC模式的构成如下图所示:</p>
   <center><img src="images/mvc_framework.jpg"></center>
<h3>XmlGlue编程模型的组成</h3>
   <p>XmlGlue编程模型通过对脚本语言、XML等多种语言和CAR构件技术的运用来支持MVC架构，实现视图和模型的分开。因为XmlGlue编程模型是基于Elastos操作系统和CAR构件技术，所以，在支持MVC架构上有其自身的独特优势。</p>
   <p>XmlGlue编程模型中用XML标记语言实现视图（View）部分，描述整个界面的架构。XML程序中所用到的标签由Elastos操作系统中的视图模块加以支持，而这些控件都是以CAR构件技术来实现的，用户也可以通过CAR构件技术编写自己的标签，运用到XML程序中来，以满足特殊的要求。</p>
   <p>XmlGlue编程模型中用脚本语言和Reflection部分实现控制器（Controller）部分。脚本语言嵌入在XML文件中，可以对所有的构件及构件内的资源进行操作，使得应用能够访问独立于界面架构的构件，弥补XML在描述逻辑上的缺陷，实现用户与界面的互操作； Reflection是一个CAR构件，它提供的一组接口可以实现脚本语言对CAR构件及构件内的资源的具体调用，具体过程请参考相关技术文档。</p>    
   <p>XmlGlue编程模型用CAR构件技术实现模型（Model）。Elastos操作系统中的所有CAR构件都可以作为基于XmlGlue应用开发中的模型，也可用用户自己编写的CAR构件作为模型，并且，因为Elastos操作系统提供了构件的自动寻址、自动加载机制，所有用到的CAR构件模型也可以在网络上获得，前提是已知构件在网络上的链接地址。XmlGlue编程模型的图示如下：</p>
   <center><img src="images/xmlglue_model.jpg"></center>

<h2>XmlGlue编程模型的特点</h2>
   <p>◆ 支持MVC模型，实现了用户界面与业务逻辑的分离。如果界面需求发生变化，只需修改界面部分的代码，从而提高开发的效率；而且还可以更好地进行开发中的分工，界面开发人员开发用户界面层，而对业务熟悉的开发人员开发业务支持层。</p>
   <p>◆ 强弱类型语言的混合使用。在XmlGlue中作为Model的CAR构件是用强类型语言实现的，而View和Controller都可以用脚本编写，从而简化了开发的难度，提高了开发效率。
   <p>◆ 通过在XML里面嵌入脚本语言，类似于在HTML中嵌入脚本语言，弥补了XML在描叙业务逻辑上的缺陷。XML描叙了整个应用程序的框架，构件及构件间的关系；脚本语言使得应用程序能够访问独立于应用程序框架的构件，使得运行在客户端的XmlGlue应用程序的表现能力更强。
   <p>◆ 支持级联层叠样式表（CSS)，实现对布局设计（如控件换肤）的扩展。
   <p>◆ 支持多种脚本语言。允许开发人员嵌入一种自己所熟悉的脚本语言，如JavaScript,Lua等（目前系统只实现了对JavaScript和Lua这两种脚本语言的支持，以后会更多），从而可以适应不同类别程序员的需求和爱好，使得编程变得更加容易。
   <p>◆ 支持多视图，实现了不同窗口间的跳转。为了支持多视图的应用，在XmlGlue中引入预定义对象widget的Load方法。
   <p>◆ 支持网络构件的实时下载。在XmlGlue中，通过Elastos操作系统中CAR运行机制的支持，可以实现用户应用程序中服务构件在网络上的实时下载，顺应了Web Service 的发展趋势。</p>
   <p>◆ 支持多个xml文件间的参数传递。通过标签parameters和parameter定义一个参数群组来实现。
   <p>◆ 支持数据集的绑定。支持标签控件listview，comboBox,listBox与数据集的绑定。 

</body>
</html>
   <script>footer("chinese")</script>
</body>
</html>