<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=GB2312">
<title>用户自定义标签介绍</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
<script src="../../xsl/docstyles_for_doxgen.js"></script>
</head><body>
<!-- 制作者 Doxygen 1.5.4 -->
<div class="tabs">
  <ul>
    <li><a href="index.html"><span>首页</span></a></li>
    <li><a href="conlist.html"><span>非图形标签列表</span></a></li>
    <li><a href="annotated.html"><span>图形标签/控件列表</span></a></li>
    <li class="current"><a href="usertag.html"><span>用户自定义标签介绍</span></a></li>
    <li><a href="intro_css.htm"><span>级联式样式表CSS的功能支持</span></a></li>
  </ul>
</div>

<h1>用户自定义标签介绍</h1><!-- doxytag: class="window" -->
<p>XmlGlue中XML编程支持CAR构件的使用，无论是本地机还是远程机上的，只要知道它的位置即可，利用这些构件，
可以更好的满足用户具体开发过程中的需求。关于如何自定义CAR构件请参考Elastos编程入门部分的介绍。同时需要指出，
要使用用户自定义标签，首先要在配置文件manifest.xml中指定用户自定义CAR构件，详见<a href="manifest_introduce.html">manifest配置文件介绍</a>。
<p>在介绍用户自定义标签前，请先看下面一个简单的car文件定义，生成的构件名为myenum.dll。
<p><table border="0" cellpadding="0" cellspacing="0">
<tr><td class="memitem" valign="bottom"><pre>
1  module
2  {
3     interface IXXOO
4     {
5         GetAllFoos(
6             [out]IObjectEnumerator ** e);
7         SetName(
8             [in]WString name);
9         SetAge(
10            [in]Int32 age);
11     }

12     interface IXXOOEvents
13     {
14        Selected(
15            [in] Int32 index);
16     }

17     class CMyEnum
18     {
19         interface IObjectEnumerator;
20     }

21     class CAllFoo
22     {
23         interface IXXOO;
24         constructor(Int32 MYGOD);
25         callback interface JIXXOOEvents;
26     }
27 }
</td></tr></table>
<p>用户必须在CAR构件内显式地定义一个或多个构造函数。可以看到第21行定义的class内定义了一个构造函数，故可取该class名中"allFoo"作为用户自定义标签（注：标签名的首字母必须小写），
另外，若用户定义了多个构造函数，则将根据第一个构造函数来创建该对象，同时对象的属性也将根据第一个构造函数来确定（若要用其它构造函数来创建该对象，则可以在脚本中使用CreateObject方法，详见<a href="../script_programming/CAR_usage.html">CAR构件在脚本中的使用</a>这节）。
下面将详细介绍利用该标签在xml编程中实例化用户自定义构件，并设定一些属性值。
<p><b>◆	用户自定义构件模块别名的声明:</b>模块别名的声明，由系统标签xmlns标示，且此时需明确定义当前xmlns为userModule型及具体CAR构件的映像模块的别名，且此别名需在mainfest.xml中已定义。参考如下：
<center><table border="0" cellpadding="0" cellspacing="0">
<tr><td class="memitem" valign="bottom"><pre>&lt;userModule:allFoo xmlns:userModule="myenum" MYGOD="123" x:id="mye"/&gt;</td></tr></table></center>
<p>在该例中由系统标签xmlns定义了命名空间"myenum.dll"的别名"userModule"，故使用该命名空间下的一些元素时需要加上该别名"userModule"用于标示，例如"userModule:allFoo"。
<p><b>◆	用户自定义标签属性：</b>用户自定义标签属性的确定有两个原则，1.&nbsp;&nbsp;第一个构造函数中的入参名，
例如本节一开始定义的CAR文件中的构造函数有入参Int32 MYGOD，则MYGOD即可用作用户自定义标签的属性。
2.&nbsp;&nbsp;一个类所含接口方法是SetXXX，且该方法只有一个简单数值类型入参（入参不可以是接口或者结构体数据类型，仅限字符串，整型，数值，布尔型。），
则XXX可作为自定义标签的属性名，例如本节一开始定义的CAR文件中class CAllFoo中含有interface IXXOO，在IXXOO
接口中定义了SetName和SetAge方法，且它们的入参都是简单类型，故Name和Age可以作为用户自定义标签属性，如下例所示：
<center><table border="0" cellpadding="0" cellspacing="0">
<tr><td class="memitem" valign="bottom"><pre>&lt;userModule:allFoo xmlns:userModule="myenum.dll" MYGOD="123" x:id="mye" Name="abc" age="20"/&gt;</td></tr></table></center>
<p>其他属性：见<a class="el" href="attribute.html">通用属性</a>（用户自定义标签只具有id属性）。
<p><b>◆	用户自定义标签的事件:</b>所有用callback关键字修饰的接口可以看作为事件接口，同时可以使用事件接口中的方法名在xml中注册该回调事件。
例如为allFoo注册一个selected事件，可参考如下代码：
<center><table border="0" cellpadding="0" cellspacing="0">
<tr><td class="memitem" valign="bottom">
    &lt;userModule:allFoo xmlns:userModule="myenum.dll" MYGOD="123" x:id="mye" <font color=red>selected="print('selected')</font>"/&gt;
</td></tr></table></center>
<p>注：在XML部分注册回调事件时，只能写一个具体的可执行语句，如上例中红色字体部分。

 <script>footer("chinese")</script>
</body>
</html>
