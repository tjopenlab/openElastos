<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->
<html>
<head>
<title> CAR构件技术简介 </title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>

<h2> CAR（Component Assembly Runtime）构件技术简介 </h2>
    <h3>什么是CAR构件技术</h3>
    <p>CAR（Component Assembly Runtime）构件技术是面向构件编程的编程模型，它规定了一组构件间相互调用的标准，使得二进制构件能够自描述，能够在运行时动态链接。</p>

    <p>CAR的编程思想是Elastos技术的精髓，它贯穿于整个技术体系的实现中。</p>

    <h3>CAR技术的由来</h3>
    <p>80年代以来，目标指向型软件编程技术有了很大的发展，为大规模的软件协同开发以及软件标准化、软件共享、软件运行安全机制等提供了理论基础。其发展可以大致分为以下几个阶段。</p>
    <p><b>面向对象编程</b></p>
    <p>通过对软件模块的封装，使其相对独立，从而使复杂的问题简单化。面向对象编程强调的是对象的封装，但模块（对象）之间的关系在编译的时候被固定，模块之间的关系是静态的，在程序运行时不可改变模块之间的关系，就是说在运行时不能换用零件。其代表是C++语言所代表的面向对象编程。</p>
    <center><img src="images/module.jpg"/></center>
    <p><b>面向构件编程</b></p>
    <p>为了解决不同软件开发商提供的构件模块（软件对象）可以相互操作使用，构件之间的连接和调用要通过标准的协议来完成。构件化编程模型强调协议标准，需要提供各厂商都能遵守的协议体系。就像公制螺丝的标准一样，所有符合标准的螺丝和螺母都可以相互装配。构件化编程模型建立在面向对象技术的基础之上，是完全面向对象的，提供了动态构造部件模块（运行中可以构造部件）的机制。构件在运行时动态装入，是可换的。其代表是COM技术。</p>
    <center><img src="images/accessory.jpg"/></center>
    <p><b>面向中间件编程</b></p>
    <p>由于因特网的普及，构件可来自于网络，系统要解决自动下载，安全等问题。因此，系统中需要根据构件的自描述信息自动生成构件的运行环境，生成代理构件即中间件，通过系统自动生成的中间件对构件的运行状态进行干预或控制，或自动提供针对不同网络协议、输入输出设备的服务（即运行环境）。中间件编程更加强调构件的自描述和构件运行环境的透明性，是网络时代编程的重要技术。其代表是CAR、JAVA和.NET（C#语言）。</p>
    <center><img src="images/circumstance.jpg"/></center>
    <p>在这样的发展过程中，人们逐步深化了对大规模软件开发所需的科学模型、网络环境下软件运行必要机制的理解，使软件技术达到了更高的境界，实现了：</p>
        <ul>
            <li>构件的相互操作性。不同软件开发商开发的具有独特功能的构件，可以确保与其他人开发的构件实现互操作。
            <li>软件升级的独立性。实现在对某一个构件进行升级时不会影响到系统中的其他构件。
            <li>编程语言的独立性。不同的编程语言实现的构件之间可以实现互操作。
            <li>构件运行环境的透明性。提供一个简单、统一的编程模型，使得构件可以在进程内、跨进程甚至于跨网络运行。同时提供系统运行的安全、保护机制。
        </ul>
    <p>CAR技术就是在总结面向对象编程、面向构件编程技术的发展历史和经验，为更好地支持面向以Web&nbsp;Service（WEB服务）为代表的下一代网络应用软件开发而发明的。</p>
    <p>为了在资源有限的嵌入式系统中实现面向中间件编程技术，同时又能得到C/C++的运行效率，CAR没有使用JAVA和.NET的基于中间代码-虚拟机的机制，而是采用了用C++编程，用ElastosSDK提供的工具直接生成运行于Elastos构件运行平台的二进制代码的机制。用C++编程实现构件技术，使得更多的程序员能够充分运用自己熟悉的编程语言知识和开发经验，很容易掌握面向构件、中间件编程的技术。在不同操作系统上实现的Elastos构件运行平台，可以使CAR构件的二进制代码可以实现跨操作系统平台兼容。</p>
    <p>为了避免使用"中间件"这个有不同语义解释的词汇造成概念上的混淆，我们简单地将CAR技术统称为CAR构件技术。</p>

    <A NAME="car"></A>
    <h3>CAR技术对软件工程的作用</h3>
    <p>CAR的重要特点就是上文所介绍的：构件的相互操作性；软件升级的独立性；编程语言的独立性；进程运行透明度。</p>
    <p>在实际的编程应用中，CAR技术可以使程序员得到以下几个方面的受益：</p>
    <p><b>易学易用</b></p>
    <p>基于COM的构件化编程技术是大型软件工程化开发的重要手段。微软Windows&nbsp;2000的软件全部是用COM实现的。但是微软COM的繁琐的构件描述体系令人望而生畏。CAR的开发环境ElastosSDK提供了结构简洁的构件描述语言和自动生成辅助工具等，使得C++程序员可以很快地掌握CAR编程技术。</p>
    <p><b>可以动态加载构件</b></p>
    <p>在网络时代，软件构件就相当于零件，零件可以随时装配。CAR技术实现了构件动态加载，使用户可以随时从网络得到最新功能的构件。</p>
    <p><b>采用第三方软件丰富系统功能</b></p>
    <p>CAR技术的软件互操作性，保证了系统开发人员可以利用第三方开发的，符合CAR规范的构件，共享软件资源，缩短产品开发周期。同时用户也可以通过动态加载第三方软件扩展系统的功能。</p>
    <p><b>软件复用</b></p>
    <p>软件复用是软件工程长期追求的目标，CAR技术提供了构件的标准，二进制构件可以被不同的应用程序使用，使软件构件真正能够成为"工业零件"。充分利用"久经考验"的软件零件，避免重复性开发，是提高软件生产效率和软件产品质量的关键。</p>
    <p><b>系统升级</b></p>
    <p>传统软件的系统升级是一个令软件系统管理员头痛的工程问题，一个大型软件系统常常是"牵一发而动全身"，单个功能的升级可能会导致整个系统需要重新调试。CAR技术的软件升级独立性，可以圆满地解决系统升级问题，个别构件的更新不会影响整个系统。</p>
    <p><b>实现软件工厂化生产</b></p>
    <p>上述几个特点，都是软件零件工厂化生产的必要条件。构件化软件设计思想规范了工程化、工厂化的软件设计方法，提供了明晰可靠的软件接口标准，使软件构件可以像工业零件一样生产制造，零件可用于各种不同的设备上。</p>
    <p><b>提高系统的可靠性、容错性</b></p>
    <p>由于构件运行环境可控制，可以避免因个别构件的崩溃而波及到整个系统，提高系统的可靠性。同时，系统可以自动重新启动运行中意外停止的构件，实现系统的容错。</p>
    <p><b>有效地实现系统安全性</b></p>
    <p>系统可根据构件的自描述信息自动生成代理构件，通过代理构件进行安全控制，可以有效地实现对不同来源的构件实行访问权限控制、监听、备份容错、通信加密、自动更换通信协议等等安全保护措施。</p>

    <h3>CAR技术的意义</h3>
    <p>对于软件开发企业而言，采用CAR构件技术具有以下的意义：</p>
    <ul>
        <li>CAR构件与微软的COM构件二进制兼容，但是CAR的开发工具自动实现构件的封装，简化了构件编程的复杂性，有利于构件化编程技术的推广普及；
        <li>CAR构件技术是一个实现软件工厂化生产的先进技术，可以大大提升企业的软件开发技术水平，提高软件生产效率和软件产品质量；
        <li>软件工厂化生产需要有零件的标准，CAR构件技术为建立软件标准提供了参考，有利于建立企业内、行业内的软件标准，有利于建立企业内、行业内的构件库。
    </ul>

    <h3>如何用CAR技术编程</h3>
    <p>CAR是一个面向构件的编程模型，也可以说是一种编程思想，它表现为一组编程规范，包括构件、类、对象、接口等定义与访问构件对象的规定。</p>
    <p>CAR的实现，是由一个配套的开发环境和运行环境完成的。在下面的章节中，我们将介绍<a class="style1" href="elastos_zee.htm">“Elastos构件运行平台”</a>与<a class="style1" href="..\..\xdk\ElastosXDK.htm">“Elastos XDK”</a>，通过对这些内容的了解，读者就可以对CAR编程有一个全面的认识。</p>

    <h3>小结</h3>
    <p>作为本章的总结，我们给出下面的图，帮助读者理解CAR和编程、程序运行的关系。</p>
    <center><img src="images/CAR.jpg"/></center>

<script>footer("chinese")</script>
</body>
</html>
