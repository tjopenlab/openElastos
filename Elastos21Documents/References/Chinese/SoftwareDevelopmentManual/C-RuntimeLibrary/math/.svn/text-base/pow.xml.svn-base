<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\math\pow">pow</sample>
    <title> pow</title>
    <volume>C 运行库函数</volume>
    <routine_idx> math_idx.htm </routine_idx>

    <description>
        <para>计算x的y次幂。</para>
    </description>

    <syntax>
        <return_val>double</return_val>
        <func_name>pow</func_name>
        <parameters>
            <func_param>
                <param_type>double</param_type>
                <param_name>x</param_name>
                <param_note>
                    <para>基数</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>double</param_type>
                <param_name>y</param_name>
                <param_note>
                    <para>指数</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>返回x的y次幂，溢出时不打印错误信息。</para>
        <table>
            <th>
               <td>x和y的值</td>
               <td>函数返回</td>
            </th>
            <tr>
               <td><![CDATA[x <> 0 and y = 0.0]]></td>
               <td>1</td>
            </tr>
            <tr>
               <td><![CDATA[x = 0.0 and y = 0.0]]></td>
               <td>1</td>
            </tr>
            <tr>
               <td><![CDATA[x = 0.0 and y < 0]]></td>
               <td>INF</td>
            </tr>
        </table>
    </return>

    <remarks>
        <para>函数pow用于计算x的y次幂。pow认为大于2的64次幂的浮点数无效，例如：1.0E100。</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>pow</routine_name>
            <headerfile>math.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos </compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* pow.cpp:This program uses pow to computes x raised to the power of y
 */
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;

int main()
{
   double x = 2.0, y = 3.0, z;

   z = pow(x, y);
   printf(&quot;%.1f to the power of %.1f is %.1f\n&quot;, x, y, z);

   return 0;
}
</pre>
    </example>
<result>
2.0 to the power of 3.0 is 8.0
</result>

   

    <references>
        <reference>
            <ref_name>exp</ref_name>
            <ref_url>exp</ref_url>
        </reference>
        <reference>
            <ref_name>log</ref_name>
            <ref_url>log</ref_url>
        </reference>
        <reference>
            <ref_name>log10</ref_name>
            <ref_url>log10</ref_url>
        </reference>
        <reference>
            <ref_name>sqrt</ref_name>
            <ref_url>sqrt</ref_url>
        </reference>
    </references>

</manpage>