<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\io\_sopen">_sopen</sample>
    <title>_sopen</title>
    <volume>C 运行库函数</volume>
    <routine_idx> io_idx.htm </routine_idx>

    <description>
        <para>打开一个共享文件。正常执行后，返回指定文件句柄</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>_sopen</func_name>
        <parameters>
            <func_param>
                <param_type>const char *</param_type>
                <param_name>filename</param_name>
                <param_note>
                    <para>文件名</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>oflag</param_name>
                <param_note>
                    <para>允许对文件进行的操作</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>shflag</param_name>
                <param_note>
                    <para>文件共享方式</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>pmode</param_name>
                <param_note>
                    <para>可选项</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>
    <syntax>
        <return_val>int</return_val>
        <func_name>_wsopen</func_name>
        <parameters>
            <func_param>
                <param_type>const wchar_t *</param_type>
                <param_name>filename</param_name>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>oflag</param_name>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>shflag</param_name>
            </func_param>
            <func_param>
                <param_type>int</param_type>
                <param_name>pmode</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>运行成功返回已经打开文件的句柄。出错则返回-１，将错误号设置为下列常量之一：</para>
        <table>
    	    <th>
    	        <td>错误号</td>
    	        <td>描述</td>
    	    </th>
            <tr>
                <td>EACCES</td>
                <td>试图打开一个只读文件来写，或文件的共享模式不允许指定的操作，或所给路径为一目录</td></tr>
            <tr>
                <td>EEXIST</td>
                <td>指定了_O_CREAT 和 _O_EXCL参数，但是文件已存在</td></tr>
            <tr>
                <td>EINVAL</td>
                <td>参数oflag 或 shflag非法 </td></tr>
            <tr>
                <td>EMFILE</td>
                <td>文件句柄不可用（打开了过多文件）</td></tr>
            <tr>
                <td>ENOENT</td>
                <td>指定文件或路径不存在</td></tr>
        </table>
    </return>

    <remarks>
        <para>_sopen以oflag指定的方式打开名为filename的文件以供读写。_wsopen 是 _sopen的宽字符版本。_wsopen的filename  参数是宽字符字符串，除此外两者相同。</para>
        <para>oflag是由一个或多个下列常量（定义在fcntl.h中）或其组合形成的整数表达式:</para>
        <table>
    	    <th>
    	        <td>oflag参数值</td>
    	        <td>描述</td>
    	    </th>
            <tr>
                <td>_O_APPEND</td>
                <td>在每次“写”操作前将文件指针移到文件尾</td>
            </tr>
            <tr>
                <td>_O_BINARY</td>
                <td>以二进制（没有转化过的）的方式打开文件。参看fopen中关于二进制方式的描述</td>
            </tr>
            <tr>
                <td>_O_CREAT</td>
                <td>创建并打开新文件来写。如果给出的文件已存在则不起作用。当指定了_O_CREAT 时需要pmode参数</td>
            </tr>
            <tr>
                <td>_O_CREAT | _O_SHORT_LIVED</td>
                <td>创建临时文件。当指定了_O_CREAT 时需要pmode参数</td>
            </tr>
            <tr>
                <td>_O_CREAT | _O_TEMPORARY</td>
                <td>创建临时文件，文件将在最后的文件句柄关闭时被删除。当指定了_O_CREAT 时需要pmode参数</td>
            </tr>
            <tr>
                <td>_O_CREAT | _O_EXCL</td>
                <td>如果指定文件存在将出错。_O_EXCL只能和_O_CREAT配合使用。</td>
            </tr>
            <tr>
                <td>_O_NOINHERIT</td>
                <td>预防创建共享文件</td>
            </tr>
            <tr>
                <td>_O_RANDOM</td>
                <td>随机访问磁盘</td>
            </tr>
            <tr>
                <td>_O_RDONLY</td>
                <td>打开只读文件，不可以和_O_RDONLY 或 _O_WRONLY配合使用</td>
            </tr>
            <tr>
                <td>_O_SEQUENTIAL</td>
                <td>连续访问磁盘。</td>
            </tr>
            <tr>
                <td>_O_TEXT</td>
                <td>以文本方式打开文件。</td>
            </tr>
            <tr>
                <td>_O_TRUNC</td>
                <td>打开文件并将文件长度置为零，文件必须具有写权限，不可以和_O_RDONLY配合使用。
                当和_O_CREAT 配合使用时可以打开已存在的文件或创建新文件。
                _O_TRUNC将破坏原文件的内容。</td>
            </tr>
            <tr>
                <td>_O_WRONLY</td>
                <td>以写方式打开文件，不可以和_O_RDONLY 或 _O_RDWR配合使用。
                </td>
            </tr>
        </table>
        <para>要指定访问文件的方式，必须指定_O_RDONLY，_O_RDWR或 _O_WRONLY。访问方式没有默认值。</para>
        <para>shflag的定义有以下几种：</para>
        <table>
    	    <th>
    	        <td>shflag参数值</td>
    	        <td>描述</td>
    	    </th>
            <tr>
                <td>_SH_DENYRW</td>
                <td>拒绝读写文件</td></tr>
            <tr>
                <td>_SH_DENYWR</td>
                <td>拒绝写文件</td></tr>
            <tr>
                <td>_SH_DENYRD</td>
                <td>拒绝读文件</td></tr>
            <tr>
                <td>_SH_DENYNO</td>
                <td>允许读写文件</td></tr>
        </table>
        <para>只有指定了 _O_CREAT 时才需要pmode参数。如果文件已存在，忽略pmode参数。其他情况，pmode指明使用文件方式的设置。
        这些设置在文件第一次被关闭时生效。_sopen 函数在设置使用方式前应用当前文件使用方式到pmode。
        pmode 包含一个或两个下列在STAT.H中定义的常量的整数表达式：</para>
        <table>
    	    <th>
    		    <td>pmode参数值</td>
            	<td>描述</td>
    	    </th>
            <tr>
                <td>_S_IREAD</td>
                <td>只允许读</td>
            </tr>
            <tr>
                <td>_S_IWRITE</td>
                <td>只允许写（效果上相当于允许读和写）</td>
            </tr>
            <tr>
                <td>_S_IREAD | _S_IWRITE</td>
                <td>允许读和写</td>
            </tr>
        </table>
        <para>
             当两个常量都给出时，他们通过按位或（| ）联结。在Elastos中，所有文件都是可读的，故“只允许写”并不真正生效；
              所以 _S_IWRITE 和 _S_IREAD | _S_IWRITE 是等价的。</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>_sopen</routine_name>
            <headerfile>io.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos </compatibility>
        </routine>
    </requirements>
</manpage>