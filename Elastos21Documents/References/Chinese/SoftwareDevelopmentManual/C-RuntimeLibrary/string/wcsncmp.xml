<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\string\strncmp">strncmp</sample>
    <title>strncmp, wcsncmp</title>
    <volume>C 运行库函数</volume>
    <routine_idx> str_idx.htm </routine_idx>

    <description>
        <para>比较两个字符串中的字符。</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>strncmp</func_name>
        <parameters>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>string1</param_name>
                <param_note>
                    <para>进行比较的字符串</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>const char*</param_type>
                <param_name>string2</param_name>
                <param_note>
                    <para>进行比较的字符串</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>比较的字符个数</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <syntax>
        <return_val>int</return_val>
        <func_name>wcsncmp</func_name>
        <parameters>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>string1</param_name>
            </func_param>
            <func_param>
                <param_type>const wchar_t*</param_type>
                <param_name>string2</param_name>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>函数返回值表示string1的子串和string2的子串的关系，具体含义如下表所示：</para>
        <table>
            <th>
               <td>返回值</td>
               <td>含义</td>
            </th>
            <tr>
               <td><![CDATA[< 0]]></td>
               <td>string1的子串小于string2的子串 </td>
            </tr>
            <tr>
               <td>0</td>
               <td>string1的子串与string2的子串相等 </td>
            </tr>
            <tr>
               <td><![CDATA[> 0]]></td>
               <td>string1的子串大于string2的子串</td>
            </tr>
        </table>
    </return>

    <remarks>
        <para>函数strncmp按词典顺序比较string1和string2的前count（至多）个字符，返回值表示两子串的关系。函数strncmp是_strnicmp的大小写敏感型版本。strncmp不受位置的影响。函数wcsncmp是strncmp的宽字符版本。函数wcsncmp的参数和返回值，都是宽字符串，除此之外，和函数strncmp一样。wcsncmp是_wcsnicmp的大小写敏感型版本。</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>strncmp</routine_name>
            <headerfile>string.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos </compatibility>
        </routine>
        <routine>
            <routine_name>wcsncmp</routine_name>
            <headerfile>string.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos </compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* strncmp.cpp:this program lexicographically compares, at most, the first count characters in string1 and string2
               and returns a value indicating the relationship between the substrings
 */

#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

char string1[] = &quot;The quick brown dog jumps over the lazy fox&quot;;
char string2[] = &quot;The QUICK brown dog jumps over the lazy fox&quot;;

int main()
{
    char tmp[20];
    int result;

    printf(&quot;Compare strings:\n      %s\n      %s\n\n&quot;, string1, string2);
    printf(&quot;Function:   strncmp (first 10 characters only)\n&quot;);
    result = strncmp(string1, string2, 10);
    if (result &gt; 0)
        strcpy(tmp, &quot;greater than&quot;);
    else if (result &lt; 0)
        strcpy(tmp, &quot;less than&quot;);
    else
    strcpy(tmp, &quot;equal to&quot;);
    printf(&quot;Result:      String 1 is %s string 2\n&quot;, tmp);

    return 0;
}
</pre>
    </example>
<result>
Compare strings:
The quick brown dog jumps over the lazy fox
The QUICK brown dog jumps over the lazy fox

Function:   strncmp (first 10 characters only)
Result:      String 1 is greater than string 2
</result>



    <references>
        <reference>
            <ref_name> wstrcmp </ref_name>
            <ref_url>wcscmp</ref_url>
        </reference>
        <reference>
            <ref_name> _wstrnicmp </ref_name>
            <ref_url>_wcsnicmp</ref_url>
        </reference>
        <reference>
            <ref_name> wstrchr </ref_name>
            <ref_url>wcschr</ref_url>
        </reference>
        <reference>
            <ref_name> _strset </ref_name>
            <ref_url>_strset</ref_url>
        </reference>
        <reference>
            <ref_name> strspn </ref_name>
            <ref_url>strspn</ref_url>
        </reference>
        <reference>
            <ref_name> strcspn </ref_name>
            <ref_url>strcspn</ref_url>
        </reference>
    </references>

</manpage>