<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdio\fread">fread</sample>
    <title> fread</title>
    <volume>C 运行库函数</volume>
    <routine_idx> stio_idx.htm </routine_idx>

    <description>
        <para>从文件流中读取数据。</para>
    </description>

    <syntax>
        <return_val>size_t</return_val>
        <func_name>fread</func_name>
        <parameters>
            <func_param>
                <param_type>void*</param_type>
                <param_name>buffer</param_name>
                <param_note>
                    <para>存放数据的缓冲区的指针</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>size</param_name>
                <param_note>
                    <para>元素大小（字节数）</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>count</param_name>
                <param_note>
                    <para>要读出的最大元素个数</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
                <param_note>
                    <para>指向文件结构的指针</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>函数fread返回实际读出的完整元素的个数。出错或者未达到count就遇到文件结束符时，返回值可能小于参数count。调用函数ferror可以检测是哪种错误。如果size或count为0，fread返回0，buffer内容不变。</para>
    </return>

    <remarks>
        <para>函数fread从输入文件流中读取count个完整元素，并存储在buffer中，元素大小为size个字节。与文件流相关联的文件指针按实际读出的字节数递增。如果发生错误，文件指针的位置是不确定的。没有完整读出的元素，值也是不确定的。</para>
    </remarks>

    <requirements>
        <routine>
            <routine_name>fread</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos </compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* fread.cpp:  This program opens a file named FREAD.OUT and
 * writes 25 characters to the file. It then tries to open
 * FREAD.OUT and read in 25 characters. If the attempt succeeds,
 * the program displays the number of actual items read.
 */

#include &lt;stdio.h&gt;

int main()
{
    FILE *stream;
    char list[30];
    int  i, numread, numwritten;

    /* Open file in text mode: */
    if ((stream = fopen(&quot;fread.out&quot;, &quot;w+t&quot;)) != NULL) {
        for (i = 0; i &lt; 25; i++)
            list[i] = (char)(&apos;z&apos; - i);
        /* Write 25 characters to stream */
        numwritten = fwrite(list, sizeof(char), 25, stream);
        printf(&quot;Wrote %d items\n&quot;, numwritten);
        fclose(stream);

    }
    else
        printf(&quot;Problem opening the file\n&quot;);

    if ((stream = fopen(&quot;fread.out&quot;, &quot;r+t&quot;)) != NULL) {
        /* Attempt to read in 25 characters */
        numread = fread(list, sizeof(char), 25, stream);
        printf(&quot;Number of items read = %d\n&quot;, numread);
        printf(&quot;Contents of buffer = %.25s\n&quot;, list);
        fclose(stream);
    }
    else
        printf(&quot;File could not be opened\n&quot;);

    return 0;
}
</pre>
    </example>
<result>
Wrote 25 items
Number of items read = 25
Contents of buffer = zyxwvutsrqponmlkjihgfedcb
</result>

    

    <references>
        <reference>
            <ref_name>fwrite</ref_name>
            <ref_url>fwrite</ref_url>
        </reference>
    </references>

</manpage>