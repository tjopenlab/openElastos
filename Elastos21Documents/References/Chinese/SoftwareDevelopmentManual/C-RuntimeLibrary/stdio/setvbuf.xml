<?xml version="1.0" encoding="GB2312"?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/manual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\crt\libc\stdio\setvbuf">setvbuf</sample>
    <title>setvbuf</title>
    <volume>C 运行库函数</volume>
    <routine_idx> stio_idx.htm </routine_idx>

    <description>
        <para>控制文件流的缓冲区及缓冲区大小。</para>
    </description>

    <syntax>
        <return_val>int</return_val>
        <func_name>setvbuf</func_name>
        <parameters>
            <func_param>
                <param_type>FILE*</param_type>
                <param_name>stream</param_name>
                <param_note>
                    <para>指向文件结构的指针</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>char*</param_type>
                <param_name>buffer</param_name>
                <param_note>
                    <para>分配给用户的缓冲区</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>int*</param_type>
                <param_name>mode</param_name>
                <param_note>
                    <para>缓冲模式</para>
                </param_note>
            </func_param>
            <func_param>
                <param_type>size_t</param_type>
                <param_name>size</param_name>
                <param_note>
                    <para>以字节为单位的缓冲区大小。允许范围：2&lt; size &lt;INT_MAX (2147483647)。一般地，用户指定的size在分配时系统自动地下舍入为2的倍数</para>
                </param_note>
            </func_param>
        </parameters>
    </syntax>

    <return>
        <para>如果成功分配用户指定size的缓冲区，则返回0，如果指定了非法数据类型或非法的缓冲区大小，则返回非0值。</para>
    </return>

    <remarks>
        <para>setvbuf函数允许程序控制文件流的缓冲区及缓冲区大小。文件流必须指向一个打开的文件，文件被打开后就不能进行别的I/0操作。如果buffer不为NULL，它指向的数组就代表了缓冲区，如果buffer为NULL，setvbuf就自动的分配大小为size/2 * 2 字节的缓冲区。</para>
        <para>mode必须为_IOFBF， _IOLBF， 或者_IONBF。假如mode为_IOFBF或_IOLBF，size就用于指定缓冲区的大小。假如mode为_IONBF，文件流将忽略size和buffer而释放缓冲区。其中mode值的意思为：</para>
        <table>
            <th>
                <td>参数mode的值</td>
                <td>描述</td>
            </th>
            <tr>
                <td> _IOFBF </td>
                <td> 完全缓冲；也就是说，buffer用于指定缓冲区，size用于指定缓冲区的大小。如果buffer为NULL，就使用系统自动分配的缓冲区大小。</td>
        	</tr>

        	<tr>
        	    <td> _IOLBF </td>
        	    <td> 提供一个行缓冲区。</td>
        	</tr>

        	<tr>
        	    <td> _IONBF </td>
        	    <td> 忽略buffer和size，不分配任何缓冲区。 </td>
        	</tr>
        </table>
    </remarks>

    <requirements>
        <routine>
            <routine_name>setvbuf</routine_name>
            <headerfile>stdio.h</headerfile>
            <compatibility>ANSI, Windows 2000, Elastos </compatibility>
        </routine>
    </requirements>

    <example>
<pre>
//==========================================================================
// Copyright (c) 2000-2004,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

/* setvbuf.cpp: This program opens two streams: stream1
 * and stream2. It then uses setvbuf to give stream1 a
 * user-defined buffer of 1024 bytes and stream2 no buffer.
 */

#include &lt;stdio.h&gt;

int main()
{
    char buf[1024];
    FILE *stream1, *stream2;

    if (((stream1 = fopen(&quot;data1&quot;, &quot;a&quot;)) != NULL) &amp;&amp;
         ((stream2 = fopen(&quot;data2&quot;, &quot;w&quot;)) != NULL)) {
        if (setvbuf(stream1, buf, _IOFBF, sizeof(buf)) != 0)
            printf(&quot;Incorrect type or size of buffer for stream1\n&quot;);
        else
            printf(&quot;&apos;stream1&apos; now has a buffer of 1024 bytes\n&quot;);
        if (setvbuf(stream2, NULL, _IONBF, 0) != 0)
            printf(&quot;Incorrect type or size of buffer for stream2\n&quot;);
        else
            printf(&quot;&apos;stream2&apos; now has no buffer\n&quot;);
        _fcloseall();
    }
    else
        printf(&quot;problem open the file!!&quot;);
    return 0;
}
</pre>
    </example>
<result>
&apos;stream1&apos; now has a buffer of 1024 bytes
&apos;stream2&apos; now has no buffer
</result>

   

    <references>
        <reference>
            <ref_name>fclose</ref_name>
            <ref_url>fclose</ref_url>
        </reference>
        <reference>
            <ref_name>fflush</ref_name>
            <ref_url>fflush</ref_url>
        </reference>
        <reference>
            <ref_name>fopen</ref_name>
            <ref_url>_wfopen</ref_url>
        </reference>
        <reference>
            <ref_name>setbuf</ref_name>
            <ref_url>setbuf</ref_url>
        </reference>
    </references>

</manpage>