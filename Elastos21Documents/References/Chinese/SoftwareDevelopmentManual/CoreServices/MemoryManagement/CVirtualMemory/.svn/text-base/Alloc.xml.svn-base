<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/apimanual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\system_lib\EzMemory"> CVirtualMemory::Alloc </sample>
    <volume>虚拟内存管理</volume>
    <title>CVirtualMemory::Alloc</title>
    <routine_idx>../VirtualMemoryManagement.htm</routine_idx>

    <description>
        <para>分配一个虚存块。</para>
    </description>

    <syntax>
        <return_val>ECode</return_val>
        <parameters>
            <api_param>
                <param_type> Address </param_type>
                <param_name> baseAddr </param_name>
                <param_note>
                    <para>[in]指定的虚存地址</para>
                </param_note>
            </api_param>
            <api_param>
                <param_type> MemorySize </param_type>
                <param_name> size </param_name>
                <param_note>
                    <para>[in]指定的虚存块大小，单位为字节</para>
                </param_note>
            </api_param>
            <api_param>
                <param_type> MemoryMapFlags </param_type>
                <param_name> flags </param_name>
                <param_note>
                    <para>[in]虚存映射的可选标识，参见数据结构中的<link url="../../DataStructure/MemoryMap.htm">MemoryMap</link>枚举类型说明。</para>
                    <para>标志位间可以进行“或”操作。MemoryMap_Fixed可以不设置，MemoryMap_Upgrow与MemoryMap_Downgrow也可以不设置；MemoryMap_Upgrow和MemoryMap_Downgrow不能同时设置。不符合规则的设置可能产生不可预期的问题 。</para>
                    <para>如果标志位既没有设置为Map_Upgrow，也没有设置为Map_Downgrow，则系统不会自动提交物理内存，必须通过<link url="Commit.htm">CVirtualMemory::Commit</link>提交。</para>
                </param_note>
            </api_param>
            <api_param>
                <param_type> MemoryProtection </param_type>
                <param_name> protection </param_name>
                <param_note>
                    <para>[in]虚存块的保护权限，参见数据结构中的<link url="../../DataStructure/MemProtect.htm">MemoryProtection</link>枚举类型说明。</para>
                </param_note>
            </api_param>
            <api_param>
                <param_type> Address * </param_type>
                <param_name> pBaseAddr </param_name>
                <param_note>
                    <para>[out]指向虚存块首址的指针，用以获取所分配的虚存块首址，参数不能为空</para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

    <return>
    	<table>
            <th>
                <td>返回值</td><td>描述</td>
            </th>
            <tr>
                <td>NOERROR</td><td>程序执行成功</td>
            </tr>
            <tr>
                <td>E_ALREADY_EXIST</td><td>指定的虚存首址已经被占用</td>
            </tr>
            <tr>
                <td>E_INVALID_ARGUMENT</td><td>指定的参数无效</td>
            </tr>
            <tr>
                <td>E_NOT_ENOUGH_ADDRESS_SPACE</td><td>没有足够的虚存地址</td>
            </tr>
            <tr>
                <td>E_OUT_OF_MEMORY</td><td>内存不足</td>
            </tr>
        </table>
        <para>参见<link url="../../../../car_technology/fundamental/development_environment/car/ECode.htm">ECode</link>相关帮助。</para>
    </return>

    <remarks>
    <para><link url="Alloc.htm">CVirtualMemory::Alloc</link>函数分配一块虚存块。</para>
    <para>如果用户要求指定地址，则可将参数baseAddr设置为所需要的地址，并且设置参数flags的MemMap_Fixed位。系统将为其分配一块以baseAddr为首地址，size为大小的空间。如果size过大，该函数返回E_NOT_ENOUGH_ADDRESS_SPACE。如果参数vBaseAddr无效，该函数将返回E_INVALIDARG</para>
    <para>如果用户不设置flags的MemMap_Fixed位，则参数baseAddr将会被忽略。</para>
    <para><link url="Alloc.htm">CVirtualMemory::Alloc</link>函数只是分配了一块虚拟内存，没有实际分配相应的物理内存。用户可以通过<link url="Commit.htm">CVirtualMemory::Commit</link>提交物理内存，也可以在对该虚拟地址进行操作的时候通过缺页机制分配提交。</para>
    <para>参数flags的MemMap_Upgrow和MemMap_Downgrow位对于分配虚拟内存并无影响，它只在提交真正的物理页的时候产生影响。在调用<link url="Commit.htm">CVirtualMemory::Commit</link>函数提交物理页时，如果标志位设置为MemMap_Upgrow，当前线程会提交从获取到的虚存块的最低地址到<link url="Commit.htm">CVirtualMemory::Commit</link>函数所传入的地址之间的所有虚存块所需的物理内存，并映射；如果标志位设置为MemMap_Downgrow，当前线程会提交从获取到的虚存块的最高地址到<link url="Commit.htm">CVirtualMemory::Commit</link>函数所传入的地址之间的所有虚存块所需的物理内存，并映射；如果标志位既没有设置为MemMap_Upgrow，也没有设置为MemMap_Downgrow，当前线程会提交<link url="Commit.htm">CVirtualMemory::Commit</link>函数所传入的地址的虚存所需的一页物理内存，并映射。</para>
    <para>baseAddr和size必须页对齐，否则返回E_INVALID_ARGUMENT。</para>
    <para><link url="Alloc.htm">CVirtualMemory::Alloc</link>分配的空间，需要用<link url="Free.htm">CVirtualMemory::Free</link>释放，否则会造成内核泄漏或其它问题。</para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Windows 2000 或更高版本；Elastos操作系统
            </system_name>
        </system>
        <headerfile>
            <file_name> elastos.h </file_name>
        </headerfile>
        <library>
            <lib_name> elastos.lib </lib_name>
        </library>
    </requirements>

    <example>
    </example>

</manpage>
