<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/apimanual.xsl"?>

<manpage>
    <sample url="sdk\operating_system\system_lib\_CSystem_CreateSystemEventHandle">_CSystem_CreateSystemEventHandle</sample>
    <volume>其他系统服务</volume>
    <title>_CSystem_CreateSystemEventHandle</title>
    <routine_idx> ../other_service.htm </routine_idx>

    <description>
        <para>获取系统事件对象。</para>
    </description>

    <syntax>
        <return_val>ECode</return_val>
        <parameters>
            <api_param>
                <param_type> SystemEvents </param_type>
                <param_name> interestedEvents </param_name>
                <param_note>
                    <para>[in]指定用户所关心的系统事件集合</para>
                </param_note>
            </api_param>
            <api_param>
                <param_type> IEvent ** </param_type>
                <param_name> ppEvent </param_name>
                <param_note>
                    <para>[out]指向一个事件对象接口指针的指针，用来存放所获取的系统事件对象的接口指针。参见<link url="..\proc_and_thd\synchronization\IEvent.htm">IEvent</link>接口。此参数不可为NULL</para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

    <return>
    	<table>
            <th>
                <td>返回值</td><td>描述</td>
            </th>
            <tr>
                <td> NOERROR</td><td>程序执行成功</td>
            </tr>
            <tr>
                <td>E_INVALID_ARGUMENT</td><td>指定的参数无效</td>
            </tr>
            <tr>
                <td>E_OUT_OF_MEMORY</td><td>内存不足</td>
            </tr>
        </table>
        <para>参见<link url="../../../car_technology/fundamental/development_environment/car/ECode.htm">ECode</link>相关帮助。</para>
    </return>

    <remarks>
        <para>此函数用来获取一个定制的系统事件对象。通过设定用户所关心的系统事件集合，用户程序可以在其中任意一个系统事件发生的时候，通过等待由调用此函数所获取的系统事件对象，得到相应的唤醒通知。</para>
        <para>参数interestedEvents 可以为系统事件集中的一个或多个值。</para>
        <para>具体的系统事件定义参见数据结构中的<link url="../data_structure/SystemEvent.htm">SystemEvent</link>枚举类型说明。</para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Windows 2000 或更高版本；Elastos操作系统
            </system_name>
        </system>
        <headerfile>
            <file_name> elastos.h </file_name>
        </headerfile>
        <library>
            <lib_name> elastos.lib </lib_name>
        </library>
    </requirements>

    <example>
<pre>
//=============================================================================
// Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.
//=============================================================================

//=============================================================================
//
// Description : The following example demonstrates how to use the API
//               _CSystem_CreateSystemEventHandle.
//
//=============================================================================

#include &lt;elastos.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

//
// Child Thread entry point
//
void ThreadFunc(void *pArg)
{
    SystemTime tm, tmnew;
    ECode ec = NOERROR;

    //Let the new thread sleep for 1 second
    ec = CThread::Sleep(1000, NULL);
    if (FAILED(ec)) {
        printf(&quot;Failed to sleep.\n&quot;);
        return;
    }
    else
        printf(&quot;succeed to sleep the new thread!\n&quot;);

    // Gets the system time
    ec = CSystem::GetMachineTime(&amp;tm);
    if (FAILED(ec)) {
        printf(&quot;Failed to get time.\n&quot;);
        return;
    }

    printf(&quot;The system time is %s\n&quot;, ctime((const time_t *)&amp;tm));

    // Changes the system time,increase an hour
    tmnew = tm;
    tmnew.seconds += 3600;

    printf(&quot;Set time to 1 hour later.\n&quot;);

    ec = CSystem::SetMachineTime(tmnew);
    if (FAILED(ec)) {
        printf(&quot;Failed to set time.\n&quot;);
        return;
    }

    // Gets the new system time
    ec = CSystem::GetMachineTime(&amp;tm);
    if (FAILED(ec)) {
        printf(&quot;Failed to get time.\n&quot;);
        return;
    }

    printf(&quot;The new system time is %s\n&quot;, ctime((const time_t *)&amp;tm));

    return;
}

EXTERN_C int main()
{
    IThread *pIThread = NULL;
    IEvent  *pEvent   = NULL;
    ECode ec = NOERROR;
    WaitResult wr;

    // Gets the interface of system event
    ec = _CSystem_CreateSystemEventHandle(SystemEvent_TimeChanged, &amp;pEvent);
    if (FAILED(ec)) {
        printf(&quot;_CSystem_CreateSystemEventHandle Failed.\n&quot;);
    }

    // Create a child thread
    CThread::New(ThreadFunc, NULL, NULL, &amp;pIThread);

    //Wait for the system time to change
    pEvent-&gt;Wait(&amp;wr,NULL);
    pEvent-&gt;Release();

    pIThread-&gt;Join(INFINITE, NULL);
    pIThread-&gt;Release();

    return 0;
}
</pre>
    </example>
<result>
succeed to sleep the new thread!
The system time is Wed Nov 18 20:38:28 2006

Set time to 1 hour later.
The new system time is Wed Nov 18 21:38:28 2006
</result>

</manpage>
