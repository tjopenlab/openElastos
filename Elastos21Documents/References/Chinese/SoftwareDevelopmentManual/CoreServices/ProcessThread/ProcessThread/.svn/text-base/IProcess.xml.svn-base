<?xml version = "1.0" encoding="GB2312" ?>
    <?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/interfaceman.xsl"?>    <manpage>
    <volume>进程</volume>
    <interface> IProcess </interface>
    <description>
        <para>

        </para>
    </description>
    <methods>
<self>
    <method>
        <method_name>Start</method_name>
        <method_url>IProcess\Start</method_url>
    <m_description>
        用指定的应用程序名启动进程，并设置命令行参数
    </m_description>
    </method>
    <method>
        <method_name>Kill</method_name>
        <method_url>IProcess\Kill</method_url>
    <m_description>
		强行终止进程的运行
    </m_description>
    </method>
    <method>
        <method_name>WaitForExit</method_name>
        <method_url>IProcess\WaitForExit</method_url>
    <m_description>
        在指定的时间内等待进程的退出
    </m_description>
    </method>
    <method>
        <method_name>IsAlive</method_name>
        <method_url>IProcess\IsAlive</method_url>
    <m_description>
        进程是否在运行
    </m_description>
    </method>
    <method>
        <method_name>SetPriorityRank</method_name>
        <method_url>IProcess\SetPriorityRank</method_url>
    <m_description>
        设置进程的优先级类别
    </m_description>
    </method>
    <method>
        <method_name>GetPriorityRank</method_name>
        <method_url>IProcess\GetPriorityRank</method_url>
    <m_description>
		获取进程的优先级类别
    </m_description>
    </method>
    <method>
        <method_name>SetThreadPoolCapacity</method_name>
        <method_url>IProcess\SetThreadPoolCapacity</method_url>
    <m_description>
        设置线程池的容量，每个进程都有一个线程池
    </m_description>
    </method>

	<method>
        <method_name>GetThreadPoolState</method_name>
        <method_url>IProcess\GetThreadPoolState</method_url>
    <m_description>
		获取线程池的状态
    </m_description>
    </method>

    <method>
        <method_name>GetAllThreads</method_name>
        <method_url>IProcess\GetThreads</method_url>
    <m_description>
        获取进程中正在运行的线程集合
    </m_description>
    </method>
    <method>
        <method_name>GetAllModules</method_name>
        <method_url>IProcess\GetModules</method_url>
    <m_description>
        获取进程已装载模块的集合
    </m_description>
    </method>
    <method>
        <method_name>GetModuleByName</method_name>
        <method_url>IProcess\GetModuleByName</method_url>
    <m_description>
        通过指定的模块名字获取模块的接口指针
    </m_description>
    </method>
    <method>
        <method_name>GetModuleByAddress</method_name>
        <method_url>IProcess\GetModuleByAddress</method_url>
    <m_description>
        通过指定的地址获取模块的接口指针
    </m_description>
    </method>
    <method>
        <method_name>GetId</method_name>
        <method_url>IProcess\GetId</method_url>
    <m_description>
        获取进程ID
    </m_description>
    </method>
    <method>
        <method_name>GetStartInfo</method_name>
        <method_url>IProcess\GetStartInfo</method_url>
    <m_description>
        获取进程的启动信息，包括应用程序名和命令行参数
    </m_description>
    </method>
    <method>
        <method_name>GetExitCode</method_name>
        <method_url>IProcess\GetExitCode</method_url>
    <m_description>
        获取进程结束代码（返回值）
    </m_description>
    </method>
    <method>
        <method_name>GetStartTime</method_name>
        <method_url>IProcess\GetStartTime</method_url>
    <m_description>
        获取进程启动时的系统时间
    </m_description>
    </method>
    <method>
        <method_name>GetExitTime</method_name>
        <method_url>IProcess\GetExitTime</method_url>
    <m_description>
        获取进程退出时的系统时间
    </m_description>
    </method>
    <method>
        <method_name>GetProcessorTimes</method_name>
        <method_url>IProcess\GetProcessorTime</method_url>
    <m_description>
        获取进程运行所占用CPU的时间
    </m_description>
    </method>
    <method>
        <method_name>GetMemorySizes</method_name>
        <method_url>IProcess\GetMemorySizes</method_url>
    <m_description>
        获取进程所占用的内存大小
    </m_description>
    </method>

</self>
    </methods>
    <requirements>
        <system>
            <system_name>
				Windows 2000 或更高版本；Elastos操作系统 
			</system_name>
        </system>
    </requirements>
</manpage>