<!--==========================================================================-->
<!-- Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>Í¼ÐÎ¿Ø¼þIMenu</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>

<h2> IMenu ·¶Àý³ÌÐò </h2>

<pre>
//==========================================================================
// Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

<h3> CMenuSam.h </h3>
#include &quot;_CMenuSam.h&quot;
class CMenuSam : public _CMenuSam
{
public:
    CMenuSam();
    ~CMenuSam();
    CARAPI OnClose(IMenu* pIObject);
    CARAPI OnPopup(IMenu* pIObject);
    CARAPI OnClick(IMenu* pIObject, Int32 nIndex);
    CARAPI OnMouseDown(
        /* [in] */ IForm * pIObject,
        /* [in] */ Int32 nX,
        /* [in] */ Int32 nY,
        /* [in] */ InputMask enumButtons);
public:
    CARAPI AtEntry(
        /* [in] */ EzArray<WString> argcv);

    CARAPI AtExit();

    CARAPI OnExit(
        /* [in] */ IButton* pIObject);

private:
    IForm        * m_pMainForm;
    IMenu        * m_pIMenu;
    IMenu        * m_pIMenu2;
    IMenu        * m_pIMenu3;
    IButton      * m_pIBtnClose;
};

<h3> CMenuSam.cpp </h3>
#include &quot;CMenuSam.h&quot;
#include &quot;_CMenuSam.cpp&quot;
#include &lt;stdio.h&gt;

CMenuSam::CMenuSam()
{
    m_pIBtnClose  = NULL;
    m_pMainForm   = NULL;
    m_pIMenu      = NULL;
    m_pIMenu2     = NULL;
}

CMenuSam::~CMenuSam()
{
    if (m_pMainForm) {
        m_pMainForm->Release();
    }

    if (m_pIMenu) {
        m_pIMenu->Release();
    }

    if (m_pIMenu2) {
        m_pIMenu2->Release();
    }

    if (m_pIMenu3) {
        m_pIMenu3->Release();
    }

    if (m_pIBtnClose) {
        m_pIBtnClose->Release();
    }
}

ECode CMenuSam::AtEntry(
        /* [in] */ EzArray < WString > argcv)
{
    ECode ec;
////////////    form
    ec = CForm::New(&m_pMainForm);
    if (FAILED(ec)) {
        prInt32f("Create Form failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pMainForm->Init(FormStyle_Gradient, L"MAIN", 0, 0, 240, 320,  NULL);
    if (FAILED(ec)) {
        prInt32f("Init Form failed, the ec = 0x%08x\n", ec);
        return ec;
    }

//////////  menu
    ec = CMenu::New(&m_pIMenu);
    if (FAILED(ec)) {
        prInt32f("Create Menu failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIMenu->Init(NULL, 0);
    if (FAILED(ec)) {
        prInt32f("Init Menu failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIMenu->InsertMenuItem(0, 0, L"01234567890");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(1, 1, L"1");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(2, 2, L"2");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(3, 3, L"-");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(4, 4, L"4");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(5, 5, L"5");
    if(FAILED(ec)) {
        return ec;
    }

    ec = m_pIMenu->InsertMenuItem(6, 6, L"6");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(7, 7, L"7");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(8, 8, L"-");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(-1, 9, L"3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(-1, 10, L"Õ³Ìù");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(-1, 11, L"3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(-1, 12, L"3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->InsertMenuItem(-1, 13, L"3");
    if(FAILED(ec)) {
        return ec;
    }

    ec = m_pIMenu->SetMenuItemEnabled(10, FALSE);
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu->SetMenuItemChecked(11, TRUE);
    if(FAILED(ec)) {
        return ec;
    }

    ec = m_pIMenu->SetMenuItemText(9, L"aaa");
    if(FAILED(ec)) {
        return ec;
    }

    ec = CMenu::New(&m_pIMenu2);
    if (FAILED(ec)) {
        prInt32f("Create menu2 failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIMenu2->Init(m_pIMenu, 2);
    if (FAILED(ec)) {
        prInt32f("Init Menu2 failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIMenu2->InsertMenuItem(0, 4, L"child");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu2->InsertMenuItem(1, 5, L"child2");
    if(FAILED(ec)) {
        return ec;
    }

    ec = CMenu::New(&m_pIMenu3);
    if (FAILED(ec)) {
        prInt32f("Create menu3 failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIMenu3->Init(m_pIMenu, 5);
    if (FAILED(ec)) {
        prInt32f("Init Menu3 failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIMenu3->InsertMenuItem(0, 6, L"other");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(1, 7, L"other2");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(2, 8, L"other3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(3, 9, L"other3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(4, 10, L"other3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(5, 11, L"other3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(6, 12, L"other3");
    if(FAILED(ec)) {
        return ec;
    }
    ec = m_pIMenu3->InsertMenuItem(7, 13, L"exit");
    if(FAILED(ec)) {
        return ec;
    }

    CMenu::AddItemClickCallback(m_pIMenu3,
                 this, &CMenuSam::OnClick);

    CMenu::AddClosedCallback(m_pIMenu,
                 this, &CMenuSam::OnClose);

    CMenu::AddPopupCallback(m_pIMenu2,
                 this, &CMenuSam::OnPopup);

    CForm::AddMouseDownCallback(m_pMainForm,
                 this, &CMenuSam::OnMouseDown);

///////////////  Exit Button
    ec = CButton::New(&m_pIBtnClose);
    if (FAILED(ec)) {
        prInt32f("Create ClodeButton failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIBtnClose->Init(0, L"Exit",
                0, 0, 80, 30, m_pMainForm);
    if (FAILED(ec)) {
        prInt32f("Init ClodeButton failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    CButton::AddClickCallback(m_pIBtnClose,
                 this, &CMenuSam::OnExit);

    m_pMainForm->Show();

    return NOERROR;
}

ECode CMenuSam::AtExit()
{
    return NOERROR;
}

ECode CMenuSam::OnClose(
        IMenu* pIObject)
{
    prInt32f("OnClose!!!!!!!!!!!!!!!\n");
    return NOERROR;
}

ECode CMenuSam::OnPopup(
        IMenu* pIObject)
{
    prInt32f("OnPopup!!!!!!!!!!!!!!!\n");
    return NOERROR;
}

ECode CMenuSam::OnClick(
        IMenu* pIObject,
        Int32 nIndex)
{
    if (nIndex == 13) {
        m_pMainForm->Close();
    }

    return NOERROR;
}

ECode CMenuSam::OnMouseDown(
        /* [in] */ IForm * pIObject,
        /* [in] */ Int32 nX,
        /* [in] */ Int32 nY,
        /* [in] */ InputMask enumButtons)
{
    m_pIMenu->Show(nX, nY);

    return NOERROR;
}

ECode CMenuSam::OnExit(
        /* [in] */ IButton* pIObject)
{
    m_pMainForm->Close();

    return NOERROR;
}

</pre>

<script>footer("KoreTide")</script>
</body>
</html>