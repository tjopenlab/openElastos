<!--==========================================================================-->
<!-- Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>Í¼ÐÎ¿Ø¼þIImagePanel</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>

<h2> IImagePanel ·¶Àý³ÌÐò </h2>

<pre>
//==========================================================================
// Copyright (c) 2000-2007,  Elastos, Inc.  All Rights Reserved.
//==========================================================================

<h3> CImgPanel.h </h3>
#include &quot;_CImgPanel.h&quot;
class CImgPanel : public _CImgPanel
{
public:
    CImgPanel();
    ~CImgPanel();

    CARAPI AtEntry(
        /* [in] */ EzArray<WString> argcv);

    CARAPI AtExit();

    CARAPI OnClickItem(
        /* [in] */ IImagePanel* pIObject,
        /* [in] */ Int32 nIndex);

    CARAPI OnClose(
        /* [in] */ IButton* pIObject);

private:
    IForm        * m_pMainForm;
    IImagePanel  * m_pIImagePanel;
    IButton      * m_pIBtnClose;
};

<h3> CImgPanel.cpp </h3>
#include &quot;CImgPanel.h&quot;
#include &quot;_CImgPanel.cpp&quot;
#include &lt;stdio.h&gt;

CImgPanel::CImgPanel()
{
    m_pMainForm = NULL;
    m_pIImagePanel = NULL;
    m_pIBtnClose = NULL;
}

CImgPanel::~CImgPanel()
{
    if (m_pMainForm) {
        m_pMainForm->Release();
    }

    if (m_pIImagePanel) {
        m_pIImagePanel->Release();
    }

    if (m_pIBtnClose) {
        m_pIBtnClose->Release();
    }
}

ECode CImgPanel::AtEntry(
    /* [in] */ EzArray<WString> argcv)
{
    ECode ec;
///////////  form
    ec = CForm::New(&m_pMainForm);
    if (FAILED(ec)) {
        prInt32f("Create Form failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pMainForm->Init(FormStyle_Gradient, L"MAIN",
                    0, 0, 240, 320, NULL);
    if (FAILED(ec)) {
        prInt32f("Init Form failed, the ec = 0x%08x\n", ec);
        return ec;
    }

///////////////////     m_pIImagePanel          dial panel
    ec = CImagePanel::New(&m_pIImagePanel);
    if (FAILED(ec)) {
        prInt32f("Create ImagePanel failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIImagePanel->Init(ImagePanelStyle_FullImage, L"Dial",
                            0, 65, 240, 144,  m_pMainForm);
    if (FAILED(ec)) {
        prInt32f("Init ImagePanel failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    IImage* pIFImg;

    ec = CImage::New(&pIFImg);
    if (FAILED(ec)) {
        prInt32f("CreateImage failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = pIFImg->InitFromFile(L"dialfimg.jpg");
    if (FAILED(ec)) {
        prInt32f("Init Image failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    IImage* pIBImg;
    ec = CImage::New(&pIBImg);
    if (FAILED(ec)) {
        prInt32f("CreateImage failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = pIBImg->InitFromFile(L"dialbimg.jpg");
    if (FAILED(ec)) {
        prInt32f("Init Image failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIImagePanel->SetImage(pIFImg, pIBImg);
    if (FAILED(ec)) {
        prInt32f("SetImage failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    pIFImg->Release();
    pIBImg->Release();

    ImagePanelRect      rects[12];
    Int32 i = 0;
    for(i = 0; i < 12; i++)  {
        Int32 row = i / 3;
        Int32 cloumn = i % 3;
        rects[i].nLeft              = 10 + cloumn * (60 + 20) ;
        rects[i].nTop               = 6 + row * (26 + 8);
        rects[i].nRight             = rects[i].nLeft + 60;
        rects[i].nBottom            = rects[i].nTop + 26;
        rects[i].nLocX              = 10 + cloumn * (60 + 20) ;;
        rects[i].nLocY              = 6 + row * (26 + 8);
        rects[i].nIndex             = i;
        rects[i].dwStyle            = 0;
        rects[i].bEnabled           = TRUE;
        rects[i].bChecked           = TRUE;
        rects[i].bVisible           = TRUE;

    }

    ec = m_pIImagePanel->SetImageRect(12, rects);
    if (FAILED(ec)) {
        prInt32f("SetImageRect failed, the ec = 0x%08x\n", ec);
        return ec;
    }
    CImagePanel::AddItemClickCallback(m_pIImagePanel,
                 this, &CImgPanel::OnClickItem);

///////////////  Exit Button
    ec = CButton::New(&m_pIBtnClose);
    if (FAILED(ec)) {
        prInt32f("Create CloseButton failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    ec = m_pIBtnClose->Init(0, L"Exit", 0, 290, 80, 30,  m_pMainForm);
    if (FAILED(ec)) {
        prInt32f("Init CloseButton failed, the ec = 0x%08x\n", ec);
        return ec;
    }

    CButton::AddClickCallback(m_pIBtnClose,
                 this, &CImgPanel::OnClose);

    m_pMainForm->Show();

    return NOERROR;
}

ECode CImgPanel::AtExit()
{
    return NOERROR;
}

ECode CImgPanel::OnClose(
        /* [in] */ IButton* pIObject)
{
    m_pMainForm->Close();

    return NOERROR;
}

ECode CImgPanel::OnClickItem(
        /* [in] */ IImagePanel* pIObject,
        /* [in] */ Int32 nIndex)
{
    ECode ec;
    Boolean  bEnabled;

    ec = m_pIImagePanel->IsItemEnabled(nIndex, &bEnabled);
    if (FAILED(ec)) {
        return ec;
    }
    if (bEnabled) {
        ec = m_pIImagePanel->SetItemEnabled(nIndex, FALSE);
        if (FAILED(ec)) {
            return ec;
        }
    }

    prInt32f("OnClickItem:%d!\n", nIndex);

    return NOERROR;
}

</pre>

<script>footer("KoreTide")</script>
</body>
</html>