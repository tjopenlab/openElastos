<!--==========================================================================-->
<!-- Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>UDF和触发器结合使用的示例程序</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>
<h3>UDF和触发器结合使用的示例程序</h3>
    <p>下面的示例程序同时应用了触发器（Trigger）和用户定义函数（UDF）的概念：定义了一个UDF，
用于输出插入到表中的记录信息，并创建了一个触发器，使输出成为触发程序，这样每当用户向表中插入记录时，都会自动触发输出，而不需要用户来控制输出的时机，类似于回调机制。</p>
<p>首先，来看UDF的实现：</p>
<pre class=code>
udf.cpp:
#include &lt;sqlite3.h&gt;
#include &lt;sqlite3ext.h&gt;
#include &lt;stdio.h&gt;

SQLITE_EXTENSION_INIT1

//UDF的实现程序，注意参数的形式必须如此
static void print(sqlite3_context *p, int nArg, sqlite3_value **apArg)
{
    //输出记录信息
    for (int i = 0; i < nArg; ++i) {
        wchar_t *s = (wchar_t *)sqlite3_value_text16(apArg[i]);
        printf("%S", s);
        if (i < nArg - 1)
            printf(", ");
    }
    printf("\n");
}

static int my_init(sqlite3 *db)
{
    //创建UDF
    int rc = sqlite3_create_function(db, "print", -1, SQLITE_UTF16, 0, print, 0, 0);
    return rc;
}

extern "C"
//外部库的入口
int sqlite3_extension_init(sqlite3 *db, char **pzErrMsg, const sqlite3_api_routines *pApi)
{
    SQLITE_EXTENSION_INIT2(pApi);
    return my_init(db);
}
</pre>
<p>将上面的程序导出为udf.dll，然后来看数据库的主程序：</p>
<pre class=code>
tri_udf.cpp:
#include &lt;elastos.h&gt;
#include &lt;ElDatabase.h&gt;

using namespace Elastos;

void PrintErrorMsg(WString errMsg, ECode ec)
{
    WStringBuf_<80> wstrBuf;
    wstrBuf << "!!! " << errMsg << " !!!ec = 0x";
    wstrBuf.Append(ec, MakeNumberFormat(NumberFormat_BigHex, 8, 8));
    CConsole::WriteLine(wstrBuf);
}

ECode ElastosMain(const BufferOf<WString>& args)
{
    ECode ec = NOERROR;
    IDatabase* pDatabase = NULL;
    IStatement* pStatement = NULL;

    //新建数据库samples.db
    ec = CDatabase::New(L"samples.db", &pDatabase);
    if (FAILED(ec)) {
        PrintErrorMsg(L"CDatabase::New() failed", ec);
        goto BailOut;
    }

    //载入外部库udf.dll,入口为sqlite3_extension_init
    ec = pDatabase->LoadUserExtension(L"udf.dll", L"sqlite3_extension_init");
    if (FAILED(ec)) {
        PrintErrorMsg(L"IDatabase::LoadUserExtension() failed", ec);
        goto BailOut;
    }

    // 获取执行SQL语句的接口
    ec = pDatabase->CreateStatement(&pStatement);
    if (FAILED(ec)) {
        PrintErrorMsg(L"IDatabase::CreateStatement() failed", ec);
        goto BailOut;
    }

    //创建students表，该表包含四个字段：number, name, sex, age
    ec = pStatement->Execute(
            L"CREATE TABLE students"
            L"(number CHAR(10), name CHAR(10), sex CHAR(6), age INT);");
    if (FAILED(ec)) {
        PrintErrorMsg(L"IStatement::Execute(CreateTable) failed", ec);
        pStatement->Release();
        goto BailOut;
    }

    //创建触发器students_log：每当有记录被插入到表中之后，将执行触发程序，即输出新插入记录的name和number字段
    ec = pStatement->Execute(
            L"CREATE TRIGGER students_log AFTER INSERT ON students "
            L"BEGIN select print(new.name, new.number); END");
    if (FAILED(ec)) {
        PrintErrorMsg(L"IStatement::Execute(CreateTrigger) failed", ec);
        pStatement->Release();
        goto BailOut;
    }

    // 向表中插入10条记录
    ec = pStatement->ExecuteBatch(
        L"INSERT INTO students VALUES('00001', 'Mary', 'female', 15); "
        L"INSERT INTO students VALUES('00002', 'John', 'male', 16); "
        L"INSERT INTO students VALUES('00003', 'Mike', 'male', 15); "
        L"INSERT INTO students VALUES('00004', 'Kevin', 'male', 17); "
        L"INSERT INTO students VALUES('00005', 'Alice', 'female', 14); "
        L"INSERT INTO students VALUES('00006', 'Susan', 'female', 16); "
        L"INSERT INTO students VALUES('00007', 'Christina', 'female', 15); "
        L"INSERT INTO students VALUES('00008', 'Brian', 'male', 16); "
        L"INSERT INTO students VALUES('00009', 'Dennis', 'male', 14); "
        L"INSERT INTO students VALUES('00010', 'Daphne', 'female', 18);",
        NULL);
    if (FAILED(ec)) {
        ECode error;
       WStringBuf_<MAX_ERROR_MESSAGE> message;
        pStatement->GetErrorCode(&error);
        pStatement->GetErrorMessage(&message);

        PrintErrorMsg(message, error);
        pStatement->Release();
        goto BailOut;
    }
    CConsole::WriteLine("10 records are inserted.");
    pStatement->Release();

BailOut:
    if (pDatabase) {
        pDatabase->Close();
        Boolean closed = false;
       ec = pDatabase->IsClosed(&closed);
        if (SUCCEEDED(ec) && closed) {
            CConsole::WriteLine("Database is closed.");
        }
        pDatabase->Release();
    }
    CProcess::Exit(ec);
    return 0;
}
</pre>
<p>编译执行此程序，输出如下：</p>
<pre class=code>
Mary, 00001
John, 00002
Mike, 00003
Kevin, 00004
Alice, 00005
Susan, 00006
Christina, 00007
Brian, 00008
Dennis, 00009
Daphne, 00010
10 records are inserted.
Database is closed.
</pre>
<script>footer("chinese")</script>
</body>
</html>

