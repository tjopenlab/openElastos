<!--==========================================================================-->
<!-- Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>文件系统使用范例</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>

<h2>文件系统使用范例</h2>

    <p>拥有C编程经验的用户一定对C运行库（C Runtime Function）中提供的文件操作并不陌生，如fopen，fclose，_mkdir等，这些函数可以方便地实现关于文件和目录的访问和操作。与此同时，这些访问和操作也可通过其他途径来完成，比如在.NET的System.IO命名空间中，提供了File，FileInfo，Directory，DirectoryInfo，FileStream等类，使用它们同样能方便有效地操作文件和目录。</p>

    <p>在Elastos操作系统中，同样提供了两种方式实现对文件和目录的访问和操作。一种是：使用C运行库中提供的与文件、目录操作相关的标准库函数（比如fopen等）；另一种是直接使用CAR实现的文件系统构件库ktfs.dll，利用文件系统服务机制，通过接口调用实现对文件和目录的操作。</p>
    <p>本章中，我们重点介绍如何使用Elastos构件化文件系统实现对文件和目录的操作。通过学习以下范例，您会发现使用ktfs.dll访问文件系统比使用C运行库更简便更有效。</p>

<table>
    <thead>
        <td> 范例编号 </td><td> 范例描述 </td>
    </thead>

    <tr>
        <td>
            <a class="style1" href="FileSystemSamples\Sample1.htm">Sample1</a>
        </td>
        <td>
            本程序运用了一些基本的文件操作，包括查看文件的大小、操作时间等信息，以及读写操作。
        </td>
    </tr>
    <tr>
        <td>
            <a class="style1" href="FileSystemSamples\Sample2.htm">Sample2</a>
        </td>
        <td>
            本程序运用了一些基本的目录操作，包括目录的查找、创建、删除、更名、获取目录结构信息等。
        </td>
    </tr>
</table>

<script>footer("c_KoreTide")</script>
</body>
</html>
