<!--==========================================================================-->
<!-- Copyright (c) 2000-2008,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>高级数据过滤 </title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>
<h2>组合WHERE子句 </h2>
    <p>为了进行更强的过滤控制，SQL允许给出多个WHERE子句。这些子句可以两种方式使用，即：以AND子句的方式或OR子句的方式使用。 </p>
<h3>  AND操作符 </h3>
    <p>为了通过不止一个列进行过滤，可使用AND操作符给WHERE子句附加条件。下面的代码给出了一个例子:  </p>
    <p>SELECT prod_id,prod_price,prod_name </p>
    <p>FROM Products</p>
    <p>WHERE vend_id='DLL01' AND prod_price&lt;=4;</p>
    <p>Output:</p>
    <table>
    	<thead>
    	<td>prod_id</td>
    	<td>prod_price</td>
    	<td>prod_name</td>
    	</thead>
    	<tr>
    		<td>BNBG02</td>
    		<td>3.4900</td>
    		<td>Bird bean bag toy</td>
    	</tr>
    	<tr>
    		<td>BNBG01</td>
    		<td>3.4900</td>
    		<td>Fish bean bag toy</td>
    	</tr>
    	<tr>
    		<td>BNBG03</td>
    		<td>3.4900</td>
    		<td>Rabbit bean bag toy</td>
    	</tr>
    </table>
    <p>此SQL语句检索由供应商DLL01制造且价格小于等于4美元的所有产品的名称和价格。这条SELECT语句中的WHERE子句包含两个条件，并且用 AND关键字联结它们。AND指示数据库管理系统软件只返回满足所有给定条件的行。如果某个产品由供应商DLL01制造，但它的价格高于4美元，则不检索它。类似，如果产品价格小于4美元，但不是由指定供应商制造的也不被检索。 </p>
<h3>OR操作符 </h3>
    <p>OR操作符与AND操作符不同，它指示数据库管理系统软件检索匹配任一条件的行。事实上，许多DBMS在OR WHERE子句的第一个条件满足的情况下，不再计算第二个条件（在第一个条件满足时，不管第二个条件是否满足，相应的行都将被检索出来）。请看如下的SELECT语句： </p>
    <p>SELECT prod_name,prod_price </p>
    <p>FROM Products</p>
    <p>WHERE vend_id='DLL01' OR vend_id='BRS01';</p>
    <p>Output:</p>
    <table>
    	<thead>
    	<td>prod_name</td>
    	<td>prod_price</td>
    	</thead>
    	<tr>
    		<td>Fish bean bag toy</td>
    		<td>3.4900</td>
    	</tr>
    	<tr>
    		<td>Bird bean bag toy</td>
    		<td>3.4900</td>
    	</tr>
    	<tr>
    		<td>Rabbit bean bag toy</td>
    		<td>3.4900</td>
    	</tr>
    	<tr>
    		<td>8 inch teddy bear</td>
    		<td>5.9900</td>
    	</tr>
    	<tr>
    		<td>12 inch teddy bear</td>
    		<td>8.9900</td>
    	</tr>
    	<tr>
    		<td>18 inch teddy bear</td>
    		<td>11.9900</td>
    	</tr>
    	<tr>
    		<td>Raggedy Ann</td>
    		<td>4.9900</td>
    	</tr>
    </table>
    <p>此SQL语句检索由任一个指定供应商制造的所有产品的产品名和价格。OR操作符告诉DBMS匹配任一条件而不是同时匹配两个条件。如果这里使用的是AND操作符，则没有数据返回。 </p>
<h3>计算次序 </h3>
    <p>WHERE可包含任意数目的AND和OR操作符。允许两者结合以进行复杂和高级的过滤。但是，组合AND和OR带来了一个有趣的问题。为了说明这个问题，来看一个例子。假如需要列出价格为10美元（含）以上且由DLL01或BRS01制造的所有产品。下面的SELECT语句使用AND和OR操作符的组合建立了一个WHERE子句： </p>
    <p>SELECT prod_name,prod_price </p>
    <p>FROM Products</p>
    <p>WHERE vend_id='DLL01' OR vend_id='BRS01' AND prod_price&gt;=10;</p>
    <p>Output:</p>
    <table>
		<thead>
			<td>prod_name</td>
			<td>prod_price</td>
		</thead>
		<tr>
			<td>Fish bean bag toy</td>
			<td>3.4900</td>
		</tr>
		<tr>
			<td>Bird bean bag toy</td>
			<td>3.4900</td>
		</tr>
		<tr>
			<td>Rabbit bean bag toy</td>
			<td>3.4900</td>
		</tr>
		<tr>
			<td>18 inch teddy bear</td>
			<td>11.9900</td>
		</tr>
		<tr>
			<td>Raggedy Ann</td>
			<td>4.9900</td>
		</tr>
	</table>
<p>请看上面的结果。返回的行中有4行价格小于10美元，显然，返回的行未按预期的进行过滤。为什么会这样呢？原因在于计算的次序。SQL（像多数语言一样）在处理OR 操作符前，优先处理AND操作符。当SQL看到上述WHERE子句时，它理解为由供应商BRS01制造的任何价格为10美元以上的产品，或者由供应商 DLL01制造的任何产品，而不管其价格如何。换句话说，由于AND在计算次序中优先级更高，操作符被错误地组合了。此问题的解决方法是使用圆括号明确地分组相应的操作符。请看下面的SELECT语句及输出： </p>
    <p>SELECT prod_name,prod_price </p>
    <p>FROM Products</p>
    <p>WHERE (vend_id='DLL01' OR vend_id='BRS01') AND prod_price&gt;=10;</p>
<p>Output:</p>
    <table>
		<thead>
			<td>prod_name</td>
			<td>prod_price</td>
		</thead>
		<tr>
			<td>18 inch teddy bear</td>
			<td>11.9900</td>
		</tr>
    </table>
    <p>这条SELECT语句与前一条的唯一差别是，这条语句中，前两个条件用圆括号括了起来。因为圆括号具有较AND或OR操作符高的计算次序，DBMS首先过滤圆括号内的OR条件。这时，SQL语句变成了选择由供应商DLL01或BRS01制造的且价格都在10美元（含）以上的任何产品，这正是我们所希望的。 </p>
<h3>IN操作符 </h3>
    <p>IN操作符用来指定条件范围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清单，全都括在圆括号中。下面的例子说明了这个操作符： </p>
    <p>SELECT prod_name,prod_price </p>
    <p>FROM Products</p>
    <p>WHERE vend_id IN ('DLL01','BRS01')</p>
    <P>ORDER BY proc_name;</P>
    <p>Output:</p>
    <table>
		<thead>
			<td>prod_name</td>
			<td>prod_price</td>
		</thead>
		<tr>
			<td>12 inch teddy bear</td>
			<td>8.9900</td>
		</tr>
		<tr>
			<td>18 inch teddy bear</td>
			<td>11.9900</td>
		</tr>
		<tr>
			<td>8 inch teddy bear</td>
			<td>5.9900</td>
		</tr>
		<tr>
			<td>Bird bean bag toy</td>
			<td>3.4900</td>
		</tr>
		<tr>
			<td>Fish bean bag toy</td>
			<td>3.4900</td>
		</tr>
		<tr>
			<td>Rabbit bean bag toy</td>
			<td>3.4900</td>
		</tr>
		<tr>
			<td>Raggedy Ann</td>
			<td>4.9900</td>
		</tr>
	</table>
<p>此SELECT语句检索供应商DLL01和BRS01制造的所有产品。IN操作符后跟由逗号分隔的合法值清单，整个清单必须括在圆括号中。</p>
    <p>为什么要使用IN操作符？其优点为：</p>
    <p>&nbsp;&nbsp;&nbsp;在使用长的合法选项清单时，IN操作符的语法更清楚且更直观。 </p>
    <p>&nbsp;&nbsp;&nbsp;在使用IN时，计算的次序更容易管理（因为使用的操作符更少）。 </p>
    <p>&nbsp;&nbsp;&nbsp;IN操作符一般比OR操作符清单执行更快。 </p>
    <p>&nbsp;&nbsp;&nbsp;IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建立WHERE子句。 </p>
    <p>主键通常定义在表的一列上，但这并不是必需的，也可以一起使用多个列作为主键。在使用多列作为主键时，上述条件必须应用到构成主键的所有列，所有列值的组合必须是唯一的（但单个列的值可以不唯一）。 </p>
<h3>NOT操作符 </h3>
    <p>WHERE子句中的NOT操作符有且只有一个功能，那就是否定它之后所跟的任何条件。因为NOT从不自己使用（它总是与其他操作符一起使用），它的语法与其他操作符有所不同。与其他操作符不一样，NOT可以用在要过滤的列前，而不仅是在其后。 </p>
    <p>下面的例子说明NOT的使用。为了列出除DLL01之外的所有供应商制造的产品，可编写如下的代码： </p>
    <p>SELECT prod_name </p>
    <p>FROM Products</p>
    <p>WHERE NOT vend_id='DLL01'</p>
    <P>ORDER BY proc_name;</P>
    <p>Output:</p>
    <p>prod_name</p>
	<p>--------------------</p>
	<p>12 inch teddy bear</p>
	<p>18 inch teddy bear</p>
	<p>8 inch teddy bear</p>
	<p>King doll</p>
	<p>Queen doll</p>
<script>footer("chinese")</script>
</body>
</html>