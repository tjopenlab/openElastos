<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->
<html>
	<head>
		<meta http-equiv=Content-Type content="text/html; charset=GB2312">
		<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
    <script src="/xsl/docstyles.js"></script>
		<title>background</title>
	</head>

	<body>
		<h2>CAR构件技术的产生  </h2>
			  <p>80年代以来，程序设计技术有了很大的发展，为大规模的软件协同开发以及软件标准化、软件共享、软件运行安全机制等提供了理论基础。</p>
        <p>CAR构件技术是在总结面向对象编程、面向构件编程技术的发展历史和经验，为更好地支持面向以Web Service为代表的下一代网络应用软件开发而发明的。</p>
    <h3>面向对象程序设计</h3>  
        <p>面向对象程序设计思想是将软件封装为一个个的对象，并通过对象间的继承和多态提高软件的复用性。</p>
        <p>通过对软件模块的封装，使其相对独立，从而使复杂的问题简单化。面向对象程序设计强调的是对象的封装，但模块（对象）之间的关系在编译的时候被固定，模块之间的关系是静态的，在程序运行时不可改变模块之间的关系，就是说在运行时不能换用零件。其代表是C++语言所代表的面向对象程序设计。</p>
        <center> <img src="images/oo.JPG"/> </center>
        <center>图3-1 面向对象程序设计模型，模块之间的关系固定 </center>
        
    <h3>面向构件程序设计 </h3>
        <p>面向对象程序设计较好的解决了源代码复用的问题，但是无法解决目标代码级的复用。</p>
        <p>构件化程序设计模型建立在面向对象技术的基础之上，是完全面向对象的，提供了动态构造部件模块（运行中可以构造部件）的机制。构件在运行时动态装入，是可换的。面向构件程序设计使得不同软件开发商提供的构件模块（软件对象）可以相互操作使用。构件之间的连接和调用要通过标准的协议来完成，构件化程序设计模型强调协议标准，需要提供各厂商都能遵守的协议体系。就像公制螺丝的标准一样，所有符合标准的螺丝和螺母都可以相互装配。其代表是COM技术。 </p>
        <center><img src="images/com.JPG"/></center>
        <center>图3-2 面向构件程序设计模型，运行时构件可替换</center>
   
	  <h3>CAR构件技术的产生</h3>
	      <p>CAR构件技术是在COM的基础上进一步考虑异构环境下的软件复用问题。 </p>
	      <p>由于因特网的普及，构件可来自于网络，系统要解决自动下载，安全等问题。因此，系统中需要根据构件的自描述信息自动生成构件的运行环境。CAR技术更加强调构件的自描述和构件运行环境的透明性，是网络时代程序设计的重要技术。 </p>
  
   <p> CAR构件技术是在总结面向对象编程、面向构件编程技术的发展历史和经验后，为更好地支持面向以Web Service（WEB服务）为代表的下一代网络应用软件开发而发明的。为了在资源有限的嵌入式系统中实现面向中间件编程技术，同时又能得到C/C++的运行效率，CAR没有使用JAVA和.NET的基于中间代码――虚拟机的机制，而是采用了C++语言，同时用Elastos SDK提供的工具直接生成运行于“CAR构件运行平台”的二进制代码的机制。用C++编程实现构件技术，使得更多的程序员能够充分运用自己熟悉的编程语言知识和开发经验，很容易掌握面向构件、中间件编程的技术。在不同操作系统上实现的CAR构件运行平台，可以使CAR构件的二进制代码实现跨操作系统平台兼容。</p>
	
	</body>
		
</html>