<!--==========================================================================-->
<!-- Copyright (c) 2000-2009,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->
<html>
	<head>
		<meta http-equiv=Content-Type content="text/html; charset=GB2312">
		<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
    <script src="/xsl/docstyles.js"></script>
		<title>car_technology</title>
	</head>

	<body>
    <h2>CAR的技术特性 </h2>
    <h3>构件自描述 </h3>
        <p>构件自描述简单来说就是构件能够描述自己的数据信息，它通过元数据的方式来实现。 </p>
        <p>元数据(metadata)，是一种描述数据的数据(data about data)。CAR构件中的元数据主要包括模块信息（ModuleInfo）,接口信息（InterfaceInfo），类信息（ClassInfo）等。这些信息是在CAR文件编译后得到，是CAR文件的二进制表述。 </p>
        <p>在实例化某个构件类时，传入构件类的ClassID,CAR构件加载程序会根据其中的uunm自动去加载相应的CAR构件，然后根据CAR构件的元数据创建出构件对象。不象MSCOM,所有的COM对象的CLSID都是通过注册表来管理，客户必须先安装构件，注册CLSID，而CAR构件对本身有足够的自描述能力，通过CAR构件运行平台使用CAR构件服务，直接使用即可，根本无需知道软件（CAR构件）的存在。 </p>
        <p>在CAR中，接口的元数据描述了接口的函数布局和函数参数属性,也就是服务和调用之间的关系。有了这种描述，不同构件之间的调用才成为可能，构件的远程化，进程间通讯，自动生成Proxy和Stub及自动Marshalling、Unmarshalling才能正确地进行。 </p>
    <h3>可重用性</h3>
        <p>与C++类在源代码级别的重用不同，CAR构件的重用是建立在对二进制代码重用的基础上的。具体包括包容（containment）、聚合（aggregation）以及二进制继承三种重用模型，其本质也都是在一个构件中对另外一个构件的使用。 </p>
    <h3>面向方面的编程支持 </h3>
        <p>AOP是一个基于构件技术的面向方面的软件开发模型。在目前的面向对象的编程模式中，仅仅用类的思想来分析和实现软件系统，不能有效地表示软件系统的关注点。AOP将“关注点”封装在“方面”中，将这些操作与业务逻辑分离，使程序员在编写程序时可以专注于业务逻辑的处理，而利用AOP将贯穿于各个模块间的横切关注点自动耦合进来。由此能够改善系统逻辑、减低软件开发难度、提高软件开发质量和提高软件重用性。 </p>    
        <p>基于CAR的AOP机制使用户能够在完全不用修改源代码的情况下简单而方便的动态聚合两个或多个CAR构件类，从而生成一个具有两个或多个CAR构件类所有接口实现的新构件类。比如一个或多个功能构件与一个方面构件聚合，可以使不同的功能构件在某一方面上具有相同的行为和属性。CAR的AOP技术由方面类（Aspect）、动态聚合（Dynamic Aggregation）和上下文环境类 (context)组成。Aspect对象是实现动态聚合的必要条件，动态聚合是上下文环境类实现的基础。 </p>
    <h3>远程过程调用 </h3>
        <p>当客户端和服务器端所在地址空间不同时，客户端的进程要调用服务器端的构件的服务，属于远程构件调用。CAR构件技术支持远程接口调用，通过调用数据的列集\散集技术进行不同地址空间的数据交互。构件服务和构件服务调用者可以处于操作系统的不同空间，而调用者可以如同在同一地址空间里面使用构件一样的透明的进行远程接口调用，实现了向用户屏蔽了底层使用的标准的列集\散集过程。 </p>   
    <h3>命名服务机制 </h3>
        <p>CAR命名服务机制提供一种发布、获取、使用CAR构件的方法。命名服务通过简单友好的系统API函数，为系统服务以及用户构件提供了一套完整的CAR构件使用流程，具有良好的扩展性，并支持基于构件的动态更新和升级。用户程序通过字符串获取相关服务，而服务则可由系统以及其它用户程序提供，这种将服务和服务使用者隔离的方式减小了代码的耦合性，极大地增强了代码的可扩展性和安全性，同时也最大地发挥了系统的功能。 </p>   
        <p>命名服务包含两个部分：服务器端和客户端。在服务器端，用户获得某个构件接口指针（可以是用户自己的构件，也可以是用户远程获得的构件指针）后，通过CSystem::RegisterRunningObject函数向内核注册一个命名服务，用户选择合适的时间注销命名服务并释放资源；在客户端，其它用户可以通过CSystem::FindRunningObject API函数获得相应的构件服务并应用。 </p>
        <p>相对于命名服务所获得的构件服务来说，命名服务也是一个普通的构件使用者，提供命名服务的程序可以选择在一个合适的时间点释放该构件服务指针。所有适应于CAR构件生命周期管理的操作和语义也适应于命名服务。 </p>
        <p>如果相关构件服务（命名服务）退出，命名服务就不再有效，其它再试图通过命名服务获取相关构件服务的程序将返回错误。相关构件服务动态更新或者升级并不影响其它通过命名服务而获取该服务的程序。无需改动和重新编译，该程序依然可以正常地工作。 </p>
    <h3>事件回调机制 </h3>
        <p>事件回调机制是CAR技术的重要模型之一，包括异步回调（callbacks）和同步回调(delegates)两种。</p>
        <p>CAR构件对象支持两种接口：一种是普通接口（interface），它的成员函数由服务端自己实现；另一种是回调接口（callbacks/delegates），它的每一个成员函数代表一个事件，处理每个事件的函数由客户端实现。当特定事件发生时，构件对象产生一个事件，并通知客户端程序，客户程序可以处理这个事件。 </p>
    <h3>构件缓存机制 </h3>
        <p>为了提高访问网页的速度，IE浏览器会采用累积式加速的方法，将你曾经访问的网页内容（包括图片以及cookie文件等）存放在电脑里。这个存放空间，就是IE缓存。以后每次访问网站时，IE会首先搜索这个目录，如其中有已访问过的内容，那IE就不必从网上下载，而直接从缓存中调出来。 </p>
        <p>CAR构件缓存机制便是在IE缓存机制的思想基础上建立的。CCM（CAR Cache Manager，CAR高速缓存管理）是一套构件化的缓存管理机制，它主要是为了支持Elastos网络操作系统的构件自滚动运行。</p>
    <h3>构件版本控制</h3>
        <p>在Elastos系统中，存在一个CAR构件的版本管理器，这个版本管理器自身也是一个CAR构件，它与通常意义下的CAR构件的区别在于：此构件的功能是专门用来管理其它CAR构件版本的。 </p>
        <p>在Elastos操作系统启动阶段，首先是启动一个微内核系统，然后根据配置文件判断是否加载一些功能性模块，这些模块大多以CAR构件的形式存在于物理介质中，如果仅仅需要完成非常简单的系统功能，无需加载CAR构件，则此时的构件版本管理器也没有加载到内存中。如果在配置文件中有加载其它CAR构件的要求，或者在系统运行中有引用其它CAR构件的需要，此时系统首先加载CAR构件版本管理器，然后根据构件版本管理器中的规则来加载其它的功能性构件。 </p>
        <p>构件版本管理器作为Elastos系统中的一个特殊性系统管理构件，它自身当然也有升级更新的不同版本，但是，系统始终是加载并使用最新的版本。事实上，在这一点上并不存在兼容性的问题，而是直接用新的版本替换老的版本即可。 </p>
    <h3>点击运行机制 </h3>
        <p>点击运行是指在网络环境之下，软件无需事先在本地的计算机上安装，而是在需要时通过点击网络中的相关主题或对象（如按钮、图片、滚动条等）来实现动态加载构件，从而为相关应用提供合适的服务。点击运行的核心思想在于系统对应用服务支持的高度自动化。 </p>
    <h3>CAR Web服务 </h3>
        <p>CAR网络服务技术是一种构建于CAR构件运行平台之上的将运行的构件实例发布为网络服务的方法。任何的CAR构件实例，都可以通过CAR网络服务运行环境发布到互联网，通过WWW标准网络服务协议（SOAP、WSDL、UDDI等）被远程访问。目前实现的CAR网络服务运行环境是一个内建了CAR构件网络服务代理功能的简单HTTP服务器，采用构件化的体系结构，支持的协议包括HTTP 1.1、SOAP 1.1和WSDL 1.0。其中CAR构件网络服务代理的主要功能包括解释、转发客户端的SOAP远程调用并返回执行结果，为运行的构件实例自动生成对应的WSDL描述并作为HTTP GET请求的结果返回等。经过验证，目前实现的CAR 网络服务运行环境发布的网络服务可以通过Microsoft .NET、Microsoft SOAP Toolkit、gSOAP等第三方工具访问。 </p>
	</body>
		
</html>