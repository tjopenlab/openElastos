<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->
<html>
	<head>
		<meta http-equiv=Content-Type content="text/html; charset=GB2312">
		<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
    <script src="/xsl/docstyles.js"></script>
		<title>carIntroduce</title>
	</head>
	<body>
  <h2>CAR构件技术简介 </h2>
    <h3>CAR及其标准</h3>
      <p>Elastos中CAR（即Component Assembly Runtime）的含义是“基于CPU指令集的软件零部件运行单元”，简单理解就是“软件零部件运行单元”。从字面上理解，CAR就是在运行时对软件构件进行组装并最终完成预计功能的一种软件技术。 </p>
      <p>在Elastos中，Component Assembly包含了两层含义：（1）软件零件，特指“目标代码单元”。在CAR编程规范中就是DLL，也可以是JAVA或C#中的目标代码文件；（2）软件部件，是软件零件的集合。一般是个“半成品”，通过XML或脚本语言包装成为“产品”，也可以是个“产品”。软件部件不但包含一组DLLs（也可以是单个DLL），还包含了装箱单、数字签名、下载压缩包、元数据信息等打包之后的信息，类似于JAVA里面的JAR文件、Windows里面的CAB文件等。 </p>
      <p>CAR标准是一个说明如何建立可动态互变组件的规范。简单来说：CAR标准是关于如何建立构件以及如何通过构件组建应用程序的一个规范。它提供了客户和组件应遵循的一些标准。 </p>
      <p>CAR标准包括规范和实现两大部分，规范部分定义了构件和构件之间（如CAR构件、JAVA构件等之间）通信的机制，这些规范不依赖于任何特定的语言和操作系统，只要按照该规范，任何语言都可使用。因此，CAR标准的实现可以有多种方式。Elastos操作系统为CAR规范的具体实现提供了一些核心服务。 </p>
  <h3>CAR与COM </h3>
      <p>CAR技术在很大程度上借鉴了微软COM（Component Object Model，构件对象模型）的思想，最初CAR是兼容COM的，但是和COM相比，CAR删除了COM中过时的约定，禁止用户定义COM的非自描述接口；完备了构件及其接口的自描述功能，实现了对COM的扩展；对COM的用户界面进行了简化包装，可以说CAR是微软COM的一个子集，同时又对微软的COM进行了扩展，在Elastos SDK工具的支持下，使得高深难懂的构件编程技术很容易被C/C++程序员理解并掌握，因此CAR最初称之为ezCOM，其中“ez”源自与英文单词“easy”，恰如其分地反映了这一特点。编写一个.cdl文件，CDL即构件定义语言，对应于微软的IDL（接口定义语言），然后将它转换成微软的.idl文件，最后用MIDL（微软的IDL编译器）进行编译生成相应的代码。 </p>
      <p>目前的CAR技术已经不再保持与COM兼容，也不再使用微软的MIDL编译器，而是使用自己的工具carc，lube和cppvan。例如，首先编写一个.car文件，定义构件模块中的构件类、接口以及接口方法等信息，使用emake命令，实际上是调用编译器carc.exe，编译生成代码框架，填写完实现代码后再使用emake命令编译生成.dll文件，该文件的资源段中包含了元数据，而COM是没有的，这个编译生成代码框架的过程以及如何填写实现代码在后面的章节中有详细的说明与示例。利用Elastos IDE工具将使得用户对这些复杂问题的把握变得容易。 </p>
 	<h3>Elastos系统中的CAR构件技术</h3>
        <p>Elastos系统中的CAR构件技术包括两个方面： </p>
        <h4>1)elastos系统对car构件技术的支持（即构件运行平台） </h4>
        <p>“Elastos构件运行平台”提供了一套符合CAR规范的系统服务构件及支持构件相关编程的API函数，实现并支持系统构件及用户构件相互调用的机制，为CAR构件提供了编程运行环境。Elastos构件运行平台在不同操作系统上有不同的实现，符合CAR编程规范的应用程序通过该平台实现二进制级跨操作系统平台兼容。在Windows 2000、WinCE、Linux等其他操作系统上，Elastos构件运行平台屏蔽了底层传统操作系统的具体特征，实现了一个构件化的虚拟操作系统。在Elastos构件运行平台上开发的应用程序，可以不经修改、不损失太多效率、以相同的二进制代码形式，运行于传统操作系统之上。 </p>
        <p>CAR技术由操作系统内核来实现，可以充分利用内核中的线程调度、跨进程通讯、软件装卸、服务定位等设施对CAR构件提供高效、可靠的服务。同时内核本身的程序实现也可因利用CAR技术而变得更加模块化，从而加强对内核的软件工程管理。 </p>
        <h4>2)elastos系统中利用car构件技术开发的模块 </h4>
        <p>CAR构件技术简化了构件的开发过程，编写CAR文件后用CAR编译器编译便可生成基本的代码框架，开发人员在此基础上开发出自己的构件为客户端提供服务，提高了构件开发的速度及质量。Elastos操作系统正是基于这样的思路实现的。CAR的编程思想是Elastos技术的精髓，它贯穿于整个技术体系的实现中。Elastos中的操作系统内核、Elastos构件运行平台提供的构件库，都是用CAR技术实现的。内核与CAR技术运行环境的紧密结合，为Elastos的“灵活内核”体系结构提供有力的支持，高效率地实现了全面面向构件技术的新一代操作系统。 </p>
        <p>虽然CAR技术会增加内核代码量，但脱开应用一味强调内核大小并没有意义，CAR技术引入内核将会大大减少各种应用软件与操作系统的总体资源开销。在Elastos构件运行平台上直接运行二进制构件，这也符合对运行效率、实时性有严格要求的嵌入式系统的工业要求。二进制代码就是实际的CPU指令流，其所需的执行时间是可计算的，因此，系统运行时间是可预知的（predictable），这是目前存在的其他虚拟机系统所不能及的。 </p>

 	</body>
</html>