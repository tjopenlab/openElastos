<!--==========================================================================-->
<!-- Copyright (c) 2000-2009,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=GB2312">
<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
<script src="/xsl/docstyles.js"></script>
<title>CAR关键字-- substitutes </title>
</head>

<body>
	<h2>substitutes</h2>
	    <b>含义 </b>
	        <p> 此关键字用于表示<a class= "style1" href= "keywords_class.htm">普通类class</a>继承<a class= "style1" href= "keywords_generic.htm">泛类generic</a>。</p>
	
	    <b>语法 </b>
	    	<p>class ClassName <b>substitutes</b> GClassA {...} </p>
	    <b>使用说明 </b>
	        <p>1.子类中必须声明继承的泛类中声明的接口。 </p>
	        <p>2.泛类中不允许声明虚接口<a class= "style1" href= "keywords_virtual.htm">virtual</a>。 </p>
	        <p>3.泛类只能用于被普通类<a class= "style1" href= "keywords_class.htm">class</a>继承，不能被<a class= "style1" href= "keywords_aspect.htm">aspect</a>、<a class= "style1" href= "keywords_context.htm">context</a>、<a class= "style1" href= "keywords_applet.htm">applet</a>继承。 </p>
	        <p>4.inherits结构、aggregates结构以及substitutes结构都可以修饰普通类class，这三者的顺序是先inherits结构，再aggregates结构，再substitutes结构。 </p>

	    <b>使用范例 </b>
<pre class= code>
module
{
    interface IFoo {
        Foo();
    }
    
    interface IBar {
        Bar();
    }


    generic GFoo {
        interface IBar;
    }
    
    class CFoo <b>substitutes</b> GFoo {
        interface IBar; //必须声明GFoo实现的接口
        interface IFoo;
    }
}

</pre>
        <b><a class="style1" href="../keyword.htm">【CAR关键字列表】</a></b>
<script>footer("chinese")</script>

</body>

</html>