<!--==========================================================================-->
<!-- Copyright (c) 2000-2009,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<meta http-equiv=Content-Type content="text/html; charset=GB2312">
<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
<script src="/xsl/docstyles.js"></script>
<title>CAR关键字--local  </title>
</head>

<body>
	<h2>local </h2>
	    <b>含义 </b>
	        <p>此属性修饰接口和所有构件类，表示被修饰的对象只能在与客户端程序相同的域内使用。 </p>
	        <p>如果接口的属性为local，则实现该接口的类对象与客户端程序只能在相同的域内使用，不能用于远程调用。 </p>
	        <p>如果构件类的属性为local，则表示该类对象只能在客户端程序所在的域内创建。 </p>	
	    <b>语法 </b>
<pre class = code>
 [<b>local</b>]
 class className classBody;
 | interface interfaceName interfaceBody;
</pre>
        <b>使用说明 </b>
            <p>local属性必须显式指明，否则编译器报错。</p>
            <p> </p>
            <p>1.如果类包含构造函数constructor（内有非自描述参数），须用local修饰，编译器会自动把生成的类厂接口转为local。</p>
            <p>2.如果某接口参数或者constructor的参数使用非CAR支持的数据类型或者不可以用于列集/散集的数据类型，须用local修饰。</p>
            <p>3.local作为类属性时不能修饰<a class="style1" href="../keywords/keywords_aspect.htm">aspect</a>；作为接口属性时，只能修饰<a class="style1" href="../keywords/keywords_interface.htm">interface</a>,不能修饰callbacks、delegates和<a class="style1" href="../keywords/keywords_Asynchronous.htm">Asynchronous</a>接口。 </p>
            <p>4.详细使用规则请参见<a class= "style1" href= "..\others\InOut.htm">数据类型修饰方法参数时的使用规则一览表</a>。 </p>
	    <b>使用范例 </b>
	        <p>Local的一种用法是修饰接口，例如LocalDemo.car： </p>
<pre class= code>
module
{
    [local]
    interface IFoo {
        Foo ();
    }

    interface IBar {
        Bar ();
    }

    [local]
    class CFoo {
        constructor();
        constructor([in] Int32 id);
        constructor([in] PVoid param); // 非自描述类型
        interface IFoo;
    }

    class CFooBar {
        interface IFoo;
        interface IBar;
    }
}

</pre>
	        <p>上述构件中定义了具有local属性的接口IFoo和具有local属性的类CFoo。IFoo不能使用NewInContext（）来创建类CFooBar的对象。 </p>
            <p>但是当客户程序要接口IBar（非local）时，可以在不同的域内实例化CClass类的对象，也就是可以使用NewInContext来创建对象，只不过这时具有local接口的IFoo就不能被查询出来。 </p>
            <p>具有local属性的类，其构造函数都不能用于远程调用。 </p>
        <b><a class="style1" href="../attribute.htm">【CAR属性关键字列表】</a></b>

<script>footer("chinese")</script>

</body>

</html>