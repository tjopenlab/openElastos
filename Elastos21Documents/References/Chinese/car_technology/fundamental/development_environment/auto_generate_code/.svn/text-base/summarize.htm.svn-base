<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>自动生成代码框架</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>
<h2>自动生成代码框架的优点</h2>
    <p>编译环境自动生成代码的主要作用是封装和抽象构件的编写和使用，让用户更方便的开发和使用CAR构件。</p>
    <p>以下几个方面体现了CAR构件技术的这种易用性：</p>
    <ol>
        <li>用car书写的CAR构件接口描述文件。Hello构件虽然接口简单，但如果用户用C++编写，仍然要考虑到许多技术细节。采用car语言编写hello.car，不仅简单而且让用户更加习惯构件编程的思维方法，不纠缠于内部的技术细节。
        <li>自动生成元数据。CLS文件是CAR文件压缩后的样式库，里面描述了整个构件的接口、类、方法、结构、枚举等的定义。有了cls文件，就可以得到该构件的接口，函数的调用方法，甚至生成源码框架。在链接生成hello.dll的时候，将hello.cls也放入hello.dll，这样就等于将一本说明书和构件捆绑在一起。无论构件被复制移动到哪里，都可以知道该构件该如何使用。
        <li>智能指针的实现大大简化了用户调用构件的难度。在调用构件的过程中让用户感到最为困难的就是要考虑接口引用计数的规则。想要弄清楚何时该AddRef，何时该Release，并不是件容易的事。但是有了智能指针，用户对构件接口的调用感觉就像是在使用一个普通的C++对象。这点极大得方便了用户的开发。
        <li>许多构件的重要组成部分，象类厂，DLL中的注册函数等等，这些都由编译环境自动生成，不必用户再手工实现。
    </ol>
    <p>当然对于大多数用户来说，完全可以不必了解这些编译过程中的细节。只需在CAR编译环境生成的源代码框架中填写自己的实现代码，就可以做到构件编程。但对一些喜欢研究构件技术的用户，这些知识可能会对编程有所帮助。</p>
    <p><font color="red"><b>值得注意的是：</b>中间件marshalling主要分为build&nbsp;in和动态代理两种方法，Elastos2.0的CAR构件编译过程中，虽然由编译环境生成了一些代码，包括源码框架和构件接口的抽象，但这些代码都不用于marshalling，不会生成proxy和stub。</font></p>

<body><script>footer("chinese")</script>
</body>
</html>