<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>CAR构件的点击运行机制</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>
<h2>CAR构件点击运行的管理规则</h2>
    <p>在CAR构件的点击运行过程中，系统使用了路径查寻规则、安全验证规则、版本管理规则、清理维护规则。下文将对这些规则逐一进行介绍。</p>
    <h4>路径查寻规则</h4>
        <p>默认的路径查寻规则包括“指定路径规则”和“就近路径规则”两个方面。当点击事件发生后，如果用户指定了构件所在本地/远程URL的地址，系统则直接到此地址查寻该构件，如果存在，则直接下载。如果用户没有指定某主题应用所需构件的地址，或者指定地址处不存在该构件，又或者不存在合适版本的构件，那么系统首先使用就近路径规则先在本地查寻。如有合适版本的该构件，则开始下载；如没有，则在局域网中查寻；如仍没有，则从整个internet中查寻。</p>
    <h4>安全验证规则</h4>
        <p>当系统查寻到某构件准备下载时，需要进行安全验证，这包括“构件是否得到开发商的授权许可”验证及“构件自身的功能是否得到符合当前的系统环境”两个方面。构件的授权签名和安全性验证信息存在于构件的自描述域中。如果通过验证则可下载，否则不能下载。</p>
    <h4>版本管理规则</h4>
        <p>在构件的查寻下载、加载运行、卸载清理的过程中，版本管理是非常重要的，有关版本管理的知识参见<a class="style1" href="../version/about_version.htm">“CAR构件的版本管理方案”</a>。CAR构件采用主版本号、次版本号、生成编号、修正编号的四级版本编次方法。构件的版本管理五大规则是主版本兼容规则、默认最新规则、版本全同规则、共享首份规则、独立版本规则。</p>
    <h4>清理维护规则</h4>
        <p>当构件完成相关功能或者用户停止服务后，系统会对刚刚运行过的CAR构件进行必要的清理。根据当前（默认或用户自定义）的配置决定是否卸载构件、是否保留构件、保留在临时目录还是其它目录、以及保留多长时间等。</p>
    <p>综上所述，CAR构件点击运行的特征、事件、规则归纳如下表：</p>
    <table>
        <thead>
            <td>基本特征</td>
            <td>过程事件</td>
            <td>管理规则</td>
        </thead>
        <tr>
            <td>需求驱动性</td>
            <td>点击事件</td>
            <td>路径查寻规则</td>
        </tr>
       <tr>
            <td>即载即用性</td>
            <td>下载事件</td>
            <td>安全验证规则</td>
        </tr>
        <tr>
            <td>屏蔽用户性</td>
            <td>运行事件</td>
            <td>版本管理规则</td>
        </tr>
        <tr>
            <td>网络普适性</td>
            <td>清理事件</td>
            <td>清理维护规则</td>
        </tr>
    </table>

<script>footer("chinese")</script>
</body>

</html>