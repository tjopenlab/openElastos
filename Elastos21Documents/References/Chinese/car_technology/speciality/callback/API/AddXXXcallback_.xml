<?xml version = "1.0" encoding="GB2312" ?>
<?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/methodmanual.xsl"?>

<manpage>
   
     <volume> Callbacks相关API </volume>
    <method>AddXXXCallback</method>
    <description>
        <para>函数模板，向server对象注册一个异步回调事件。</para>
    </description>
    <syntax>
        <return_val> 
         <para>template <![CDATA[<class T>]]> </para>
        <para>static _ELASTOS  ECode</para>
         </return_val>
        <parameters>
        <api_param>
            <param_type>PInterface</param_type>
            <param_name>pServerObj</param_name>
            <param_note>
                <para> 指向server对象的接口指针，回调事件的抛出者。</para>
            </param_note>
        </api_param>
       <api_param>
            <param_type>T *</param_type>
            <param_name> pThis  </param_name>
            <param_note>
                <para> client对象指针，回调事件的响应者。</para>
            </param_note>
        </api_param>     
        <api_param>
            <param_type>ECode</param_type>
            <param_name> CARAPICALLTYPE T::*pFunc)(PInterface)  </param_name>
             <param_note>
                <para> 类成员函数指针，回调事件的处理函数,定义时必须用CARAPI定义。</para>
            </param_note>
        </api_param>      
        </parameters>
    </syntax>
    
    <remarks>
        <para>1.其中XXX对应回调接口中声明的方法名。</para>
        <para>2.回调接口中的每个方法，都对应一个AddXXXCallback函数。</para>
        <para>3.使用方法：CServer：：AddXXXCallback（......）,其中CServer表示抛出回调事件的server对象的类名。 </para>
        <para>4.当回调函数是类成员函数时调用此种形式的AddXXXCallback函数。</para>
        <para>5.每注册一个回调事件必须要有相应的注销操作，即可以对每个AddXXXCallback执行其相应的<link url= "RemoveXXXCallback.htm">RemoveXXXCallback</link>操作，也可对所有的事件AddXXXCallback后，调用<link url= "RemoveAllCallbacks.htm">RemoveAllCallbacks</link>进行统一注销。</para>
    </remarks>
     
</manpage>