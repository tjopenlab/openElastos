<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>回调事件机制</title>
</head>

<body>
<h2>CAR回调机制</h2>
    <h3 style="line-height: 150%">
	<span style="font-size: 10.5pt; line-height: 150%; font-family: 宋体">可连接对象</span></h3>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 150%; layout-grid-mode: char">
<span style="font-size:10.5pt;line-height:150%;font-family:宋体">在<span lang="EN-US">CAR</span>构件技术里，支持一个或多个回调接口的<span lang="EN-US">CAR</span>构件对象叫做可连接对象。</span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 150%; layout-grid-mode: char">
<span style="font-size:10.5pt;line-height:150%;font-family:宋体">
可连接对象支持两种接口，一种是普通接口，它里面的成员函数由服务器端自己实现；另一种就是回调接口，其中每个成员函数代表一个事件（<span lang="EN-US">event</span>），处理每个事件的函数由客户端实现。当特定事情发生时，如定时消息或用户鼠标操作发生时，构件对象产生一个事件，客户程序可以处理这些事件。</span></p>
<h3 style="line-height: 150%">
<span style="font-size: 10.5pt; line-height: 150%; font-family: 宋体">接收器对象</span></h3>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 150%; layout-grid-mode: char">
<span style="font-size:10.5pt;line-height:150%;font-family:宋体">在<span lang="EN-US">CAR</span>的回调机制中，有一种接收器<span lang="EN-US">(sink)</span>对象。</span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 150%; layout-grid-mode: char">
<span lang="EN-US" style="font-size:10.5pt;line-height:150%;font-family:
宋体">CAR</span><span style="font-size:10.5pt;line-height:150%;font-family:宋体">里的接收器对象相当于一个客户端回调函数的容器，在客户端的地址空间里，负责与可连接对象进行通信。只要有可连接对象存在，那么在客户端肯定要有接收器的存在。多个回调接口可对应一个接收器对象，这样可以减少通信花费的开销。当接收器与可连接对象建立连接后，客户程序可将自己实现的事件处理函数（回调函数）向接收器进行注册，而不是向可连接对象进行注册，又一次减少了通信开销。接收器会自动把在它里面注册的函数的回调接口指针告诉构件对象，构件对象在条件成熟时激发事件，如果客户注册了自己的回调接口方法，那么就会被调用，否则就调用接收器默认实现的回调接口方法。</span></p>
<p class="MsoNormal" style="text-indent: 21.0pt; line-height: 150%; layout-grid-mode: char">
<span style="font-size:10.5pt;line-height:150%;font-family:宋体">
在编写构件程序时，用户只需关心何时激发事件，而在编写客户端程序时，用户只需在适当的时候注册事件处理函数。其它的工作，如接收器对象的创建与实现、接收器与可连接对象建立通信的具体过程、事件的分发回调过程等都由<span lang="EN-US">CAR</span>实现。这样，用户在编写具有回调接口的构件和编写使用该构件的客户端程序都会变得相当简单。</span></p>
</body>
</html>