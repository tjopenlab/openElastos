<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>CAR技术特性</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>
    <h2>构件命名服务</h2>
        <h3>什么是命名服务机制？</h3>
            <p>CAR（Component&nbsp;Application&nbsp;Runtime）是科泰世纪公司拥有自主知识产权的构件技术。命名服务机制属于CAR构件技术的一部分，隶属于CAR构件技术的用户接口部分。CAR构件技术通过命名服务机制提供一种发布，获取，使用CAR构件的方法。</p>
            <p>命名服务是一种以字符串为标识的服务。服务程序可以通过操作系统API函数<a class="style1" href="../../../SoftwareDevelopmentManual/CoreServices/CARServices/NamingService/CSystem/RegisterRunningObject.htm">CSystem::RegisterRunningObject</a>向操作系统注册自己的服务接口，而服务的使用者（即客户端程序）则可以通过API函数<a class="style1" href="../../../SoftwareDevelopmentManual/CoreServices/CARServices/NamingService/CSystem/FindRunningObject.htm">CSystem::FindRunningObject</a>来获取指定的服务接口。</p>
            <p>命名服务通过简单友好的系统API函数，为系统服务以及用户构件提供了一套完整的CAR构件使用流程，具有良好的扩展性，并支持基于构件的动态更新和升级。</p>
        <h3>命名服务机制的流程和特点</h3>
            <p>命名服务包含两个部分：服务器端和客户端。在服务器端，用户获得某个构件接口指针（可以是用户自己的构件，也可以是用户远程获得的构件指针）后，通过CSystem::RegisterRunningObject函数向内核注册一个命名服务，用户选择合适的时间注销命名服务并释放资源；在客户端，其它用户可以通过CSystem::FindRunningObject&nbsp;API函数获得相应的构件服务并应用。</p>
            <p>命名服务机制的工作流程图如下：</p>
            <center><img src="images/naming.jpg"></center>
            <p>命名服务完成了将服务与字符串绑定的功能，用户可以通过相应的字符串获得该服务构件对象指针。其特点如下：</p>
            <ul>
                <li>用户和内核都可以创建一个命名服务，其它用户可以透明地获得该用户指针，而无需考虑其所在位置空间的不同。
                <li>命名服务server端获得的构件指针代表的可以是其server进程内空间创建并运行的构件，也可以是Elastos操作系统内核以接口形式提供的内核功能，还可以是server端所获得的其它进程所实现的构件服务。
                <li>用户一旦通过命名服务获得某个构件服务，在与构件服务交互的过程中就不再需要与命名服务相关联。
                <li>相对于命名服务所获得的构件服务， 命名服务也是一个普通的构件使用者，提供命名服务的程序可以选择在一个合适的时间点释放该构件服务指针。所有适应于CAR构件生命周期管理的操作和语义也适应于命名服务。
                <li>命名服务的生命周期由命名服务创建者所控制，使用命名服务的程序可以通过系统事件，或者进程间通讯给服务创建者相关信息，命名服务创建者可以通过对服务使用情况的分析来选择退出时机。
                <li>相关构件服务退出，命名服务就不再有效，其它再试图通过命名服务获取相关构件服务的程序将返回错误。
                <li>相关构件服务动态更新或者升级并不影响其它通过命名服务而获取该服务的程序。无需改动和重新编译，该程序依然可以正常地工作。
            </ul>
        <h3>命名服务机制的优点</h3>
            <p>用户程序通过字符串获取相关服务，而服务则可由系统以及其它用户程序提供，这种将服务和服务使用者隔离的方式减小了代码的耦合性，极大地增强了代码的可扩展性和安全性，同时也最大地发挥了系统的功能。</p>
            <p>从扩展性来看，一方面用户可以通过在保持接口定义不变的情况下修改服务程序代码，升级服务程序；而另一方面，用户也可以通过提供新的接口来扩展新的功能。新用户可以利用新的接口而不影响到旧用户，其代码就可以不经修改和重新编译而正常地运行。</p>
            <p>命名服务机制的扩展性还体现在用户通过CAR构件方式实现的程序都可以通过命名服务机制的方式提供给其它远程用户。<p>
            <p>从安全性来看，用户可以将信任度不高的服务放在一个单独的进程中启动，并通过命名服务机制去获取。这样就利用了进程地址空间机制隔离了服务与用户，同时服务和用户之间的数据交换也可以通过系统的构件平台数据交互机制进行检测。</p>
            <p>命名服务机制以简单的三个API函数向用户提供了对服务构件和字符串从绑定到获取，注销的整套机制，其操作方法为：调用CSystem::RegisterRunningObject函数将字符串绑定到服务构件，客户程序通过CSystem::FindRunningObject函数获取服务构件所绑定的字符串，调用<a class="style1" href="../../../SoftwareDevelopmentManual/CoreServices/CARServices/NamingService/CSystem/UnregisterRunningObject.htm">CSystem::UnregisterRunningObject</a>函数将命名服务注销。整套机制非常简约并易于理解，充分体现了软件设计中“简单即是美”的设计理念。</p>
            <p>通过命名服务机制，用户可以很方便地获取到Elastos操作系统动态装载的她的网络系统、文件系统和图形构件。利用命名服务机制，Elastos操作系统可以传递共享内存指针以及一些同步对象指针，从而实现了跨进程的进程间通讯。</p>
<script>footer("chinese")</script>
</body>
</html>