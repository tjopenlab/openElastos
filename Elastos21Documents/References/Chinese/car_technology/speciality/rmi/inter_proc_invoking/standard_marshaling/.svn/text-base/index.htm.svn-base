<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->
<html>
	<head>
		<meta http-equiv=Content-Type content="text/html; charset=GB2312">
				<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
				<script src="/xsl/docstyles.js"></script>
		<title>marshaling index</title>
	</head>
	<body>
		<h2>列集与散集机制</h2>
		<p>CAR构件技术支持远程接口调用，即允许构件服务和构件服务调用者处于操作系统的不同地址空间，这两个不同空间之间不允许彼此直接访问或者具有不同的访问权限。这个时候就需要某种通讯机制来实现不同地址空间之间的数据交互，这个过程被定义为CAR构件调用数据的列集/散集过程。 </p>
		<p>CAR构件技术支持远程接口的自动列集/散集机制（即标准marshaling/unmarshaling）。标准列集/散集机制提供了一套标准的列集/散集过程。通过该机制可以对CAR调用的各种类型的数据进行不同地址空间数据交互，而用户却如同在同一地址空间里面使用构件，透明地进行远程接口调用，也就是说该机制完全向用户屏蔽了底层使用标准列集/散集的过程。 </p>
        <p>本节将从以下方面介绍car构件的列集与散集机制：</p>
        <p><li><a class="style1" href= "stand_marshal.htm">标准列集/散集 </a></p>
<!--       <p><li><a class="style1" href= "..\custom_marshaling\cust_marshal_intro.htm">自定义列集/散集 </a></p>-->
        <p><li><a class="style1" href= "..\custom_marshaling\cust_marshal_elements.htm">CAR构件自定义列集/散集机制 </a></p>
<!--        <p>&nbsp;&nbsp;&nbsp;&nbsp;<a class="style1" href= "..\custom_marshaling\runtime_interface.htm">CAR构件运行时接口机制 </a></p>-->

	</body>
</html>