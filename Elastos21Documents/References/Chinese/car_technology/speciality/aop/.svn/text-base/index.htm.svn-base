<html>
	<head>
		<meta http-equiv=Content-Type content="text/html; charset=GB2312">
				<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
				<script src="/xsl/docstyles.js"></script>
		<title>aop_index</title>
	</head>
	<body>
		<h2>面向方面编程</h2>
		  <P>软件模块化是软件工程的重要思想之一，模块化的软件具有更好的可重用性、可维护性、可扩展性和可验证性，是实现软件工厂的必经之路，这也符合CAR构件模型的指导思想。</P>
		  <P>但是，软件中常常存在跨问题域的横切关注点（通常称为方面），相关代码大都横越多个模块，使用传统的软件开发方法很难有效的模块化这类代码。例如，一辆汽车可以分解为车身、底盘、引擎和轮胎等多个部件，而这些部件都拥有“品牌”、“生产厂家”以及“安全标准”等多种属性。相对于汽车的各个部件，这些属性就是横越它们的横切关注点。</P>
		  <P> Car构件模型的面向方面程序设计技术能够有效的将软件中的横切关注点独立封装、独立实现，并且能够与其它模块动态的组合。如同可以为汽车换装不同品牌的轮胎一样，利用car构件模型的面向方面程序设计技术，我们可以为不同性质的构件动态的实施不同的安全策略等等。</P>
		  <P>本节我们详细介绍CAR的面向方面程序设计技术，主要涉及两个问题：1）如何将方面封装为构件类；2）如何将方面构件类与普通构件类实施动态拼装。主要内容如下：</p>
        <p><li><a class="style1">CAR面向方面程序设计技术</a></p>
        <p><li><a class="style1" href= "aop_introduce.htm">简介</a></p>
        <p><li><a class="style1" href= "aop_aspect.htm">方面的封装--方面构件类</a></p>
        <p><li><a class="style1" href= "aop_aggregate.htm">方面的拼装--聚合</a></p>
        <p><li><a class="style1" >CAR面向方面程序设计举例</a></p>
        <p><li><a class="style1" href= "aggregate_release.htm"> 编写DLL</a></p>
        <p><li><a class="style1" href= "aggregate_use.htm"> 调用DLL</a></p>
	</body>
</html>