<html>

	<head>
		<meta http-equiv=Content-Type content = "text/html; charset=GB2312">
		<link rel="stylesheet" href="/xsl/docdemo.css" type="text/css">
    <script src="/xsl/docstyles.js"></script>
    <title>lifecycle</title>
	</head>

	<body>
		<h2>对象生命周期</h2>
		  <P>对象的<B>生命周期</B>是指对象在内存中存活的时间段，通常包括三个阶段：对象的创建、对象的使用以及对象的销毁。</P>
		  <P>在C++程序中，按照创建时机，对象可分为静态创建的对象和动态创建的对象；按照对象的角色，对象又可分为全局对象、局部对象以及成员对象。静态创建的全局对象的生命周期是整个程序的执行时间。在方法中静态创建的局部对象的生命周期是该方法的执行时间。而动态创建的对象的生命周期是从调用new语句开始直至调用delete语句为止。</P>
		  <P>为了合理的利用有限的内存资源，当一个动态创建的对象不再被访问时就应该立即被释放。这看起来似乎很简单，但是当程序复杂了以后，对象正确的释放时机往往很难把握，因为开发人员难以确定将要释放的对象是否仍然被其它对象引用。例如，在一个多线程程序中，如果有多个线程保存了某个对象的引用，那么当某个线程使用完该对象以后是否应该立刻释放它，取决于是否还有其它活着的线程仍然在使用该对象，而这涉及到程序间的并发问题，很难确定。</P>
		  <P>CAR构件模型采用<a class="style1" href= "refcnt_introduce.htm">引用计数</a>的方法对对象的生命周期进行管理，将程序开发人员从这种困境中解脱出来。在car构件模型中，car构件对象的生命周期由系统来管理，当开发人员不再使用一个对象时，无需直接释放它，而只要告知系统，又系统根据该对象的当前引用情况来决定是否要立即释放它。</P>
	</body>

</html>