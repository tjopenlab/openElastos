<!--==========================================================================-->
<!-- Copyright (c) 2000-2006,  Elastos, Inc.  All Rights Reserved.-->
<!--==========================================================================-->

<html>
<head>
<title>面向服务的软件体系结构</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312">
<script src="/xsl/docstyles.js"></script>
</head>

<body>
    <h2>面向服务的软件体系结构简介</h2>
        <p>本文的主要内容如下：</p>
        <ul>
            <li><a class="style1" href="#concept">SOA的概念
            <li><a class="style1" href="#Services">服务
            <li><a class="style1" href="#character">SOA的特征
            <li><a class="style1" href="#web_corba">SOA与Web&nbsp;Services和CORBA
            <li><a class="style1" href="#transfer">向SOA架构的迁移
        </ul>
    <A NAME="concept">
    <h3>SOA的概念</h3>
        <p>SOA（service-oriented&nbsp;architecture），即面向服务的体系结构，是一个构件模型。SOA是针对目前IT业所面临的挑战提出的。目前计算机技术发展很快，而且竞争激烈，各个公司为了在快速变化的环境中保持领先，就需要尽快将其所拥有的技术迅速转换成合适的商业模型。但由于不同的功能模块一般是建立在不同的运行环境之上，所以如何将各种异构的模块有机、快速地组合成一个整体，是目前大多数公司面临的挑战。为了解决上述问题，SOA体系结构应运而生。通俗地说，一个基于SOA的体系结构就是一个集成了各种服务的集合，这些服务可以相互之间或对外提供服务，并且可以在服务过程中进行简单地参数传递。</p>
        <p>其实SOA不算是新技术，最早反映SOA架构的就是Microsoft的DCOM和基于CORBA的ORBs（Object&nbsp;Request&nbsp;Brokers）。目前讨论最广泛的SOA技术是Web&nbsp;services，有人也常常将两者混为一谈，但两者并不等价。SOA服务和Web服务之间的区别在于设计。SOA的概念并没有确切地定义服务如何交互的具体战术，仅仅定义了服务如何相互理解以及如何交互。也就是说，SOA仅提出了服务理解和交互的执行战略，而Web&nbsp;Services则提出了实现SOA战略的具体战术。</p>
        <p>在<a class="style1" href="#Services">服务</a>、<a class="style1" href="#character">SOA的特征</a>和<a class="style1" href="#transfer">向SOA架构的迁移</a>中将详细介绍SOA中服务的概念，SOA的特点，以及SOA建立过程等。</p>
    <A NAME="Services"></A>
    <h3>服务（Services）</h3>
        <p>既然SOA是面向服务的，那么什么是服务（Services）呢？服务与服务调用者之间的关系又如何？服务如何向外公布自己的服务？下文将对上述问题进行讨论。</p>
        <h4>什么是服务?</h4>
            <p>服务就是封装成用于业务流程的可重用组件的应用程序函数。这句话似乎有些晦涩，简单地说，服务就是一个被组件封装的应用程序，可以对外提供函数的接口。</p>
            <p>对于服务的具体实现服务调用者并不关心，只要该服务的提供者能够响应服务调用者的命令并为其提供所需的服务就可以了。因此从服务请求者的角度来看，服务看起来就像是一个自包含的函数。这是种狭义的看法，从广义上看服务也可以看成是由其他服务组成的服务。例如，服务的实现可能包括在一个企业内部的不同计算机上或者许多业务合作伙伴拥有的计算机上执行的很多步骤。所以就封装的软件而言，服务可能是一个组件，也可能不是一个组件。但不管服务如何实现，请求者应用程序只需将服务看作是一个整体。</p>
        <h4>服务和服务调用者之间关系</h4>
            <p>在SOA架构中，服务之间或服务和调用者之间，通过定义良好的接口联系起来。接口是采用中立的方式进行定义的，即它应该独立于实现服务的硬件平台、操作系统和编程语言，以便构建在不同系统中的服务可以以一种统一的方式进行交互。这种没有强制绑定到特定的实现上，具有中立的接口定义的特征称为服务之间的松耦合。</p>
            <p>松耦合系统有两个好处：一是它的灵活性；二是当组成整个应用程序的每个服务的内部结构和实现逐渐地发生改变时，它能够继续存在。而紧耦合就意味着应用程序的不同组件之间的接口与其功能和结构是紧密相连的。所以在需要对整个或部分应用程序进行某种形式的更改时，它们就显得非常脆弱。在松耦合系统中，服务请求者不知道提供者实现的技术细节（比如程序设计语言、部署平台等），只需通过消息调用操作请求和响应消息，而不是通过使用API和文件格式。</p>
    <A NAME="character"></A>
    <h3>SOA的特征</h3>
        <p>SOA是一个协议框架，并没有提出具体的实现方法。那么什么样的体系结构可以称之为基于SOA的呢？一般来说SOA包含三个基本组成元素：服务使用者，服务提供者以及服务注册中心。三者的定义如下：</p>
        <ul>
            <li>服务使用者：服务使用者是一个应用程序、一个软件模块或需要一个服务的另一个服务。它发起对注册中心中的服务的查询，通过传输绑定服务，并且执行服务功能。服务使用者根据接口契约来执行服务。
            <li>服务提供者：服务提供者是一个可通过网络寻址的实体，它接受和执行来自使用者的请求。它将自己的服务和接口契约发布到服务注册中心，以便服务使用者可以发现和访问该服务。
            <li>服务注册中心：服务注册中心是服务发现的支持者。它包含一个可用服务的存储库，并允许感兴趣的服务使用者查找服务提供者接口。
        </ul>
        <p>图一描绘了面向服务的体系结构中三元素之间的协作关系。</p>
        <center><img src="images/character.jpg"></center>
        <center>图一:服务使用者、服务提供者及服务注册中心的协作关系</center>
        <p>面向服务的体系结构中的每个实体都扮演着服务提供者、使用者和注册中心这三种角色中的某一种（或多种）。面向服务的体系结构中的操作包括：</p>
        <ul>
            <li>发布：为了使服务可访问，需要发布服务描述以使服务使用者可以发现和调用它。
            <li>发现：服务请求者定位服务，方法是查询服务注册中心来找到满足其标准的服务。
            <li>绑定和调用：在检索完服务描述之后，服务使用者继续根据服务描述中的信息来调用服务。
        </ul>
        <p>面向服务的体系结构中的构件包括：</p>
        <ul>
            <li>服务：可以通过已发布接口使用服务，并且允许服务使用者调用服务。
            <li>服务描述：服务描述指定服务使用者与服务提供者交互的方式。它指定来自服务的请求和响应的格式。服务描述可以指定一组前提条件、后置条件和/或服务质量 (QoS) 级别。
        </ul>
        <p>通过上面的讨论，SOA应该具有以下特征：</p>
        <ul>
            <li>动态服务发现
            <li>提供服务接口调用的规范
            <li>服务是自包含和模块化的
            <li>服务支持互操作性
            <li>服务是松散耦合的
            <li>服务是位置透明的
            <li>服务是由组件组成的组合模块
        </ul>
    <A NAME="web_corba">
    <h3>SOA与Web&nbsp;Services和CORBA</h3>
        <h4>SOA与Web&nbsp;Services</h4>
            <p>如上文所述，SOA与Web&nbsp;Services的关系就是战略与战术的关系。即SOA提出一套体系结构模型，而Web&nbsp;Services采用具体技术实现SOA结构模型。图二展示了Web&nbsp;Services中各个部分的关系。</p>
            <center><img src="images/web_corba.jpg"></center>
            <center>图二：Web&nbsp;Services各部分间的关系</center>
            <p>与“图一:服务使用者、服务提供者及服务注册中心的协作关系”比较可以看出，两者基本可以一一对应。但是Web&nbsp;Services并不等同于面向服务的体系结构。Web&nbsp;Services是包括XML，SOAP，WSDL 和UDDI在内的技术的集合，它使您能够针对特定的消息传递和应用程序集成问题构建编程解决方案。随着时间的推移相信这些技术将逐渐成熟，并最终被更好、更有效、更健壮的技术所取代。但是就目前的情况而言，它们可以发挥作用，而且Web&nbspServices证明了SOA架构是确实可行的。</p>
        <h4>SOA与CORBA</h4>
            <p>CORBA（Common&nbsp;Object&nbsp;Broker&nbsp;Request&nbsp;Architecture），即基于通用对象请求代理体系结构，是对象管理集团（OMG）开发的一系列的规范，目前最主要的分布对象的体系结构之一。CORBA的目标是要达到平台无关、编程语言无关、以及网络传输协议无关的互操作。通过上面对CORBA的定义可以看出，CORBA也是为解决不同环境中模块的互操作而提出的一套规范和标准，与SOA相比有些共同点。如两者都定义了不同应用程序间交互的方式，CORBA也提供了类似于SOA中的服务流程。</p>
            <p>但是两者的区别还是明显的。首先，CORBA规范的目标是使不同的应用程序之间可以进行交互，独立于操作系统并使得分布的对象可以进行通信，CORBA的提出早于Internet普及。因此当Internet上通信成为未来发展趋势，IIOP（Internet&nbsp;Interoperability&nbsp;Protocol）提供ORB交互能力时，CORBA就显得不是那么得心应手了。其次，符合CORBA的应用程序多是基于C，C++，Java，Smalltalk这样的编程语言，因此CORBA更适合于企业级的紧密耦合，对系统安全要求高，面向对象这样的应用程序。</p>
            <p>总的说来，CORBA和SOA有以下的不同：</p>
            <ol>
                <li>CORBA是基于对象的，并使得对象的创建是在一个分布的系统中。而目前SOA的应用更倾向于商务流程的整合。
                <li>CORBA应用程序的开发适合使用面向对象技术和UML语言，并且是基于C，C++或Smalltalk这样的语言。而SOA更像是设计数据流，而与语言无关。
                <li>CORBA并没有描述商务流程的部分，不能在CORBA中找到一种描述非结构的语言或控制商务流程的语言。而SOA在这方面具有优势。
                <li>CORBA需要编译IDL语言以生成接口的stub和框架，提供对外服务，因此是紧密耦合的。而SOA是建立在松耦合的基础上。
            </ol>
            <p>从上面的讨论可以看出，SOA与CORBA两者的基础不同。尤其是SOA，在很多程度上还只是个概念，并不成熟，有待进一步地发展。而CORBA以其复杂、难用和高的门槛使不少开发人员望而却步。当然CORBA的复杂性是相对的，而SOA的灵活性也是以复杂性为代价的，在Internet的环境中更是如此。尽管这样，还是有理由相信SOA会有更为广泛的前景。因为SOA具有灵活的体系结构，能够更好地适应环境的变化，符合未来发展的方向。</p>
    <A NAME="transfer">
    <h3>向SOA架构的迁移</h3>
        <p>如何从传统的体系架构迁移到SOA架构上来是一项十分具有挑战性的工作，因为这里涉及到很多方面的问题，而不仅仅是增加几个接口，还牵涉到底层系统的支持。总的来说，在向SOA体系结构迁移过程中应该满足以下要求：</p>
        <ol>
            <li>要尽量利用现有的资产。因为现有系统通常都包含对企业很有价值的东西，很少是可以抛弃的。从战略上讲，目标是构造一个新的体系结构来创造所有想要的价值。但从战术上讲，必须集成现有系统。以便随着时间的推移，在可管理或渐进式的项目中分化或取代它们。
            <li>支持所有必需的集成类型或架构。这包括：
                <ul>
                    <li>用户交互 ―― 能够提供单一的、交互式的用户接口
                    <li>应用程序连接性 ―― 依靠底层的通信层，提供构成SOA体系结构的基础
                    <li>流程集成 ―― 编排应用程序和服务
                    <li>信息集成 ―― 联合和移动企业数据
                    <li>依集成需求而构建 ―― 构建和部署新的应用程序和服务
                </ul>
            <li>允许渐进式实现和资产迁移。为了获得最大回报率，这是迁移到SOA体系结构的最关键的一个方面。合理安排迁移的过程是迁移成功与否的决定因素，很多项目由于不切实际的实现进度安排而使得迁移失败。
            <li>包括一个以标准的组件框架为基础构建的开发环境，促进更好地重用模块和系统，允许将遗留资产转移到这个框架中，并且考虑到新技术的及时实现。
            <li>迁移过程中需要采取灵活的政策，允许实现新的计算模型，特别是新的基于Portal的客户端模型、网格计算和按需计算（on-demand&nbsp;computing）。
        </ol>
        <p>SOA的迁移过程可以分为以下四个阶段：</p>
        <p>第一个阶段是最简单的，因为它只需创建单独的服务。</p>
        <p>第二个阶段不仅可以创建服务，而且可以开始将业务功能集成到SOA中。这涉及多个层次的集成，其中包括应用程序集成、信息集成、流程集成和整个系统集成。</p>
        <p>第三个阶段涉及到将企业IT基础设施转换到SOA模型。</p>
        <p>第四个阶段集中于转换业务模型，以使之成为按需就绪的模型。</p>
        <p>从IT专业人员的角度来看（与业务层相比），创建SOA应用程序，通常要经历构建，部署，使用和管理四个阶段。</p>
        <p>在构建阶段，可以定义业务模型或流程、软件模型和SOA模型。之后就可以创建一组服务，这组服务可以与已发布的通用接口一起重用。</p>
        <p>在部署阶段，提取创建的服务，并把它们放在一个可执行，可管理的环境之中。</p>
        <p>在使用阶段，根据前面定义的SOA和软件模型来装配应用程序，并且测试其软件质量以及非功能性需求，如性能、可伸缩性等。应用程序现在已经准备完毕并且可用于用户。</p>
        <p>最后的管理阶段是一个长期的过程。在这个阶段中，可以对SOA的安全和使用进行监控和管理，以及在已经制订好的SOA服务级协定或策略的相应方面进行性能比较。</p>

<script>footer("chinese")</script>
</body>
</html>