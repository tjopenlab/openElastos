<?xml version = "1.0" encoding="GB2312" ?>
    <?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/interfaceman.xsl"?><manpage>
    <volume>同步</volume>
    <interface> DzReaderWriterLock Class </interface>
    <description>
        <para>读写锁类。</para>
    </description>
    <methods>
<self>

    <method>
        <method_name>ReaderWriterLock Constructor</method_name>
        <method_url>DzReaderWriterLock\structure\ReaderWriterLock</method_url>
    <m_description>
        构造读写锁对象
    </m_description>
    </method>

    <method>
        <method_name>ReaderLock</method_name>
        <method_url>DzReaderWriterLock\ReaderLock</method_url>
    <m_description>
        获取读者锁
    </m_description>
    </method>

    <method>
        <method_name>ReaderTryLock</method_name>
        <method_url>DzReaderWriterLock\ReaderTryLock</method_url>
    <m_description>
        尝试在指定时间间隔内获取读者锁
    </m_description>
    </method>

    <method>
        <method_name>ReaderUnlock</method_name>
        <method_url>DzReaderWriterLock\ReaderUnlock</method_url>
    <m_description>
        释放已占有的读者锁
    </m_description>
    </method>

    <method>
        <method_name>UpgradeToWriter</method_name>
        <method_url>DzReaderWriterLock\UpgradeToWriter</method_url>
    <m_description>
       将已占有的读者锁升级为写者锁
    </m_description>
    </method>

    <method>
        <method_name>TryUpgradeToWriter</method_name>
        <method_url>DzReaderWriterLock\TryUpgradeToWriter</method_url>
    <m_description>
        尝试在指定时间间隔内将已占有的读者锁升级为写者锁
    </m_description>
    </method>

    <method>
        <method_name>WriterLock</method_name>
        <method_url>DzReaderWriterLock\WriterLock</method_url>
    <m_description>
        获取写者锁
    </m_description>
    </method>

    <method>
        <method_name>WriterTryLock</method_name>
        <method_url>DzReaderWriterLock\WriterTryLock</method_url>
    <m_description>
        尝试在指定时间间隔内获取写者锁
    </m_description>
    </method>

    <method>
        <method_name>WriterUnlock</method_name>
        <method_url>DzReaderWriterLock\WriterUnlock</method_url>
    <m_description>
        释放已占有的写者锁
    </m_description>
    </method>

    <method>
        <method_name>DowngradeFromWriter</method_name>
        <method_url>DzReaderWriterLock\DowngradeFromWriter</method_url>
    <m_description>
        将已占有的写者锁降级为读者锁
    </m_description>
    </method>

    <method>
        <method_name>IsReaderLockHeld</method_name>
        <method_url>DzReaderWriterLock\IsReaderLockHeld</method_url>
    <m_description>
        判断是否已经获得了读者锁
    </m_description>
    </method>

    <method>
        <method_name>IsWriterLockHeld</method_name>
        <method_url>DzReaderWriterLock\IsWriterLockHeld</method_url>
    <m_description>
        判断是否已经获得了写者锁
    </m_description>
    </method>

</self>
    </methods>

    <remarks>
        <para>
        一个读写锁类的对象代表一个“读写锁”（一种同步对象），通过它可允许一个线程独占访问一个资源，或是多个线程共享访问此资源。
        </para>
        <para>
        读写锁对象在某个时刻可以允许单个写者或多个读者所占有。当读写锁对象为一个写者所占有时，其它线程无论以何种身份（写者或读者）获取读写锁对象皆会进入等待状态，直到此写者释放它为止。当读写锁对象为一个或多个读者所占有，所有以写者身份获取读写锁对象的线程皆会进入等待状态，直到最后一个读者释放它为止。
        </para>
        <para>
        为了使用读写锁对象，必须在需要时通过读写锁类构造函数<link url="DzReaderWriterLock/structure/ReaderWriterLock.htm">DzReaderWriterLock::ReaderWriterLock</link>构造它。读写锁对象可以被定义为全局或局部变量，或是被创建在内核堆上。
        </para>
        <para>
        当前线程可以通过调用<link url="DzReaderWriterLock/WriterLock.htm">DzReaderWriterLock::WriterLock</link>或<link url="DzReaderWriterLock/WriterTryLock.htm">DzReaderWriterLock::WriterTryLock</link>成员函数（尝试）以写者身份占有读写锁对象（即获取写者锁）。已成为写者的线程可以通过调用<link url="DzReaderWriterLock/WriterUnlock.htm">DzReaderWriterLock::WriterUnlock</link>成员函数释放已占有的读写锁对象（即释放写者锁）。类似地，当前线程可以通过调用<link url="DzReaderWriterLock/ReaderLock.htm">DzReaderWriterLock::ReaderLock</link>或<link url="DzReaderWriterLock/ReaderTryLock.htm">DzReaderWriterLock::ReaderTryLock</link>成员函数（尝试）以读者身份占有读写锁对象（即获取读者锁）。已成为读者的线程可以通过调用<link url="DzReaderWriterLock/ReaderUnlock.htm">DzReaderWriterLock::ReaderUnlock</link>成员函数释放已占有的读写锁对象（即释放读者锁）。另外，已成为读者的线程可以通过调用<link url="DzReaderWriterLock/UpgradeToWriter.htm">DzReaderWriterLock::UpgradeToWriter</link>或<link url="DzReaderWriterLock/TryUpgradeToWriter.htm">DzReaderWriterLock::TryUpgradeToWriter</link>成员函数（尝试）升级为写者；已成为写者的线程可以通过调用<link url="DzReaderWriterLock/DowngradeFromWriter.htm">DzReaderWriterLock::DowngradeFromWriter</link>成员函数降级为读者。读写锁对象是不可递归的，这意味着一个已经成为读者或写者的线程不可以再次以读者或写者身份占有同一读写锁对象。线程可以通过调用<link url="DzReaderWriterLock/IsReaderLockHeld.htm">DzReaderWriterLock::IsReaderLockHeld</link>成员函数来判断是否已经以读者身份占有了此读写锁对象（即是否已经获得了读者锁）；类似地，可以通过调用<link url="DzReaderWriterLock/IsWriterLockHeld.htm">DzReaderWriterLock::IsWriterLockHeld</link>成员函数来判断是否已经以写者身份占有了此读写锁对象（即是否已经获得了写者锁）。
        </para>
        <para>
        在读写锁对象析构前必须保证此读写锁对象处于未被占有状态。
        </para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Elastos操作系统
            </system_name>
        </system>
        <headerfile>
            <file_name> ddk.h </file_name>
        </headerfile>
    </requirements>
</manpage>
