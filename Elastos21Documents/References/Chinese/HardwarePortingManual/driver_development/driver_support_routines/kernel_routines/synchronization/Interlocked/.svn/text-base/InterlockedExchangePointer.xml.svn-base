<?xml version = "1.0" encoding="GB2312" ?>
    <?xml:stylesheet type="text/xsl" href="/xsl/xsl_c/methodmanual.xsl"?><manpage>
<volume>同步</volume>
<method> InterlockedExchangePointer </method>
    <description>
        <para>
            InterlockedExchangePointer执行一对指针的交换。该函数可以防止多个（一个以上）线程同时对一个变量进行操作。
        </para>
    </description>
    <syntax>
        <return_val>PVoid</return_val>
        <parameters>
            <api_param>
                <param_type> PVoid * </param_type>
                <param_name> pTarget </param_name>
                <param_note>
                    <para>
                        指向被交换值地址的指针
                    </para>
                </param_note>
            </api_param>
            <api_param>
                <param_type> PVoid </param_type>
                <param_name> value </param_name>
                <param_note>
                    <para>
                        指向指针pTarget指向的变量赋的新值的指针
                    </para>
                </param_note>
            </api_param>
        </parameters>
    </syntax>

    <return>
        <para>返回参数pTarget指向的变量的初始值。</para>
    </return>

    <remarks>
        <para>Interlocked系列函数提供一个简单的机制来同步访问被多个线程共享的变量。如果变量处于共享内存中，不同进程的线程可以使用这种机制。</para>
        <para>在32位系统中，参数是32位的并且是32位对齐的。否则该函数在多处理器的x86系统和任何非x86系统运行时可能会失败。</para>
        <para>如果需要交换数值，可以使用<link url="InterlockedExchange.htm">InterlockedExchange</link>代替该函数。</para>
    </remarks>

    <requirements>
        <system>
            <system_name>
                Elastos操作系统
            </system_name>
        </system>
        <headerfile>
            <file_name> ddk.h </file_name>
        </headerfile>
    </requirements>
</manpage>